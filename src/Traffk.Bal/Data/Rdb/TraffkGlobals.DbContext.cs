/*
This was autogenerated
DO NOT MODIFY BY HAND!!!
TT File: Rdb.Schema.tt
XML File: C:\src\traffk\HealthInformationPortal\src\Traffk.Bal\Data\Rdb\TraffkGlobals.SchemaMeta.xml
Generation Time: 05/11/2017 16:59:22
*/
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using RevolutionaryStuff.Core;
using RevolutionaryStuff.Core.ApplicationParts;
using RevolutionaryStuff.Core.Database;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data;
using System.Data.SqlClient;
using System.Threading.Tasks;
using System.Runtime.Serialization;

namespace Traffk.Bal.Data.Rdb
{
    public partial class TraffkGlobalsContext
    {
		protected override void OnModelCreating(ModelBuilder modelBuilder)
		{
            base.OnModelCreating(modelBuilder);
		}

		#region Collections

		
		public DbSet<DataSource> DataSources { get; set; } //dbo.DataSources

		
		public DbSet<Job> Job { get; set; } //HangFire.Job

		#endregion

		#region Sprocs

		#endregion

	}

	[Table("DataSources", Schema = "dbo")]
	public partial class DataSource : IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<int>
	{
        public static readonly DataSource[] None = new DataSource[0];

		object IPrimaryKey.Key { get { return DataSourceId; }}
	
		int IPrimaryKey<int>.Key { get { return DataSourceId; }}

		[DisplayName("Data Source Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("DataSourceId")]
		public int DataSourceId { get; set; }

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int? TenantId { get; set; }

		/// <summary>
		/// Datetime when this entity was created.
		/// </summary>
		[Description("Datetime when this entity was created.")]
		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Data Source Settings")]
		partial void OnDataSourceSettingsDeserialized();

        [NotMapped]
        public Bal.Settings.DataSourceSettings DataSourceSettings
        {
            get
            {
                if (DataSourceSettings_p == null)
                {
                    DataSourceSettings_p = Bal.Settings.DataSourceSettings.CreateFromJson(DataSourceSettingsJson) ?? new Bal.Settings.DataSourceSettings();
					OnDataSourceSettingsDeserialized();
                }
                return DataSourceSettings_p;
            }
            set { DataSourceSettings_p = value; }
        }
        private Bal.Settings.DataSourceSettings DataSourceSettings_p;

		[Column("DataSourceSettings")]
		public string DataSourceSettingsJson { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} DataSourceId={DataSourceId} {extras}";
		}

		partial void OnConstructed();
	
		public DataSource()
			: this(null)
		{}

		public DataSource(DataSource other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					DataSourceId = other.DataSourceId;
				}
				TenantId = other.TenantId;
				DataSourceSettingsJson = other.DataSourceSettingsJson;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
            if (DataSourceSettings_p != null)
            {
				var json = DataSourceSettings_p.ToJson();
				if (DataSourceSettingsJson != json)
				{
					DataSourceSettingsJson = json;
				}				 
            }
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			PartialValidate();
        }
	}

	[Table("Job", Schema = "HangFire")]
	public partial class Job : IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<int>
	{
        public static readonly Job[] None = new Job[0];

		//skipped: HangFire.State

		//skipped: HangFire.JobParameter

		object IPrimaryKey.Key { get { return Id; }}
	
		int IPrimaryKey<int>.Key { get { return Id; }}

		[DisplayName("Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("Id")]
		public int Id { get; set; }

		[DisplayName("State Id")]
		[Column("StateId")]
		public int? StateId { get; set; }

		[DisplayName("State Name")]
		[MaxLength(20)]
		[Column("StateName")]
		public string StateName { get; set; }

		[DisplayName("Invocation Data")]
		[NotNull]
		[Required]
		[Column("InvocationData")]
		public string InvocationData { get; set; }

		[DisplayName("Arguments")]
		[NotNull]
		[Required]
		[Column("Arguments")]
		public string Arguments { get; set; }

		[DisplayName("Created At")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAt")]
		public DateTime CreatedAt { get; set; }

		[DisplayName("Expire At")]
		[Column("ExpireAt")]
		public DateTime? ExpireAt { get; set; }

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int? TenantId { get; set; }

		[DisplayName("Result Data")]
		[Column("ResultData")]
		public string ResultData { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} Id={Id} {extras}";
		}

		partial void OnConstructed();
	
		public Job()
			: this(null)
		{}

		public Job(Job other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					Id = other.Id;
				}
				StateId = other.StateId;
				StateName = other.StateName;
				InvocationData = other.InvocationData;
				Arguments = other.Arguments;
				ExpireAt = other.ExpireAt;
				TenantId = other.TenantId;
				ResultData = other.ResultData;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.Text(StateName, nameof(StateName), true, 0, 20);
			Requires.NonNull(InvocationData, nameof(InvocationData));
			Requires.NonNull(Arguments, nameof(Arguments));
			PartialValidate();
        }
	}
}
