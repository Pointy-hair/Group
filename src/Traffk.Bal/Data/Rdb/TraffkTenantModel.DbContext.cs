/*
This was autogenerated
DO NOT MODIFY BY HAND!!!
TT File: Rdb.Schema.tt
XML File: C:\src\traffk\HealthInformationPortal\src\Traffk.Bal\Data\Rdb\TraffkTenantModel.SchemaMeta.xml
Generation Time: 06/16/2017 16:42:03
*/
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using RevolutionaryStuff.Core;
using RevolutionaryStuff.Core.ApplicationParts;
using RevolutionaryStuff.Core.Database;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data;
using System.Data.SqlClient;
using System.Threading.Tasks;
using System.Runtime.Serialization;

namespace Traffk.Bal.Data.Rdb.TraffkTenantModel
{
    public partial class TraffkTenantModelDbContext
    {
		protected override void OnModelCreating(ModelBuilder modelBuilder)
		{
            base.OnModelCreating(modelBuilder);
			modelBuilder.Entity<Contact>()
				.HasDiscriminator<string>(nameof(Contact.ContactTypeStringValue))
				.HasValue<CarrierContact>("Carrier")
				.HasValue<OrganizationContact>("Organization")
				.HasValue<PersonContact>("Person")
				.HasValue<ProviderContact>("Provider")
				.HasValue<UserContact>("User")
				;
		}

		#region Collections

		
		public DbSet<Address> Addresses { get; set; } //dbo.Addresses

		
		public DbSet<App> Apps { get; set; } //dbo.Apps

		
		public DbSet<BerensonEggersTypeOfService> BerensonEggersTypeOfServices { get; set; } //CmsGov.BerensonEggersTypeOfServices

		
		public DbSet<CareAlert> CareAlerts { get; set; } //Health.CareAlerts

		
		public DbSet<Communication> Communications { get; set; } //dbo.Communications

		
		public DbSet<CommunicationBlast> CommunicationBlasts { get; set; } //dbo.CommunicationBlasts

		
		public DbSet<CommunicationBlastTracker> CommunicationBlastTrackers { get; set; } //dbo.CommunicationBlastTrackers

		
		public DbSet<CommunicationHistory> CommunicationHistory { get; set; } //dbo.CommunicationHistory

		
		public DbSet<CommunicationPiece> CommunicationPieces { get; set; } //dbo.CommunicationPieces

		
		public DbSet<CommunicationPieceVisit> CommunicationPieceVisits { get; set; } //dbo.CommunicationPieceVisits

		
		public DbSet<Contact> Contacts { get; set; } //dbo.Contacts

		public DbSet<CarrierContact> CarrierContacts { get; set; }

		public DbSet<OrganizationContact> OrganizationContacts { get; set; }

		public DbSet<PersonContact> PeopleContacts { get; set; }

		public DbSet<ProviderContact> ProviderContacts { get; set; }

		public DbSet<UserContact> UserContacts { get; set; }

		
		public DbSet<Country> Countries { get; set; } //ISO3166.Countries

		
		public DbSet<Creative> Creatives { get; set; } //dbo.Creatives

		
		public DbSet<DataSource> DataSources { get; set; } //dbo.DataSources

		
		public DbSet<DataSourceFetche> DataSourceFetches { get; set; } //dbo.DataSourceFetches

		
		public DbSet<DataSourceFetchItem> DataSourceFetchItems { get; set; } //dbo.DataSourceFetchItems

		
		public DbSet<DateDimension> DateDimensions { get; set; } //dbo.DateDimensions

		
		public DbSet<Eligibility> Eligibility { get; set; } //Health.Eligibility

		
		public DbSet<HealthcareCommonProcedureCodingSystemCode> HealthcareCommonProcedureCodingSystemCodes { get; set; } //CmsGov.HealthcareCommonProcedureCodingSystemCodes

		
		public DbSet<HealthCareProviderTaxonomyCodeCrosswalk> HealthCareProviderTaxonomyCodeCrosswalk { get; set; } //CmsGov.HealthCareProviderTaxonomyCodeCrosswalk

		
		public DbSet<ICD10> ICD10 { get; set; } //InternationalClassificationDiseases.ICD10

		
		public DbSet<Job> Job { get; set; } //HangFire.Job

		
		public DbSet<LabCertificationCode> LabCertificationCodes { get; set; } //CmsGov.LabCertificationCodes

		
		public DbSet<Labeler> Labelers { get; set; } //NationalDrugCode.Labelers

		
		public DbSet<Lookup> Lookups { get; set; } //dbo.Lookups

		
		public DbSet<MedicalClaim> MedicalClaims { get; set; } //Health.MedicalClaims

		
		public DbSet<MedicalClaimDiagnose> MedicalClaimDiagnoses { get; set; } //Health.MedicalClaimDiagnoses

		
		public DbSet<MedicalClaimLine> MedicalClaimLines { get; set; } //Health.MedicalClaimLines

		
		public DbSet<MedicareOutpatientGroupsPaymentGroupCode> MedicareOutpatientGroupsPaymentGroupCodes { get; set; } //CmsGov.MedicareOutpatientGroupsPaymentGroupCodes

		
		public DbSet<MedicareSpecialtyCode> MedicareSpecialtyCodes { get; set; } //CmsGov.MedicareSpecialtyCodes

		
		public DbSet<Member> Members { get; set; } //Health.Members

		
		public DbSet<MillimanScore> MillimanScores { get; set; } //Health.MillimanScores

		
		public DbSet<Note> Notes { get; set; } //dbo.Notes

		
		public DbSet<NoteTarget> NoteTargets { get; set; } //dbo.NoteTargets

		
		public DbSet<Package> Packages { get; set; } //NationalDrugCode.Packages

		
		public DbSet<Participation> Participation { get; set; } //Health.Participation

		
		public DbSet<Pharmacy> Pharmacy { get; set; } //Health.Pharmacy

		
		public DbSet<PricingIndicatorCode> PricingIndicatorCodes { get; set; } //CmsGov.PricingIndicatorCodes

		
		public DbSet<Product> Products { get; set; } //NationalDrugCode.Products

		
		public DbSet<QualityMetric> QualityMetrics { get; set; } //Health.QualityMetrics

		
		public DbSet<Release> Releases { get; set; } //dbo.Releases

		
		public DbSet<ReleaseChange> ReleaseChanges { get; set; } //dbo.ReleaseChanges

		
		public DbSet<ReportMetaData> ReportMetaData { get; set; } //Joint.ReportMetaData

		
		public DbSet<SchemaTable> SchemaTables { get; set; } //db.SchemaTables

		
		public DbSet<ShardMappingsLocal> ShardMappingsLocal { get; set; } //__ShardManagement.ShardMappingsLocal

		
		public DbSet<ShardMapsLocal> ShardMapsLocal { get; set; } //__ShardManagement.ShardMapsLocal

		
		public DbSet<ShardsLocal> ShardsLocal { get; set; } //__ShardManagement.ShardsLocal

		
		public DbSet<Tenant> Tenants { get; set; } //dbo.Tenants

		
		public DbSet<Visit> Visits { get; set; } //Health.Visits

		#endregion

		#region Sprocs

		public async Task<ConnectionHelpers.Result> FiscalYearsConfigureAsync(int? tenantId = null, int? baselineFiscalYear = null, int? baselineCalendarYear = null, int? baselineCalendarMonth = null) 
		{
            var ps = new SqlParameter[]
                {
                    new SqlParameter("@tenantId", tenantId==null ? DBNull.Value:(object) tenantId){Direction=ParameterDirection.Input},
                    new SqlParameter("@baselineFiscalYear", baselineFiscalYear==null ? DBNull.Value:(object) baselineFiscalYear){Direction=ParameterDirection.Input},
                    new SqlParameter("@baselineCalendarYear", baselineCalendarYear==null ? DBNull.Value:(object) baselineCalendarYear){Direction=ParameterDirection.Input},
                    new SqlParameter("@baselineCalendarMonth", baselineCalendarMonth==null ? DBNull.Value:(object) baselineCalendarMonth){Direction=ParameterDirection.Input},
                };
            var conn = Database.GetDbConnection();
			if (conn.State!=ConnectionState.Open)
			{
	            await conn.OpenAsync();
			}
            return await conn.ExecuteNonQueryAsync(null, "dbo.FiscalYearsConfigure", null, ps);
		}

		internal async Task<ConnectionHelpers.Result<Traffk.Bal.Data.GetCountsResult.Item>> GetFieldCountsAsync(string schemaName = null, string tableName = null, int? tenantId = null, string fieldNamesCsv = null) 
		{
            var ps = new SqlParameter[]
                {
                    new SqlParameter("@schemaName", schemaName==null ? DBNull.Value:(object) schemaName){Direction=ParameterDirection.Input},
                    new SqlParameter("@tableName", tableName==null ? DBNull.Value:(object) tableName){Direction=ParameterDirection.Input},
                    new SqlParameter("@tenantId", tenantId==null ? DBNull.Value:(object) tenantId){Direction=ParameterDirection.Input},
                    new SqlParameter("@fieldNamesCsv", fieldNamesCsv==null ? DBNull.Value:(object) fieldNamesCsv){Direction=ParameterDirection.Input},
                };
            var conn = Database.GetDbConnection();
			if (conn.State!=ConnectionState.Open)
			{
	            await conn.OpenAsync();
			}
            return await conn.ExecuteReaderAsync<Traffk.Bal.Data.GetCountsResult.Item>(null, "dbo.GetFieldCounts", null, ps);
		}

		public async Task<ConnectionHelpers.Result> JobResetAsync(int? jobId = null) 
		{
            var ps = new SqlParameter[]
                {
                    new SqlParameter("@jobId", jobId==null ? DBNull.Value:(object) jobId){Direction=ParameterDirection.Input},
                };
            var conn = Database.GetDbConnection();
			if (conn.State!=ConnectionState.Open)
			{
	            await conn.OpenAsync();
			}
            return await conn.ExecuteNonQueryAsync(null, "dbo.JobReset", null, ps);
		}

		#endregion

	}

	[Table("ShardMappingsLocal", Schema = "__ShardManagement")]
	public partial class ShardMappingsLocal : IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<Guid>
	{
        public static readonly ShardMappingsLocal[] None = new ShardMappingsLocal[0];

		object IPrimaryKey.Key { get { return MappingId; }}
	
		Guid IPrimaryKey<Guid>.Key { get { return MappingId; }}

		[DisplayName("Mapping Id")]
		[Key]
		[Column("MappingId")]
		public Guid MappingId { get; set; }

		[DisplayName("Shard Id")]
		[Column("ShardId")]
		public Guid ShardId { get; set; }

		//LinksTo:__ShardManagement.ShardsLocal
		[ForeignKey("ShardId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public ShardsLocal Shard { get; set; }

		[DisplayName("Shard Map Id")]
		[Column("ShardMapId")]
		public Guid ShardMapId { get; set; }

		//LinksTo:__ShardManagement.ShardMapsLocal
		[ForeignKey("ShardMapId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public ShardMapsLocal ShardMap { get; set; }

		[DisplayName("Min Value")]
		[Column("MinValue")]
		public byte[] MinValue { get; set; }

		[DisplayName("Max Value")]
		[Column("MaxValue")]
		public byte[] MaxValue { get; set; }

		[DisplayName("Status")]
		[Column("Status")]
		public int Status { get; set; }

		[DisplayName("Lock Owner Id")]
		[Column("LockOwnerId")]
		public Guid LockOwnerId { get; set; }

		[DisplayName("Last Operation Id")]
		[Column("LastOperationId")]
		public Guid LastOperationId { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} MappingId={MappingId} {extras}";
		}

		partial void OnConstructed();
	
		public ShardMappingsLocal()
			: this(null)
		{}

		public ShardMappingsLocal(ShardMappingsLocal other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					MappingId = other.MappingId;
				}
				ShardId = other.ShardId;
				ShardMapId = other.ShardMapId;
				MinValue = other.MinValue;
				MaxValue = other.MaxValue;
				Status = other.Status;
				LockOwnerId = other.LockOwnerId;
				LastOperationId = other.LastOperationId;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			PartialValidate();
        }
	}

	[Table("ShardMapsLocal", Schema = "__ShardManagement")]
	public partial class ShardMapsLocal : IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<Guid>
	{
        public static readonly ShardMapsLocal[] None = new ShardMapsLocal[0];

		[InverseProperty("ShardMap")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<ShardsLocal> ShardMapShardsLocals { get; set; } = new List<ShardsLocal>();

		[InverseProperty("ShardMap")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<ShardMappingsLocal> ShardMapShardMappingsLocals { get; set; } = new List<ShardMappingsLocal>();

		object IPrimaryKey.Key { get { return ShardMapId; }}
	
		Guid IPrimaryKey<Guid>.Key { get { return ShardMapId; }}

		[DisplayName("Shard Map Id")]
		[Key]
		[Column("ShardMapId")]
		public Guid ShardMapId { get; set; }

		[DisplayName("Name")]
		[NotNull]
		[Required]
		[MaxLength(50)]
		[Column("Name")]
		public string Name { get; set; }

		[DisplayName("Map Type")]
		[Column("MapType")]
		public int MapType { get; set; }

		[DisplayName("Key Type")]
		[Column("KeyType")]
		public int KeyType { get; set; }

		[DisplayName("Last Operation Id")]
		[Column("LastOperationId")]
		public Guid LastOperationId { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} ShardMapId={ShardMapId} {extras}";
		}

		partial void OnConstructed();
	
		public ShardMapsLocal()
			: this(null)
		{}

		public ShardMapsLocal(ShardMapsLocal other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					ShardMapId = other.ShardMapId;
				}
				ShardMapShardsLocals = other.ShardMapShardsLocals;
				ShardMapShardMappingsLocals = other.ShardMapShardMappingsLocals;
				Name = other.Name;
				MapType = other.MapType;
				KeyType = other.KeyType;
				LastOperationId = other.LastOperationId;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(Name, nameof(Name));
			Requires.Text(Name, nameof(Name), true, 0, 50);
			PartialValidate();
        }
	}

	[Table("ShardsLocal", Schema = "__ShardManagement")]
	public partial class ShardsLocal : IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<Guid>
	{
        public static readonly ShardsLocal[] None = new ShardsLocal[0];

		[InverseProperty("Shard")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<ShardMappingsLocal> ShardShardMappingsLocals { get; set; } = new List<ShardMappingsLocal>();

		object IPrimaryKey.Key { get { return ShardId; }}
	
		Guid IPrimaryKey<Guid>.Key { get { return ShardId; }}

		[DisplayName("Shard Id")]
		[Key]
		[Column("ShardId")]
		public Guid ShardId { get; set; }

		[DisplayName("Version")]
		[Column("Version")]
		public Guid Version { get; set; }

		[DisplayName("Shard Map Id")]
		[Column("ShardMapId")]
		public Guid ShardMapId { get; set; }

		//LinksTo:__ShardManagement.ShardMapsLocal
		[ForeignKey("ShardMapId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public ShardMapsLocal ShardMap { get; set; }

		[DisplayName("Protocol")]
		[Column("Protocol")]
		public int Protocol { get; set; }

		[DisplayName("Server Name")]
		[NotNull]
		[Required]
		[MaxLength(128)]
		[Column("ServerName")]
		public string ServerName { get; set; }

		[DisplayName("Port")]
		[Column("Port")]
		public int Port { get; set; }

		[DisplayName("Database Name")]
		[NotNull]
		[Required]
		[MaxLength(128)]
		[Column("DatabaseName")]
		public string DatabaseName { get; set; }

		[DisplayName("Status")]
		[Column("Status")]
		public int Status { get; set; }

		[DisplayName("Last Operation Id")]
		[Column("LastOperationId")]
		public Guid LastOperationId { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} ShardId={ShardId} {extras}";
		}

		partial void OnConstructed();
	
		public ShardsLocal()
			: this(null)
		{}

		public ShardsLocal(ShardsLocal other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					ShardId = other.ShardId;
				}
				ShardShardMappingsLocals = other.ShardShardMappingsLocals;
				Version = other.Version;
				ShardMapId = other.ShardMapId;
				Protocol = other.Protocol;
				ServerName = other.ServerName;
				Port = other.Port;
				DatabaseName = other.DatabaseName;
				Status = other.Status;
				LastOperationId = other.LastOperationId;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(ServerName, nameof(ServerName));
			Requires.Text(ServerName, nameof(ServerName), true, 0, 128);
			Requires.NonNull(DatabaseName, nameof(DatabaseName));
			Requires.Text(DatabaseName, nameof(DatabaseName), true, 0, 128);
			PartialValidate();
        }
	}

	[Table("BerensonEggersTypeOfServices", Schema = "CmsGov")]
	public partial class BerensonEggersTypeOfService : IRdbDataEntity, IValidate, IPreSave
	{
        public static readonly BerensonEggersTypeOfService[] None = new BerensonEggersTypeOfService[0];

		[InverseProperty("CptBetos")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MedicalClaimLine> CptBetosMedicalClaimLines { get; set; } = new List<MedicalClaimLine>();

		[InverseProperty("HcpcsBetos")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MedicalClaimLine> HcpcsBetosMedicalClaimLines { get; set; } = new List<MedicalClaimLine>();

		[InverseProperty("RevBetos")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MedicalClaimLine> RevBetosMedicalClaimLines { get; set; } = new List<MedicalClaimLine>();

		[InverseProperty("DrgBetos")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MedicalClaimLine> DrgBetosMedicalClaimLines { get; set; } = new List<MedicalClaimLine>();

		[DisplayName("Betos Id")]
		[Key]
		[Column("BetosId")]
		public int BetosId { get; set; }

		[DisplayName("Betos Code")]
		[NotNull]
		[Required]
		[MaxLength(5)]
		[Column("BetosCode")]
		public string BetosCode { get; set; }

		[DisplayName("Category")]
		[NotNull]
		[Required]
		[MaxLength(50)]
		[Column("Category")]
		public string Category { get; set; }

		[DisplayName("Sub Category")]
		[NotNull]
		[Required]
		[MaxLength(200)]
		[Column("SubCategory")]
		public string SubCategory { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public BerensonEggersTypeOfService()
			: this(null)
		{}

		public BerensonEggersTypeOfService(BerensonEggersTypeOfService other, bool copyKey=false)
		{
			if (other!=null)
			{
				CptBetosMedicalClaimLines = other.CptBetosMedicalClaimLines;
				HcpcsBetosMedicalClaimLines = other.HcpcsBetosMedicalClaimLines;
				RevBetosMedicalClaimLines = other.RevBetosMedicalClaimLines;
				DrgBetosMedicalClaimLines = other.DrgBetosMedicalClaimLines;
				BetosId = other.BetosId;
				BetosCode = other.BetosCode;
				Category = other.Category;
				SubCategory = other.SubCategory;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(BetosCode, nameof(BetosCode));
			Requires.Text(BetosCode, nameof(BetosCode), true, 0, 5);
			Requires.NonNull(Category, nameof(Category));
			Requires.Text(Category, nameof(Category), true, 0, 50);
			Requires.NonNull(SubCategory, nameof(SubCategory));
			Requires.Text(SubCategory, nameof(SubCategory), true, 0, 200);
			PartialValidate();
        }
	}

	[Table("HealthcareCommonProcedureCodingSystemCodes", Schema = "CmsGov")]
	public partial class HealthcareCommonProcedureCodingSystemCode : IRdbDataEntity, IValidate, IPreSave
	{
        public static readonly HealthcareCommonProcedureCodingSystemCode[] None = new HealthcareCommonProcedureCodingSystemCode[0];

		[InverseProperty("ProcedureHcpcs")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MedicalClaimLine> ProcedureHcpcsMedicalClaimLines { get; set; } = new List<MedicalClaimLine>();

		[DisplayName("Hcpcs Id")]
		[Key]
		[Column("HcpcsId")]
		public int HcpcsId { get; set; }

		[DisplayName("Record Identification Code")]
		[Column("RecordIdentificationCode")]
		public char RecordIdentificationCode { get; set; }

		[DisplayName("Hcpcs Code")]
		[Column("HcpcsCode")]
		public char HcpcsCode { get; set; }

		[DisplayName("Sequence Number")]
		[Column("SequenceNumber")]
		public int SequenceNumber { get; set; }

		[DisplayName("Is Primary")]
		[Column("IsPrimary")]
		public bool IsPrimary { get; set; }

		[DisplayName("Short Description")]
		[MaxLength(255)]
		[Column("ShortDescription")]
		public string ShortDescription { get; set; }

		[DisplayName("Long Description")]
		[Column("LongDescription")]
		public string LongDescription { get; set; }

		[DisplayName("Pricing Indicator Code Id")]
		[Column("PricingIndicatorCodeId")]
		public int? PricingIndicatorCodeId { get; set; }

		//LinksTo:CmsGov.PricingIndicatorCodes
		[ForeignKey("PricingIndicatorCodeId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public PricingIndicatorCode PricingIndicatorCode { get; set; }

		[DisplayName("Mog Id")]
		[Column("MogId")]
		public int? MogId { get; set; }

		//LinksTo:CmsGov.MedicareOutpatientGroupsPaymentGroupCodes
		[ForeignKey("MogId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public MedicareOutpatientGroupsPaymentGroupCode Mog { get; set; }

		[DisplayName("Lab Certification Code Id")]
		[Column("LabCertificationCodeId")]
		public int? LabCertificationCodeId { get; set; }

		//LinksTo:CmsGov.LabCertificationCodes
		[ForeignKey("LabCertificationCodeId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public LabCertificationCode LabCertificationCode { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public HealthcareCommonProcedureCodingSystemCode()
			: this(null)
		{}

		public HealthcareCommonProcedureCodingSystemCode(HealthcareCommonProcedureCodingSystemCode other, bool copyKey=false)
		{
			if (other!=null)
			{
				ProcedureHcpcsMedicalClaimLines = other.ProcedureHcpcsMedicalClaimLines;
				HcpcsId = other.HcpcsId;
				RecordIdentificationCode = other.RecordIdentificationCode;
				HcpcsCode = other.HcpcsCode;
				SequenceNumber = other.SequenceNumber;
				IsPrimary = other.IsPrimary;
				ShortDescription = other.ShortDescription;
				LongDescription = other.LongDescription;
				PricingIndicatorCodeId = other.PricingIndicatorCodeId;
				MogId = other.MogId;
				LabCertificationCodeId = other.LabCertificationCodeId;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.Text(ShortDescription, nameof(ShortDescription), true, 0, 255);
			PartialValidate();
        }
	}

	[Table("HealthCareProviderTaxonomyCodeCrosswalk", Schema = "CmsGov")]
	public partial class HealthCareProviderTaxonomyCodeCrosswalk : IRdbDataEntity, IValidate, IPreSave
	{
        public static readonly HealthCareProviderTaxonomyCodeCrosswalk[] None = new HealthCareProviderTaxonomyCodeCrosswalk[0];

		[DisplayName("Health Care Provider Taxonomy Code Crosswalk Id")]
		[Key]
		[Column("HealthCareProviderTaxonomyCodeCrosswalkId")]
		public int HealthCareProviderTaxonomyCodeCrosswalkId { get; set; }

		[DisplayName("Medicare Specialty Code Id")]
		[Column("MedicareSpecialtyCodeId")]
		public int MedicareSpecialtyCodeId { get; set; }

		//LinksTo:CmsGov.MedicareSpecialtyCodes
		[ForeignKey("MedicareSpecialtyCodeId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public MedicareSpecialtyCode MedicareSpecialtyCode { get; set; }

		[DisplayName("Health Care Provider Taxonomy Code")]
		[Column("HealthCareProviderTaxonomyCode")]
		public char HealthCareProviderTaxonomyCode { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public HealthCareProviderTaxonomyCodeCrosswalk()
			: this(null)
		{}

		public HealthCareProviderTaxonomyCodeCrosswalk(HealthCareProviderTaxonomyCodeCrosswalk other, bool copyKey=false)
		{
			if (other!=null)
			{
				HealthCareProviderTaxonomyCodeCrosswalkId = other.HealthCareProviderTaxonomyCodeCrosswalkId;
				MedicareSpecialtyCodeId = other.MedicareSpecialtyCodeId;
				HealthCareProviderTaxonomyCode = other.HealthCareProviderTaxonomyCode;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			PartialValidate();
        }
	}

	[Table("LabCertificationCodes", Schema = "CmsGov")]
	public partial class LabCertificationCode : IRdbDataEntity, IValidate, IPreSave
	{
        public static readonly LabCertificationCode[] None = new LabCertificationCode[0];

		[InverseProperty("LabCertificationCode")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<HealthcareCommonProcedureCodingSystemCode> LabCertificationCodeHealthcareCommonProcedureCodingSystemCodes { get; set; } = new List<HealthcareCommonProcedureCodingSystemCode>();

		[DisplayName("Lab Certification Code Id")]
		[Key]
		[Column("LabCertificationCodeId")]
		public int LabCertificationCodeId { get; set; }

		[DisplayName("Parent Lab Certification Code Id")]
		[Column("ParentLabCertificationCodeId")]
		public int? ParentLabCertificationCodeId { get; set; }

		[DisplayName("Lab Certification Code Property")]
		[Column("LabCertificationCode")]
		public char LabCertificationCodeProperty { get; set; }

		[DisplayName("Specialty Certification Category")]
		[NotNull]
		[Required]
		[MaxLength(100)]
		[Column("SpecialtyCertificationCategory")]
		public string SpecialtyCertificationCategory { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public LabCertificationCode()
			: this(null)
		{}

		public LabCertificationCode(LabCertificationCode other, bool copyKey=false)
		{
			if (other!=null)
			{
				LabCertificationCodeHealthcareCommonProcedureCodingSystemCodes = other.LabCertificationCodeHealthcareCommonProcedureCodingSystemCodes;
				LabCertificationCodeId = other.LabCertificationCodeId;
				ParentLabCertificationCodeId = other.ParentLabCertificationCodeId;
				LabCertificationCodeProperty = other.LabCertificationCodeProperty;
				SpecialtyCertificationCategory = other.SpecialtyCertificationCategory;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(SpecialtyCertificationCategory, nameof(SpecialtyCertificationCategory));
			Requires.Text(SpecialtyCertificationCategory, nameof(SpecialtyCertificationCategory), true, 0, 100);
			PartialValidate();
        }
	}

	[Table("MedicareOutpatientGroupsPaymentGroupCodes", Schema = "CmsGov")]
	public partial class MedicareOutpatientGroupsPaymentGroupCode : IRdbDataEntity, IValidate, IPreSave
	{
        public static readonly MedicareOutpatientGroupsPaymentGroupCode[] None = new MedicareOutpatientGroupsPaymentGroupCode[0];

		[InverseProperty("Mog")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<HealthcareCommonProcedureCodingSystemCode> MogHealthcareCommonProcedureCodingSystemCodes { get; set; } = new List<HealthcareCommonProcedureCodingSystemCode>();

		[DisplayName("Mog Id")]
		[Key]
		[Column("MogId")]
		public int MogId { get; set; }

		[DisplayName("Mog Code")]
		[Column("MogCode")]
		public char MogCode { get; set; }

		[DisplayName("Mog Category")]
		[MaxLength(100)]
		[Column("MogCategory")]
		public string MogCategory { get; set; }

		[DisplayName("Mog Title")]
		[NotNull]
		[Required]
		[MaxLength(100)]
		[Column("MogTitle")]
		public string MogTitle { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public MedicareOutpatientGroupsPaymentGroupCode()
			: this(null)
		{}

		public MedicareOutpatientGroupsPaymentGroupCode(MedicareOutpatientGroupsPaymentGroupCode other, bool copyKey=false)
		{
			if (other!=null)
			{
				MogHealthcareCommonProcedureCodingSystemCodes = other.MogHealthcareCommonProcedureCodingSystemCodes;
				MogId = other.MogId;
				MogCode = other.MogCode;
				MogCategory = other.MogCategory;
				MogTitle = other.MogTitle;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.Text(MogCategory, nameof(MogCategory), true, 0, 100);
			Requires.NonNull(MogTitle, nameof(MogTitle));
			Requires.Text(MogTitle, nameof(MogTitle), true, 0, 100);
			PartialValidate();
        }
	}

	[Table("MedicareSpecialtyCodes", Schema = "CmsGov")]
	public partial class MedicareSpecialtyCode : IRdbDataEntity, IValidate, IPreSave, IDontCreate
	{
        public static readonly MedicareSpecialtyCode[] None = new MedicareSpecialtyCode[0];

		[InverseProperty("MedicareSpecialtyCode")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<HealthCareProviderTaxonomyCodeCrosswalk> MedicareSpecialtyCodeHealthCareProviderTaxonomyCodeCrosswalks { get; set; } = new List<HealthCareProviderTaxonomyCodeCrosswalk>();

		[DisplayName("Medicare Specialty Code Id")]
		[Key]
		[Column("MedicareSpecialtyCodeId")]
		public int MedicareSpecialtyCodeId { get; set; }

		[DisplayName("Medicare Specialty Code Property")]
		[Column("MedicareSpecialtyCode")]
		public char MedicareSpecialtyCodeProperty { get; set; }

		[DisplayName("Medicare Specialty Supplier Type Description")]
		[MaxLength(100)]
		[Column("MedicareSpecialtySupplierTypeDescription")]
		public string MedicareSpecialtySupplierTypeDescription { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public MedicareSpecialtyCode()
			: this(null)
		{}

		public MedicareSpecialtyCode(MedicareSpecialtyCode other, bool copyKey=false)
		{
			if (other!=null)
			{
				MedicareSpecialtyCodeHealthCareProviderTaxonomyCodeCrosswalks = other.MedicareSpecialtyCodeHealthCareProviderTaxonomyCodeCrosswalks;
				MedicareSpecialtyCodeId = other.MedicareSpecialtyCodeId;
				MedicareSpecialtyCodeProperty = other.MedicareSpecialtyCodeProperty;
				MedicareSpecialtySupplierTypeDescription = other.MedicareSpecialtySupplierTypeDescription;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.Text(MedicareSpecialtySupplierTypeDescription, nameof(MedicareSpecialtySupplierTypeDescription), true, 0, 100);
			PartialValidate();
        }
	}

	[Table("PricingIndicatorCodes", Schema = "CmsGov")]
	public partial class PricingIndicatorCode : IRdbDataEntity, IValidate, IPreSave
	{
        public static readonly PricingIndicatorCode[] None = new PricingIndicatorCode[0];

		[InverseProperty("PricingIndicatorCode")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<HealthcareCommonProcedureCodingSystemCode> PricingIndicatorCodeHealthcareCommonProcedureCodingSystemCodes { get; set; } = new List<HealthcareCommonProcedureCodingSystemCode>();

		[DisplayName("Pricing Indicator Code Id")]
		[Key]
		[Column("PricingIndicatorCodeId")]
		public int PricingIndicatorCodeId { get; set; }

		[DisplayName("Pricing Indicator Code Property")]
		[Column("PricingIndicatorCode")]
		public char PricingIndicatorCodeProperty { get; set; }

		[DisplayName("Header")]
		[MaxLength(100)]
		[Column("Header")]
		public string Header { get; set; }

		[DisplayName("Description")]
		[MaxLength(255)]
		[Column("Description")]
		public string Description { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public PricingIndicatorCode()
			: this(null)
		{}

		public PricingIndicatorCode(PricingIndicatorCode other, bool copyKey=false)
		{
			if (other!=null)
			{
				PricingIndicatorCodeHealthcareCommonProcedureCodingSystemCodes = other.PricingIndicatorCodeHealthcareCommonProcedureCodingSystemCodes;
				PricingIndicatorCodeId = other.PricingIndicatorCodeId;
				PricingIndicatorCodeProperty = other.PricingIndicatorCodeProperty;
				Header = other.Header;
				Description = other.Description;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.Text(Header, nameof(Header), true, 0, 100);
			Requires.Text(Description, nameof(Description), true, 0, 255);
			PartialValidate();
        }
	}

	[Table("SchemaTables", Schema = "db")]
	public partial class SchemaTable : IRdbDataEntity, IValidate, IPreSave
	{
        public static readonly SchemaTable[] None = new SchemaTable[0];

		[DisplayName("Object Id")]
		[Key]
		[Column("ObjectId")]
		public int ObjectId { get; set; }

		[DisplayName("Schema Name")]
		[NotNull]
		[Required]
		[MaxLength(128)]
		[Column("SchemaName")]
		public string SchemaName { get; set; }

		[DisplayName("Table Name")]
		[NotNull]
		[Required]
		[MaxLength(128)]
		[Column("TableName")]
		public string TableName { get; set; }

		[DisplayName("Table Type")]
		[NotNull]
		[Required]
		[MaxLength(10)]
		[Column("TableType")]
		public string TableType { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public SchemaTable()
			: this(null)
		{}

		public SchemaTable(SchemaTable other, bool copyKey=false)
		{
			if (other!=null)
			{
				ObjectId = other.ObjectId;
				SchemaName = other.SchemaName;
				TableName = other.TableName;
				TableType = other.TableType;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(SchemaName, nameof(SchemaName));
			Requires.Text(SchemaName, nameof(SchemaName), true, 0, 128);
			Requires.NonNull(TableName, nameof(TableName));
			Requires.Text(TableName, nameof(TableName), true, 0, 128);
			Requires.NonNull(TableType, nameof(TableType));
			Requires.Text(TableType, nameof(TableType), true, 0, 10);
			PartialValidate();
        }
	}

	[Table("Addresses", Schema = "dbo")]
	public partial class Address : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted, IPrimaryKey<int>
	{
        public static readonly Address[] None = new Address[0];

		[InverseProperty("CleanAddress")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Address> CleanAddressAddresss { get; set; } = new List<Address>();

		[InverseProperty("MemberAddress")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Eligibility> MemberAddressEligibilitys { get; set; } = new List<Eligibility>();

		object IPrimaryKey.Key { get { return AddressId; }}
	
		int IPrimaryKey<int>.Key { get { return AddressId; }}

		[DisplayName("Address Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("AddressId")]
		public int AddressId { get; set; }

		/// <summary>
		/// Foreign key to the tenant that owns this account
		/// </summary>
		[Description("Foreign key to the tenant that owns this account")]
		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		//LinksTo:dbo.Tenants
		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Address Line1")]
		[MaxLength(255)]
		[Column("AddressLine1")]
		public string AddressLine1 { get; set; }

		[DisplayName("Address Line2")]
		[MaxLength(255)]
		[Column("AddressLine2")]
		public string AddressLine2 { get; set; }

		[DisplayName("City")]
		[MaxLength(100)]
		[Column("City")]
		public string City { get; set; }

		[DisplayName("State")]
		[MaxLength(100)]
		[Column("State")]
		public string State { get; set; }

		[DisplayName("Postal Code")]
		[MaxLength(50)]
		[Column("PostalCode")]
		public string PostalCode { get; set; }

		[DisplayName("Country Id")]
		[Column("CountryId")]
		public int? CountryId { get; set; }

		[DisplayName("Clean Address Id")]
		[Column("CleanAddressId")]
		public int? CleanAddressId { get; set; }

		//LinksTo:dbo.Addresses
		[ForeignKey("CleanAddressId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Address CleanAddress { get; set; }

		[DisplayName("Is Clean")]
		[Column("IsClean")]
		public bool IsClean { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} AddressId={AddressId} {extras}";
		}

		partial void OnConstructed();
	
		public Address()
			: this(null)
		{}

		public Address(Address other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					AddressId = other.AddressId;
				}
				CleanAddressAddresss = other.CleanAddressAddresss;
				MemberAddressEligibilitys = other.MemberAddressEligibilitys;
				TenantId = other.TenantId;
				AddressLine1 = other.AddressLine1;
				AddressLine2 = other.AddressLine2;
				City = other.City;
				State = other.State;
				PostalCode = other.PostalCode;
				CountryId = other.CountryId;
				CleanAddressId = other.CleanAddressId;
				IsClean = other.IsClean;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.Text(AddressLine1, nameof(AddressLine1), true, 0, 255);
			Requires.Text(AddressLine2, nameof(AddressLine2), true, 0, 255);
			Requires.Text(City, nameof(City), true, 0, 100);
			Requires.Text(State, nameof(State), true, 0, 100);
			Requires.Text(PostalCode, nameof(PostalCode), true, 0, 50);
			PartialValidate();
        }
	}

	/// <summary>
	/// Type of application that runs this system
	/// </summary>
	[Table("Apps", Schema = "dbo")]
	public partial class App : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted, IPrimaryKey<int>
	{
        public static readonly App[] None = new App[0];

		object IPrimaryKey.Key { get { return AppId; }}
	
		int IPrimaryKey<int>.Key { get { return AppId; }}

		/// <summary>
		/// Primary key
		/// </summary>
		[Description("Primary key")]
		[DisplayName("App Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("AppId")]
		public int AppId { get; set; }

		/// <summary>
		/// Foreign key to the tenant that owns this account
		/// </summary>
		[Description("Foreign key to the tenant that owns this account")]
		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		//LinksTo:dbo.Tenants
		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		/// <summary>
		/// Type of application
		/// </summary>
		[Description("Type of application")]
		[DisplayName("App Type")]
		[NotMapped]
		public AppTypes AppType
        {
            get
            {
                AppTypes e;
                if (Enum.TryParse(AppTypeStringValue, true, out e)) return e;
                return 0;
            }
            set { AppTypeStringValue = value.ToString(); }
        }

		[NotNull]
		[Required]
		[MaxLength(80)]
		[Column("AppType")]
		public string AppTypeStringValue { get; set; }

		/// <summary>
		/// Human readible name of the application
		/// </summary>
		[Description("Human readible name of the application")]
		[DisplayName("App Name")]
		[NotNull]
		[Required]
		[MaxLength(255)]
		[Column("AppName")]
		public string AppName { get; set; }

		/// <summary>
		/// Settings particular to this type of application
		/// </summary>
		[Description("Settings particular to this type of application")]
		[DisplayName("App Settings")]
		partial void OnAppSettingsDeserialized();

        [NotMapped]
        public Bal.Settings.ApplicationSettings AppSettings
        {
            get
            {
                if (AppSettings_p == null)
                {
                    AppSettings_p = Bal.Settings.ApplicationSettings.CreateFromJson(AppSettingsJson) ?? new Bal.Settings.ApplicationSettings();
					OnAppSettingsDeserialized();
                }
                return AppSettings_p;
            }
            set { AppSettings_p = value; }
        }
        private Bal.Settings.ApplicationSettings AppSettings_p;

		[Column("AppSettings")]
		public string AppSettingsJson { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} AppId={AppId} {extras}";
		}

		partial void OnConstructed();
	
		public App()
			: this(null)
		{}

		public App(App other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					AppId = other.AppId;
				}
				TenantId = other.TenantId;
				AppTypeStringValue = other.AppTypeStringValue;
				AppName = other.AppName;
				AppSettingsJson = other.AppSettingsJson;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
            if (AppSettings_p != null)
            {
				var json = AppSettings_p.ToJson();
				if (AppSettingsJson != json)
				{
					AppSettingsJson = json;
				}				 
            }
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(AppTypeStringValue, nameof(AppTypeStringValue));
			Requires.Text(AppTypeStringValue, nameof(AppTypeStringValue), true, 0, 80);
			Requires.NonNull(AppName, nameof(AppName));
			Requires.Text(AppName, nameof(AppName), true, 0, 255);
			PartialValidate();
        }
	}

	/// <summary>
	/// An instance of a communication.
	/// </summary>
	[Table("CommunicationBlasts", Schema = "dbo")]
	public partial class CommunicationBlast : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted, IPrimaryKey<int>
	{
        public static readonly CommunicationBlast[] None = new CommunicationBlast[0];

		[InverseProperty("CommunicationBlast")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<CommunicationBlastTracker> CommunicationBlastCommunicationBlastTrackers { get; set; } = new List<CommunicationBlastTracker>();

		[InverseProperty("CommunicationBlast")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<CommunicationPiece> CommunicationBlastCommunicationPieces { get; set; } = new List<CommunicationPiece>();

		object IPrimaryKey.Key { get { return CommunicationBlastId; }}
	
		int IPrimaryKey<int>.Key { get { return CommunicationBlastId; }}

		[DisplayName("Communication Blast Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("CommunicationBlastId")]
		public int CommunicationBlastId { get; set; }

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		//LinksTo:dbo.Tenants
		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Communication Id")]
		[Column("CommunicationId")]
		public int CommunicationId { get; set; }

		//LinksTo:dbo.Communications
		[ForeignKey("CommunicationId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Communication Communication { get; set; }

		[DisplayName("Creative Id")]
		[Column("CreativeId")]
		public int? CreativeId { get; set; }

		//LinksTo:dbo.Creatives
		[ForeignKey("CreativeId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Creative Creative { get; set; }

		[DisplayName("Job Id")]
		[Column("JobId")]
		public int? JobId { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} CommunicationBlastId={CommunicationBlastId} {extras}";
		}

		partial void OnConstructed();
	
		public CommunicationBlast()
			: this(null)
		{}

		public CommunicationBlast(CommunicationBlast other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					CommunicationBlastId = other.CommunicationBlastId;
				}
				CommunicationBlastCommunicationBlastTrackers = other.CommunicationBlastCommunicationBlastTrackers;
				CommunicationBlastCommunicationPieces = other.CommunicationBlastCommunicationPieces;
				TenantId = other.TenantId;
				CommunicationId = other.CommunicationId;
				CreativeId = other.CreativeId;
				JobId = other.JobId;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			PartialValidate();
        }
	}

	/// <summary>
	/// Assets referenced by a creative whose hyperlinks have been munged to support tracking
	/// </summary>
	[Table("CommunicationBlastTrackers", Schema = "dbo")]
	public partial class CommunicationBlastTracker : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted, IPrimaryKey<int>
	{
        public static readonly CommunicationBlastTracker[] None = new CommunicationBlastTracker[0];

		[InverseProperty("CommunicationBlastTracker")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<CommunicationPieceVisit> CommunicationBlastTrackerCommunicationPieceVisits { get; set; } = new List<CommunicationPieceVisit>();

		object IPrimaryKey.Key { get { return CommunicationBlastTrackerId; }}
	
		int IPrimaryKey<int>.Key { get { return CommunicationBlastTrackerId; }}

		[DisplayName("Communication Blast Tracker Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("CommunicationBlastTrackerId")]
		public int CommunicationBlastTrackerId { get; set; }

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		//LinksTo:dbo.Tenants
		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Communication Blast Id")]
		[Column("CommunicationBlastId")]
		public int CommunicationBlastId { get; set; }

		//LinksTo:dbo.CommunicationBlasts
		[ForeignKey("CommunicationBlastId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public CommunicationBlast CommunicationBlast { get; set; }

		[DisplayName("Link Type")]
		[NotMapped]
		public CommunicationBlastTrackerLinkTypes LinkType
        {
            get
            {
                CommunicationBlastTrackerLinkTypes e;
                if (Enum.TryParse(LinkTypeStringValue, true, out e)) return e;
                return 0;
            }
            set { LinkTypeStringValue = value.ToString(); }
        }

		[NotNull]
		[Required]
		[MaxLength(80)]
		[Column("LinkType")]
		public string LinkTypeStringValue { get; set; }

		[DisplayName("Communication Type")]
		[NotMapped]
		public Traffk.Bal.Communications.CommunicationTypes CommunicationType
        {
            get
            {
                Traffk.Bal.Communications.CommunicationTypes e;
                if (Enum.TryParse(CommunicationTypeStringValue, true, out e)) return e;
                return 0;
            }
            set { CommunicationTypeStringValue = value.ToString(); }
        }

		[NotNull]
		[Required]
		[MaxLength(80)]
		[Column("CommunicationType")]
		public string CommunicationTypeStringValue { get; set; }

		/// <summary>
		/// Non-guessable guid for this item
		/// </summary>
		[Description("Non-guessable guid for this item")]
		[DisplayName("Tracker Uid")]
		[Column("TrackerUid")]
		public Guid TrackerUid { get; set; }

		[DisplayName("Redirect Url")]
		[NotNull]
		[Required]
		[MaxLength(1024)]
		[Column("RedirectUrl")]
		public string RedirectUrl { get; set; }

		[DisplayName("Position")]
		[Column("Position")]
		public int Position { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} CommunicationBlastTrackerId={CommunicationBlastTrackerId} {extras}";
		}

		partial void OnConstructed();
	
		public CommunicationBlastTracker()
			: this(null)
		{}

		public CommunicationBlastTracker(CommunicationBlastTracker other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					CommunicationBlastTrackerId = other.CommunicationBlastTrackerId;
				}
				CommunicationBlastTrackerCommunicationPieceVisits = other.CommunicationBlastTrackerCommunicationPieceVisits;
				TenantId = other.TenantId;
				CommunicationBlastId = other.CommunicationBlastId;
				LinkTypeStringValue = other.LinkTypeStringValue;
				CommunicationTypeStringValue = other.CommunicationTypeStringValue;
				TrackerUid = other.TrackerUid;
				RedirectUrl = other.RedirectUrl;
				Position = other.Position;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(LinkTypeStringValue, nameof(LinkTypeStringValue));
			Requires.Text(LinkTypeStringValue, nameof(LinkTypeStringValue), true, 0, 80);
			Requires.NonNull(CommunicationTypeStringValue, nameof(CommunicationTypeStringValue));
			Requires.Text(CommunicationTypeStringValue, nameof(CommunicationTypeStringValue), true, 0, 80);
			Requires.NonNull(RedirectUrl, nameof(RedirectUrl));
			Requires.Text(RedirectUrl, nameof(RedirectUrl), true, 0, 1024);
			PartialValidate();
        }
	}

	[Table("CommunicationHistory", Schema = "dbo")]
	public partial class CommunicationHistory : IRdbDataEntity, IValidate, IPreSave
	{
        public static readonly CommunicationHistory[] None = new CommunicationHistory[0];

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		[DisplayName("Contact Id")]
		[Column("ContactId")]
		public int? ContactId { get; set; }

		[DisplayName("Communication Piece Id")]
		[Key]
		[Column("CommunicationPieceId")]
		public long CommunicationPieceId { get; set; }

		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("First Visit At Utc")]
		[Column("FirstVisitAtUtc")]
		public DateTime? FirstVisitAtUtc { get; set; }

		[DisplayName("First Visit At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime? FirstVisitAt => FirstVisitAtUtc?.ToLocalTime();

		[DisplayName("Communication Id")]
		[Column("CommunicationId")]
		public int CommunicationId { get; set; }

		[DisplayName("Communication Title")]
		[MaxLength(255)]
		[Column("CommunicationTitle")]
		public string CommunicationTitle { get; set; }

		[DisplayName("Topic Name")]
		[MaxLength(255)]
		[Column("TopicName")]
		public string TopicName { get; set; }

		[DisplayName("Campaign Name")]
		[MaxLength(255)]
		[Column("CampaignName")]
		public string CampaignName { get; set; }

		[DisplayName("Creative Id")]
		[Column("CreativeId")]
		public int CreativeId { get; set; }

		[DisplayName("Creative Title")]
		[MaxLength(255)]
		[Column("CreativeTitle")]
		public string CreativeTitle { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public CommunicationHistory()
			: this(null)
		{}

		public CommunicationHistory(CommunicationHistory other, bool copyKey=false)
		{
			if (other!=null)
			{
				TenantId = other.TenantId;
				ContactId = other.ContactId;
				CommunicationPieceId = other.CommunicationPieceId;
				FirstVisitAtUtc = other.FirstVisitAtUtc;
				CommunicationId = other.CommunicationId;
				CommunicationTitle = other.CommunicationTitle;
				TopicName = other.TopicName;
				CampaignName = other.CampaignName;
				CreativeId = other.CreativeId;
				CreativeTitle = other.CreativeTitle;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.Text(CommunicationTitle, nameof(CommunicationTitle), true, 0, 255);
			Requires.Text(TopicName, nameof(TopicName), true, 0, 255);
			Requires.Text(CampaignName, nameof(CampaignName), true, 0, 255);
			Requires.Text(CreativeTitle, nameof(CreativeTitle), true, 0, 255);
			PartialValidate();
        }
	}

	/// <summary>
	/// Instance of a communication piece that has been queued for delivery
	/// </summary>
	[Table("CommunicationPieces", Schema = "dbo")]
	public partial class CommunicationPiece : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted, IPrimaryKey<long>
	{
        public static readonly CommunicationPiece[] None = new CommunicationPiece[0];

		[InverseProperty("CommunicationPiece")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<CommunicationPieceVisit> CommunicationPieceCommunicationPieceVisits { get; set; } = new List<CommunicationPieceVisit>();

		object IPrimaryKey.Key { get { return CommunicationPieceId; }}
	
		long IPrimaryKey<long>.Key { get { return CommunicationPieceId; }}

		[DisplayName("Communication Piece Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("CommunicationPieceId")]
		public long CommunicationPieceId { get; set; }

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		//LinksTo:dbo.Tenants
		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		/// <summary>
		/// Non-guessable guid for this item
		/// </summary>
		[Description("Non-guessable guid for this item")]
		[DisplayName("Communication Piece Uid")]
		[Column("CommunicationPieceUid")]
		public Guid CommunicationPieceUid { get; set; }

		[DisplayName("Communication Blast Id")]
		[Column("CommunicationBlastId")]
		public int CommunicationBlastId { get; set; }

		//LinksTo:dbo.CommunicationBlasts
		[ForeignKey("CommunicationBlastId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public CommunicationBlast CommunicationBlast { get; set; }

		[DisplayName("Contact Id")]
		[Column("ContactId")]
		public int? ContactId { get; set; }

		//LinksTo:dbo.Contacts
		[ForeignKey("ContactId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Contact Contact { get; set; }

		[DisplayName("Data")]
		partial void OnDataDeserialized();

        [NotMapped]
        public Bal.Settings.CommunicationPieceData Data
        {
            get
            {
                if (Data_p == null)
                {
                    Data_p = Bal.Settings.CommunicationPieceData.CreateFromJson(DataJson) ?? new Bal.Settings.CommunicationPieceData();
					OnDataDeserialized();
                }
                return Data_p;
            }
            set { Data_p = value; }
        }
        private Bal.Settings.CommunicationPieceData Data_p;

		[Column("Data")]
		public string DataJson { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} CommunicationPieceId={CommunicationPieceId} {extras}";
		}

		partial void OnConstructed();
	
		public CommunicationPiece()
			: this(null)
		{}

		public CommunicationPiece(CommunicationPiece other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					CommunicationPieceId = other.CommunicationPieceId;
				}
				CommunicationPieceCommunicationPieceVisits = other.CommunicationPieceCommunicationPieceVisits;
				TenantId = other.TenantId;
				CommunicationPieceUid = other.CommunicationPieceUid;
				CommunicationBlastId = other.CommunicationBlastId;
				ContactId = other.ContactId;
				DataJson = other.DataJson;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
            if (Data_p != null)
            {
				var json = Data_p.ToJson();
				if (DataJson != json)
				{
					DataJson = json;
				}				 
            }
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			PartialValidate();
        }
	}

	/// <summary>
	/// Record that a creator tracker has been seen relative to communication piece
	/// </summary>
	[Table("CommunicationPieceVisits", Schema = "dbo")]
	public partial class CommunicationPieceVisit : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted, IPrimaryKey<long>
	{
        public static readonly CommunicationPieceVisit[] None = new CommunicationPieceVisit[0];

		object IPrimaryKey.Key { get { return CommunicationPieceVisitId; }}
	
		long IPrimaryKey<long>.Key { get { return CommunicationPieceVisitId; }}

		[DisplayName("Communication Piece Visit Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("CommunicationPieceVisitId")]
		public long CommunicationPieceVisitId { get; set; }

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		//LinksTo:dbo.Tenants
		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Communication Piece Id")]
		[Column("CommunicationPieceId")]
		public long CommunicationPieceId { get; set; }

		//LinksTo:dbo.CommunicationPieces
		[ForeignKey("CommunicationPieceId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public CommunicationPiece CommunicationPiece { get; set; }

		[DisplayName("Communication Blast Tracker Id")]
		[Column("CommunicationBlastTrackerId")]
		public int CommunicationBlastTrackerId { get; set; }

		//LinksTo:dbo.CommunicationBlastTrackers
		[ForeignKey("CommunicationBlastTrackerId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public CommunicationBlastTracker CommunicationBlastTracker { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} CommunicationPieceVisitId={CommunicationPieceVisitId} {extras}";
		}

		partial void OnConstructed();
	
		public CommunicationPieceVisit()
			: this(null)
		{}

		public CommunicationPieceVisit(CommunicationPieceVisit other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					CommunicationPieceVisitId = other.CommunicationPieceVisitId;
				}
				TenantId = other.TenantId;
				CommunicationPieceId = other.CommunicationPieceId;
				CommunicationBlastTrackerId = other.CommunicationBlastTrackerId;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			PartialValidate();
        }
	}

	/// <summary>
	/// A communication outreach piece.
	/// </summary>
	[Table("Communications", Schema = "dbo")]
	public partial class Communication : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted, IPrimaryKey<int>
	{
        public static readonly Communication[] None = new Communication[0];

		[InverseProperty("Communication")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<CommunicationBlast> CommunicationCommunicationBlasts { get; set; } = new List<CommunicationBlast>();

		object IPrimaryKey.Key { get { return CommunicationId; }}
	
		int IPrimaryKey<int>.Key { get { return CommunicationId; }}

		[DisplayName("Communication Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("CommunicationId")]
		public int CommunicationId { get; set; }

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		//LinksTo:dbo.Tenants
		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Communication Title")]
		[MaxLength(255)]
		[Column("CommunicationTitle")]
		public string CommunicationTitle { get; set; }

		[DisplayName("Topic Name")]
		[MaxLength(255)]
		[Column("TopicName")]
		public string TopicName { get; set; }

		[DisplayName("Campaign Name")]
		[MaxLength(255)]
		[Column("CampaignName")]
		public string CampaignName { get; set; }

		[DisplayName("Creative Id")]
		[Column("CreativeId")]
		public int? CreativeId { get; set; }

		//LinksTo:dbo.Creatives
		[ForeignKey("CreativeId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Creative Creative { get; set; }

		[DisplayName("Communication Settings")]
		partial void OnCommunicationSettingsDeserialized();

        [NotMapped]
        public Traffk.Bal.Settings.CommunicationSettings CommunicationSettings
        {
            get
            {
                if (CommunicationSettings_p == null)
                {
                    CommunicationSettings_p = Traffk.Bal.Settings.CommunicationSettings.CreateFromJson(CommunicationSettingsJson) ?? new Traffk.Bal.Settings.CommunicationSettings();
					OnCommunicationSettingsDeserialized();
                }
                return CommunicationSettings_p;
            }
            set { CommunicationSettings_p = value; }
        }
        private Traffk.Bal.Settings.CommunicationSettings CommunicationSettings_p;

		[Column("CommunicationSettings")]
		public string CommunicationSettingsJson { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} CommunicationId={CommunicationId} {extras}";
		}

		partial void OnConstructed();
	
		public Communication()
			: this(null)
		{}

		public Communication(Communication other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					CommunicationId = other.CommunicationId;
				}
				CommunicationCommunicationBlasts = other.CommunicationCommunicationBlasts;
				TenantId = other.TenantId;
				CommunicationTitle = other.CommunicationTitle;
				TopicName = other.TopicName;
				CampaignName = other.CampaignName;
				CreativeId = other.CreativeId;
				CommunicationSettingsJson = other.CommunicationSettingsJson;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
            if (CommunicationSettings_p != null)
            {
				var json = CommunicationSettings_p.ToJson();
				if (CommunicationSettingsJson != json)
				{
					CommunicationSettingsJson = json;
				}				 
            }
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.Text(CommunicationTitle, nameof(CommunicationTitle), true, 0, 255);
			Requires.Text(TopicName, nameof(TopicName), true, 0, 255);
			Requires.Text(CampaignName, nameof(CampaignName), true, 0, 255);
			PartialValidate();
        }
	}

	[Table("Contacts", Schema = "dbo")]
	public abstract partial class Contact : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted, IPrimaryKey<int>
	{
        public static readonly Contact[] None = new Contact[0];

		//skipped: dbo.AspNetUsers

		[InverseProperty("Contact")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MillimanScore> ContactMillimanScores { get; set; } = new List<MillimanScore>();

		[InverseProperty("Contact")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Visit> ContactVisits { get; set; } = new List<Visit>();

		[InverseProperty("Contact")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<CommunicationPiece> ContactCommunicationPieces { get; set; } = new List<CommunicationPiece>();

		[InverseProperty("Contact")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Pharmacy> ContactPharmacys { get; set; } = new List<Pharmacy>();

		[InverseProperty("PrescriberProviderContact")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Pharmacy> PrescriberProviderContactPharmacys { get; set; } = new List<Pharmacy>();

		[InverseProperty("CreatedByContact")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Note> CreatedByContactNotes { get; set; } = new List<Note>();

		[InverseProperty("Contact")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MedicalClaim> ContactMedicalClaims { get; set; } = new List<MedicalClaim>();

		[InverseProperty("Contact")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MedicalClaimLine> ContactMedicalClaimLines { get; set; } = new List<MedicalClaimLine>();

		[InverseProperty("Contact")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<CareAlert> ContactCareAlerts { get; set; } = new List<CareAlert>();

		[InverseProperty("PersonContact")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Member> PersonContactMembers { get; set; } = new List<Member>();

		[InverseProperty("Contact")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<QualityMetric> ContactQualityMetrics { get; set; } = new List<QualityMetric>();

		[InverseProperty("CarrierContact")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Member> CarrierContactMembers { get; set; } = new List<Member>();

		[InverseProperty("Contact")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Participation> ContactParticipations { get; set; } = new List<Participation>();

		[InverseProperty("Contact")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Eligibility> ContactEligibilitys { get; set; } = new List<Eligibility>();

		object IPrimaryKey.Key { get { return ContactId; }}
	
		int IPrimaryKey<int>.Key { get { return ContactId; }}

		[DisplayName("Contact Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("ContactId")]
		public int ContactId { get; set; }

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		//LinksTo:dbo.Tenants
		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Contact Type")]
		[NotMapped]
		public ContactTypes ContactType
        {
            get
            {
                ContactTypes e;
                if (Enum.TryParse(ContactTypeStringValue, true, out e)) return e;
                return 0;
            }
            set { ContactTypeStringValue = value.ToString(); }
        }

		[NotNull]
		[Required]
		[MaxLength(80)]
		[Column("ContactType")]
		public string ContactTypeStringValue { get; set; }

		/// <summary>
		/// Datetime when this entity was created.
		/// </summary>
		[Description("Datetime when this entity was created.")]
		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Full Name")]
		[MaxLength(255)]
		[Column("FullName")]
		public string FullName { get; set; }

		[DisplayName("Primary Email")]
		[EmailAddress]
		[MaxLength(254)]
		[Column("PrimaryEmail")]
		public string PrimaryEmail { get; set; }

		[DisplayName("Contact Details")]
		partial void OnContactDetailsDeserialized();

        [NotMapped]
        public Contact.ContactDetails_ ContactDetails
        {
            get
            {
                if (ContactDetails_p == null)
                {
                    ContactDetails_p = Contact.ContactDetails_.CreateFromJson(ContactDetailsJson) ?? new Contact.ContactDetails_();
					OnContactDetailsDeserialized();
                }
                return ContactDetails_p;
            }
            set { ContactDetails_p = value; }
        }
        private Contact.ContactDetails_ ContactDetails_p;

		[Column("ContactDetails")]
		public string ContactDetailsJson { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} ContactId={ContactId} {extras}";
		}

		partial void OnConstructed();
	
		public Contact()
			: this(null)
		{}

		public Contact(Contact other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					ContactId = other.ContactId;
				}
				ContactMillimanScores = other.ContactMillimanScores;
				ContactVisits = other.ContactVisits;
				ContactCommunicationPieces = other.ContactCommunicationPieces;
				ContactPharmacys = other.ContactPharmacys;
				PrescriberProviderContactPharmacys = other.PrescriberProviderContactPharmacys;
				CreatedByContactNotes = other.CreatedByContactNotes;
				ContactMedicalClaims = other.ContactMedicalClaims;
				ContactMedicalClaimLines = other.ContactMedicalClaimLines;
				ContactCareAlerts = other.ContactCareAlerts;
				PersonContactMembers = other.PersonContactMembers;
				ContactQualityMetrics = other.ContactQualityMetrics;
				CarrierContactMembers = other.CarrierContactMembers;
				ContactParticipations = other.ContactParticipations;
				ContactEligibilitys = other.ContactEligibilitys;
				TenantId = other.TenantId;
				ContactTypeStringValue = other.ContactTypeStringValue;
				FullName = other.FullName;
				PrimaryEmail = other.PrimaryEmail;
				ContactDetailsJson = other.ContactDetailsJson;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
            if (ContactDetails_p != null)
            {
				var json = ContactDetails_p.ToJson();
				if (ContactDetailsJson != json)
				{
					ContactDetailsJson = json;
				}				 
            }
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(ContactTypeStringValue, nameof(ContactTypeStringValue));
			Requires.Text(ContactTypeStringValue, nameof(ContactTypeStringValue), true, 0, 80);
			Requires.Text(FullName, nameof(FullName), true, 0, 255);
			Requires.Text(PrimaryEmail, nameof(PrimaryEmail), true, 0, 254);
			PartialValidate();
        }
	}

	[Table("Contacts", Schema = "dbo")]
	public partial class CarrierContact : Contact
	{
        public static new readonly CarrierContact[] None = new CarrierContact[0];

		[DisplayName("Carrier Number")]
		[MaxLength(50)]
		[Column("CarrierNumber")]
		public string CarrierNumber { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public CarrierContact()
			: this(null)
		{}

		public CarrierContact(CarrierContact other, bool copyKey=false)
			: base(other)
		{
			if (other!=null)
			{
				CarrierNumber = other.CarrierNumber;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		protected override void OnPreSave()
		{
			base.OnPreSave();
			PartialPreSave();
        }

		partial void PartialValidate();

		public override void Validate()
        {
			base.Validate();
			Requires.Text(CarrierNumber, nameof(CarrierNumber), true, 0, 50);
			PartialValidate();
        }
	}

	[Table("Contacts", Schema = "dbo")]
	public partial class OrganizationContact : Contact
	{
        public static new readonly OrganizationContact[] None = new OrganizationContact[0];

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public OrganizationContact()
			: this(null)
		{}

		public OrganizationContact(OrganizationContact other, bool copyKey=false)
			: base(other)
		{
			if (other!=null)
			{
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		protected override void OnPreSave()
		{
			base.OnPreSave();
			PartialPreSave();
        }

		partial void PartialValidate();

		public override void Validate()
        {
			base.Validate();
			PartialValidate();
        }
	}

	[Table("Contacts", Schema = "dbo")]
	public partial class PersonContact : Contact
	{
        public static new readonly PersonContact[] None = new PersonContact[0];

		[DisplayName("Social Security Number")]
		[MaxLength(9)]
		[Column("SocialSecurityNumber")]
		public string SocialSecurityNumber { get; set; }

		[DisplayName("Date Of Birth")]
		[Column("DateOfBirth")]
		public DateTime? DateOfBirth { get; set; }

		[DisplayName("Gender")]
		[MaxLength(100)]
		[Column("Gender")]
		public string Gender { get; set; }

		[DisplayName("Prefix")]
		[MaxLength(255)]
		[Column("Prefix")]
		public string Prefix { get; set; }

		[DisplayName("First Name")]
		[MaxLength(255)]
		[Column("FirstName")]
		public string FirstName { get; set; }

		[DisplayName("Middle Name")]
		[MaxLength(255)]
		[Column("MiddleName")]
		public string MiddleName { get; set; }

		[DisplayName("Last Name")]
		[MaxLength(255)]
		[Column("LastName")]
		public string LastName { get; set; }

		[DisplayName("Suffix")]
		[MaxLength(255)]
		[Column("Suffix")]
		public string Suffix { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public PersonContact()
			: this(null)
		{}

		public PersonContact(PersonContact other, bool copyKey=false)
			: base(other)
		{
			if (other!=null)
			{
				SocialSecurityNumber = other.SocialSecurityNumber;
				DateOfBirth = other.DateOfBirth;
				Gender = other.Gender;
				Prefix = other.Prefix;
				FirstName = other.FirstName;
				MiddleName = other.MiddleName;
				LastName = other.LastName;
				Suffix = other.Suffix;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		protected override void OnPreSave()
		{
			base.OnPreSave();
			PartialPreSave();
        }

		partial void PartialValidate();

		public override void Validate()
        {
			base.Validate();
			Requires.Text(SocialSecurityNumber, nameof(SocialSecurityNumber), true, 0, 9);
			Requires.Text(Gender, nameof(Gender), true, 0, 100);
			Requires.Text(Prefix, nameof(Prefix), true, 0, 255);
			Requires.Text(FirstName, nameof(FirstName), true, 0, 255);
			Requires.Text(MiddleName, nameof(MiddleName), true, 0, 255);
			Requires.Text(LastName, nameof(LastName), true, 0, 255);
			Requires.Text(Suffix, nameof(Suffix), true, 0, 255);
			PartialValidate();
        }
	}

	[Table("Contacts", Schema = "dbo")]
	public partial class ProviderContact : Contact
	{
        public static new readonly ProviderContact[] None = new ProviderContact[0];

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public ProviderContact()
			: this(null)
		{}

		public ProviderContact(ProviderContact other, bool copyKey=false)
			: base(other)
		{
			if (other!=null)
			{
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		protected override void OnPreSave()
		{
			base.OnPreSave();
			PartialPreSave();
        }

		partial void PartialValidate();

		public override void Validate()
        {
			base.Validate();
			PartialValidate();
        }
	}

	[Table("Contacts", Schema = "dbo")]
	public partial class UserContact : Contact
	{
        public static new readonly UserContact[] None = new UserContact[0];

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public UserContact()
			: this(null)
		{}

		public UserContact(UserContact other, bool copyKey=false)
			: base(other)
		{
			if (other!=null)
			{
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		protected override void OnPreSave()
		{
			base.OnPreSave();
			PartialPreSave();
        }

		partial void PartialValidate();

		public override void Validate()
        {
			base.Validate();
			PartialValidate();
        }
	}

	[Table("Contacts", Schema = "dbo")]
	public partial class ContactAllFields : Contact
	{
        public static new readonly ContactAllFields[] None = new ContactAllFields[0];

		[DisplayName("Social Security Number")]
		[MaxLength(9)]
		[Column("SocialSecurityNumber")]
		public string SocialSecurityNumber { get; set; }

		[DisplayName("Date Of Birth")]
		[Column("DateOfBirth")]
		public DateTime? DateOfBirth { get; set; }

		[DisplayName("Gender")]
		[MaxLength(100)]
		[Column("Gender")]
		public string Gender { get; set; }

		[DisplayName("Prefix")]
		[MaxLength(255)]
		[Column("Prefix")]
		public string Prefix { get; set; }

		[DisplayName("First Name")]
		[MaxLength(255)]
		[Column("FirstName")]
		public string FirstName { get; set; }

		[DisplayName("Middle Name")]
		[MaxLength(255)]
		[Column("MiddleName")]
		public string MiddleName { get; set; }

		[DisplayName("Last Name")]
		[MaxLength(255)]
		[Column("LastName")]
		public string LastName { get; set; }

		[DisplayName("Suffix")]
		[MaxLength(255)]
		[Column("Suffix")]
		public string Suffix { get; set; }

		[DisplayName("Carrier Number")]
		[MaxLength(50)]
		[Column("CarrierNumber")]
		public string CarrierNumber { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		private ContactAllFields()
			: this(null)
		{}

		private ContactAllFields(ContactAllFields other, bool copyKey=false)
			: base(other)
		{
			if (other!=null)
			{
				SocialSecurityNumber = other.SocialSecurityNumber;
				DateOfBirth = other.DateOfBirth;
				Gender = other.Gender;
				Prefix = other.Prefix;
				FirstName = other.FirstName;
				MiddleName = other.MiddleName;
				LastName = other.LastName;
				Suffix = other.Suffix;
				CarrierNumber = other.CarrierNumber;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		protected override void OnPreSave()
		{
			base.OnPreSave();
			PartialPreSave();
        }

		partial void PartialValidate();

		public override void Validate()
        {
			base.Validate();
			Requires.Text(SocialSecurityNumber, nameof(SocialSecurityNumber), true, 0, 9);
			Requires.Text(Gender, nameof(Gender), true, 0, 100);
			Requires.Text(Prefix, nameof(Prefix), true, 0, 255);
			Requires.Text(FirstName, nameof(FirstName), true, 0, 255);
			Requires.Text(MiddleName, nameof(MiddleName), true, 0, 255);
			Requires.Text(LastName, nameof(LastName), true, 0, 255);
			Requires.Text(Suffix, nameof(Suffix), true, 0, 255);
			Requires.Text(CarrierNumber, nameof(CarrierNumber), true, 0, 50);
			PartialValidate();
        }
	}

	/// <summary>
	/// Assets that are used in a communication piece
	/// </summary>
	[Table("Creatives", Schema = "dbo")]
	public partial class Creative : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted, IPrimaryKey<int>
	{
        public static readonly Creative[] None = new Creative[0];

		[InverseProperty("Creative")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Communication> CreativeCommunications { get; set; } = new List<Communication>();

		[InverseProperty("Creative")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<CommunicationBlast> CreativeCommunicationBlasts { get; set; } = new List<CommunicationBlast>();

		object IPrimaryKey.Key { get { return CreativeId; }}
	
		int IPrimaryKey<int>.Key { get { return CreativeId; }}

		[DisplayName("Creative Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("CreativeId")]
		public int CreativeId { get; set; }

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		//LinksTo:dbo.Tenants
		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		/// <summary>
		/// Datetime when this entity was created.
		/// </summary>
		[Description("Datetime when this entity was created.")]
		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		/// <summary>
		/// Identifyable title for this asset.
		/// </summary>
		[Description("Identifyable title for this asset.")]
		[DisplayName("Creative Title")]
		[MaxLength(255)]
		[Column("CreativeTitle")]
		public string CreativeTitle { get; set; }

		[DisplayName("Model Type")]
		[NotMapped]
		public Traffk.Bal.Communications.CommunicationModelTypes ModelType
        {
            get
            {
                Traffk.Bal.Communications.CommunicationModelTypes e;
                if (Enum.TryParse(ModelTypeStringValue, true, out e)) return e;
                return 0;
            }
            set { ModelTypeStringValue = value.ToString(); }
        }

		[MaxLength(80)]
		[Column("ModelType")]
		public string ModelTypeStringValue { get; set; }

		[DisplayName("Template Engine Type")]
		[NotMapped]
		public Traffk.Bal.Communications.TemplateEngineTypes TemplateEngineType
        {
            get
            {
                Traffk.Bal.Communications.TemplateEngineTypes e;
                if (Enum.TryParse(TemplateEngineTypeStringValue, true, out e)) return e;
                return 0;
            }
            set { TemplateEngineTypeStringValue = value.ToString(); }
        }

		[NotNull]
		[Required]
		[MaxLength(80)]
		[Column("TemplateEngineType")]
		public string TemplateEngineTypeStringValue { get; set; }

		[DisplayName("Creative Settings")]
		partial void OnCreativeSettingsDeserialized();

        [NotMapped]
        public Bal.Settings.CreativeSettings CreativeSettings
        {
            get
            {
                if (CreativeSettings_p == null)
                {
                    CreativeSettings_p = Bal.Settings.CreativeSettings.CreateFromJson(CreativeSettingsJson) ?? new Bal.Settings.CreativeSettings();
					OnCreativeSettingsDeserialized();
                }
                return CreativeSettings_p;
            }
            set { CreativeSettings_p = value; }
        }
        private Bal.Settings.CreativeSettings CreativeSettings_p;

		[Column("CreativeSettings")]
		public string CreativeSettingsJson { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} CreativeId={CreativeId} {extras}";
		}

		partial void OnConstructed();
	
		public Creative()
			: this(null)
		{}

		public Creative(Creative other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					CreativeId = other.CreativeId;
				}
				CreativeCommunications = other.CreativeCommunications;
				CreativeCommunicationBlasts = other.CreativeCommunicationBlasts;
				TenantId = other.TenantId;
				CreativeTitle = other.CreativeTitle;
				ModelTypeStringValue = other.ModelTypeStringValue;
				TemplateEngineTypeStringValue = other.TemplateEngineTypeStringValue;
				CreativeSettingsJson = other.CreativeSettingsJson;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
            if (CreativeSettings_p != null)
            {
				var json = CreativeSettings_p.ToJson();
				if (CreativeSettingsJson != json)
				{
					CreativeSettingsJson = json;
				}				 
            }
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.Text(CreativeTitle, nameof(CreativeTitle), true, 0, 255);
			Requires.Text(ModelTypeStringValue, nameof(ModelTypeStringValue), true, 0, 80);
			Requires.NonNull(TemplateEngineTypeStringValue, nameof(TemplateEngineTypeStringValue));
			Requires.Text(TemplateEngineTypeStringValue, nameof(TemplateEngineTypeStringValue), true, 0, 80);
			PartialValidate();
        }
	}

	[Table("DataSourceFetches", Schema = "dbo")]
	public partial class DataSourceFetche : IRdbDataEntity, IValidate, IPreSave
	{
        public static readonly DataSourceFetche[] None = new DataSourceFetche[0];

		[DisplayName("Data Source Fetch Id")]
		[Key]
		[Column("DataSourceFetchId")]
		public int DataSourceFetchId { get; set; }

		[DisplayName("Data Source Id")]
		[Column("DataSourceId")]
		public int DataSourceId { get; set; }

		//LinksTo:dbo.DataSources
		[ForeignKey("DataSourceId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DataSource DataSource { get; set; }

		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public DataSourceFetche()
			: this(null)
		{}

		public DataSourceFetche(DataSourceFetche other, bool copyKey=false)
		{
			if (other!=null)
			{
				DataSourceFetchId = other.DataSourceFetchId;
				DataSourceId = other.DataSourceId;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			PartialValidate();
        }
	}

	[Table("DataSourceFetchItems", Schema = "dbo")]
	public partial class DataSourceFetchItem : IRdbDataEntity, IValidate, IPreSave
	{
        public static readonly DataSourceFetchItem[] None = new DataSourceFetchItem[0];

		[DisplayName("Data Source Fetch Item Id")]
		[Key]
		[Column("DataSourceFetchItemId")]
		public int DataSourceFetchItemId { get; set; }

		[DisplayName("Data Source Fetch Id")]
		[Column("DataSourceFetchId")]
		public int DataSourceFetchId { get; set; }

		//LinksTo:dbo.DataSourceFetches
		[ForeignKey("DataSourceFetchId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DataSourceFetche DataSourceFetch { get; set; }

		[DisplayName("Data Source Fetch Item Type")]
		[NotNull]
		[Required]
		[MaxLength(80)]
		[Column("DataSourceFetchItemType")]
		public string DataSourceFetchItemType { get; set; }

		[DisplayName("Parent Data Source Fetch Item Id")]
		[Column("ParentDataSourceFetchItemId")]
		public int? ParentDataSourceFetchItemId { get; set; }

		[DisplayName("Same Data Source Replicated Data Source Fetch Item Id")]
		[Column("SameDataSourceReplicatedDataSourceFetchItemId")]
		public int? SameDataSourceReplicatedDataSourceFetchItemId { get; set; }

		[DisplayName("Name")]
		[MaxLength(1024)]
		[Column("Name")]
		public string Name { get; set; }

		[DisplayName("Size")]
		[Column("Size")]
		public long? Size { get; set; }

		[DisplayName("Url")]
		[MaxLength(1024)]
		[Column("Url")]
		public string Url { get; set; }

		[DisplayName("Data Source Fetch Item Properties")]
		[Column("DataSourceFetchItemProperties")]
		public string DataSourceFetchItemProperties { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public DataSourceFetchItem()
			: this(null)
		{}

		public DataSourceFetchItem(DataSourceFetchItem other, bool copyKey=false)
		{
			if (other!=null)
			{
				DataSourceFetchItemId = other.DataSourceFetchItemId;
				DataSourceFetchId = other.DataSourceFetchId;
				DataSourceFetchItemType = other.DataSourceFetchItemType;
				ParentDataSourceFetchItemId = other.ParentDataSourceFetchItemId;
				SameDataSourceReplicatedDataSourceFetchItemId = other.SameDataSourceReplicatedDataSourceFetchItemId;
				Name = other.Name;
				Size = other.Size;
				Url = other.Url;
				DataSourceFetchItemProperties = other.DataSourceFetchItemProperties;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(DataSourceFetchItemType, nameof(DataSourceFetchItemType));
			Requires.Text(DataSourceFetchItemType, nameof(DataSourceFetchItemType), true, 0, 80);
			Requires.Text(Name, nameof(Name), true, 0, 1024);
			Requires.Text(Url, nameof(Url), true, 0, 1024);
			PartialValidate();
        }
	}

	[Table("DataSources", Schema = "dbo")]
	public partial class DataSource : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted
	{
        public static readonly DataSource[] None = new DataSource[0];

		[DisplayName("Data Source Id")]
		[Key]
		[Column("DataSourceId")]
		public int DataSourceId { get; set; }

		[DisplayName("Row Status")]
		[Column("RowStatus")]
		public char RowStatus { get; set; }

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		//LinksTo:dbo.Tenants
		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Data Source Settings")]
		[Column("DataSourceSettings")]
		public string DataSourceSettings { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public DataSource()
			: this(null)
		{}

		public DataSource(DataSource other, bool copyKey=false)
		{
			if (other!=null)
			{
				DataSourceId = other.DataSourceId;
				RowStatus = other.RowStatus;
				TenantId = other.TenantId;
				DataSourceSettings = other.DataSourceSettings;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			PartialValidate();
        }
	}

	[Table("DateDimensions", Schema = "dbo")]
	public partial class DateDimension : IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<int>
	{
        public static readonly DateDimension[] None = new DateDimension[0];

		[InverseProperty("MedicalEffDd")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Eligibility> MedicalEffDdEligibilitys { get; set; } = new List<Eligibility>();

		[InverseProperty("MedicalTermDd")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Eligibility> MedicalTermDdEligibilitys { get; set; } = new List<Eligibility>();

		[InverseProperty("PrescriptionEffDd")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Eligibility> PrescriptionEffDdEligibilitys { get; set; } = new List<Eligibility>();

		[InverseProperty("PrescriptionTermDd")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Eligibility> PrescriptionTermDdEligibilitys { get; set; } = new List<Eligibility>();

		[InverseProperty("DentalEffDd")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Eligibility> DentalEffDdEligibilitys { get; set; } = new List<Eligibility>();

		[InverseProperty("DentalTermDd")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Eligibility> DentalTermDdEligibilitys { get; set; } = new List<Eligibility>();

		[InverseProperty("VisionEffDd")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Eligibility> VisionEffDdEligibilitys { get; set; } = new List<Eligibility>();

		[InverseProperty("VisionTermDd")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Eligibility> VisionTermDdEligibilitys { get; set; } = new List<Eligibility>();

		[InverseProperty("LongTermDisabilityEffDd")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Eligibility> LongTermDisabilityEffDdEligibilitys { get; set; } = new List<Eligibility>();

		[InverseProperty("LongTermDisabilityTermDd")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Eligibility> LongTermDisabilityTermDdEligibilitys { get; set; } = new List<Eligibility>();

		[InverseProperty("ShortTermDisabilityEffDd")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Eligibility> ShortTermDisabilityEffDdEligibilitys { get; set; } = new List<Eligibility>();

		[InverseProperty("ShortTermDisabilityTermDd")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Eligibility> ShortTermDisabilityTermDdEligibilitys { get; set; } = new List<Eligibility>();

		[InverseProperty("ScorePeriodStartDd")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MillimanScore> ScorePeriodStartDdMillimanScores { get; set; } = new List<MillimanScore>();

		[InverseProperty("ScorePeriodEndDd")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MillimanScore> ScorePeriodEndDdMillimanScores { get; set; } = new List<MillimanScore>();

		[InverseProperty("VisitStartDd")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Visit> VisitStartDdVisits { get; set; } = new List<Visit>();

		[InverseProperty("VisitEndDd")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Visit> VisitEndDdVisits { get; set; } = new List<Visit>();

		[InverseProperty("PrescriptionWrittenDd")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Pharmacy> PrescriptionWrittenDdPharmacys { get; set; } = new List<Pharmacy>();

		[InverseProperty("PrescriptionFilledDd")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Pharmacy> PrescriptionFilledDdPharmacys { get; set; } = new List<Pharmacy>();

		[InverseProperty("ServiceDd")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Pharmacy> ServiceDdPharmacys { get; set; } = new List<Pharmacy>();

		[InverseProperty("PaidDd")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Pharmacy> PaidDdPharmacys { get; set; } = new List<Pharmacy>();

		[InverseProperty("ServiceFromDd")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MedicalClaim> ServiceFromDdMedicalClaims { get; set; } = new List<MedicalClaim>();

		[InverseProperty("ServiceToDd")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MedicalClaim> ServiceToDdMedicalClaims { get; set; } = new List<MedicalClaim>();

		[InverseProperty("ServiceFromDd")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MedicalClaimLine> ServiceFromDdMedicalClaimLines { get; set; } = new List<MedicalClaimLine>();

		[InverseProperty("ServiceToDd")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MedicalClaimLine> ServiceToDdMedicalClaimLines { get; set; } = new List<MedicalClaimLine>();

		[InverseProperty("PaidDd")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MedicalClaimLine> PaidDdMedicalClaimLines { get; set; } = new List<MedicalClaimLine>();

		[InverseProperty("AdjudicationDd")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MedicalClaimLine> AdjudicationDdMedicalClaimLines { get; set; } = new List<MedicalClaimLine>();

		[InverseProperty("CareAlertDd")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<CareAlert> CareAlertDdCareAlerts { get; set; } = new List<CareAlert>();

		[InverseProperty("MeasureFromDd")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<QualityMetric> MeasureFromDdQualityMetrics { get; set; } = new List<QualityMetric>();

		[InverseProperty("MeasureToDd")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<QualityMetric> MeasureToDdQualityMetrics { get; set; } = new List<QualityMetric>();

		[InverseProperty("ProgramStartDd")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Participation> ProgramStartDdParticipations { get; set; } = new List<Participation>();

		[InverseProperty("ProgramEndDd")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Participation> ProgramEndDdParticipations { get; set; } = new List<Participation>();

		object IPrimaryKey.Key { get { return DateDimensionId; }}
	
		int IPrimaryKey<int>.Key { get { return DateDimensionId; }}

		[DisplayName("Date Dimension Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("DateDimensionId")]
		public int DateDimensionId { get; set; }

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		//LinksTo:dbo.Tenants
		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Calendar Date")]
		[Column("CalendarDate")]
		public DateTime CalendarDate { get; set; }

		[DisplayName("Calendar Year")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CalendarYear")]
		public int? CalendarYear { get; set; }

		[DisplayName("Calendar Quarter")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CalendarQuarter")]
		public int? CalendarQuarter { get; set; }

		[DisplayName("Calendar Month")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CalendarMonth")]
		public int? CalendarMonth { get; set; }

		[DisplayName("Calendar Day")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CalendarDay")]
		public int? CalendarDay { get; set; }

		[DisplayName("Fiscal Year")]
		[Column("FiscalYear")]
		public int FiscalYear { get; set; }

		[DisplayName("Fiscal Period")]
		[Column("FiscalPeriod")]
		public byte FiscalPeriod { get; set; }

		[DisplayName("Fiscal Month")]
		[Column("FiscalMonth")]
		public byte FiscalMonth { get; set; }

		[DisplayName("Fiscal Day")]
		[Column("FiscalDay")]
		public int FiscalDay { get; set; }

		[DisplayName("Fiscal Year Name")]
		[NotNull]
		[Required]
		[MaxLength(50)]
		[Column("FiscalYearName")]
		public string FiscalYearName { get; set; }

		[DisplayName("Fiscal Period Name")]
		[NotNull]
		[Required]
		[MaxLength(50)]
		[Column("FiscalPeriodName")]
		public string FiscalPeriodName { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} DateDimensionId={DateDimensionId} {extras}";
		}

		partial void OnConstructed();
	
		public DateDimension()
			: this(null)
		{}

		public DateDimension(DateDimension other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					DateDimensionId = other.DateDimensionId;
				}
				MedicalEffDdEligibilitys = other.MedicalEffDdEligibilitys;
				MedicalTermDdEligibilitys = other.MedicalTermDdEligibilitys;
				PrescriptionEffDdEligibilitys = other.PrescriptionEffDdEligibilitys;
				PrescriptionTermDdEligibilitys = other.PrescriptionTermDdEligibilitys;
				DentalEffDdEligibilitys = other.DentalEffDdEligibilitys;
				DentalTermDdEligibilitys = other.DentalTermDdEligibilitys;
				VisionEffDdEligibilitys = other.VisionEffDdEligibilitys;
				VisionTermDdEligibilitys = other.VisionTermDdEligibilitys;
				LongTermDisabilityEffDdEligibilitys = other.LongTermDisabilityEffDdEligibilitys;
				LongTermDisabilityTermDdEligibilitys = other.LongTermDisabilityTermDdEligibilitys;
				ShortTermDisabilityEffDdEligibilitys = other.ShortTermDisabilityEffDdEligibilitys;
				ShortTermDisabilityTermDdEligibilitys = other.ShortTermDisabilityTermDdEligibilitys;
				ScorePeriodStartDdMillimanScores = other.ScorePeriodStartDdMillimanScores;
				ScorePeriodEndDdMillimanScores = other.ScorePeriodEndDdMillimanScores;
				VisitStartDdVisits = other.VisitStartDdVisits;
				VisitEndDdVisits = other.VisitEndDdVisits;
				PrescriptionWrittenDdPharmacys = other.PrescriptionWrittenDdPharmacys;
				PrescriptionFilledDdPharmacys = other.PrescriptionFilledDdPharmacys;
				ServiceDdPharmacys = other.ServiceDdPharmacys;
				PaidDdPharmacys = other.PaidDdPharmacys;
				ServiceFromDdMedicalClaims = other.ServiceFromDdMedicalClaims;
				ServiceToDdMedicalClaims = other.ServiceToDdMedicalClaims;
				ServiceFromDdMedicalClaimLines = other.ServiceFromDdMedicalClaimLines;
				ServiceToDdMedicalClaimLines = other.ServiceToDdMedicalClaimLines;
				PaidDdMedicalClaimLines = other.PaidDdMedicalClaimLines;
				AdjudicationDdMedicalClaimLines = other.AdjudicationDdMedicalClaimLines;
				CareAlertDdCareAlerts = other.CareAlertDdCareAlerts;
				MeasureFromDdQualityMetrics = other.MeasureFromDdQualityMetrics;
				MeasureToDdQualityMetrics = other.MeasureToDdQualityMetrics;
				ProgramStartDdParticipations = other.ProgramStartDdParticipations;
				ProgramEndDdParticipations = other.ProgramEndDdParticipations;
				TenantId = other.TenantId;
				CalendarDate = other.CalendarDate;
				FiscalYear = other.FiscalYear;
				FiscalPeriod = other.FiscalPeriod;
				FiscalMonth = other.FiscalMonth;
				FiscalDay = other.FiscalDay;
				FiscalYearName = other.FiscalYearName;
				FiscalPeriodName = other.FiscalPeriodName;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(FiscalYearName, nameof(FiscalYearName));
			Requires.Text(FiscalYearName, nameof(FiscalYearName), true, 0, 50);
			Requires.NonNull(FiscalPeriodName, nameof(FiscalPeriodName));
			Requires.Text(FiscalPeriodName, nameof(FiscalPeriodName), true, 0, 50);
			PartialValidate();
        }
	}

	[Table("Lookups", Schema = "dbo")]
	public partial class Lookup : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted, IPrimaryKey<int>
	{
        public static readonly Lookup[] None = new Lookup[0];

		[InverseProperty("MemberRelationshipL")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Eligibility> MemberRelationshipLEligibilitys { get; set; } = new List<Eligibility>();

		[InverseProperty("CoverageTypeL")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Eligibility> CoverageTypeLEligibilitys { get; set; } = new List<Eligibility>();

		[InverseProperty("CobraL")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Eligibility> CobraLEligibilitys { get; set; } = new List<Eligibility>();

		[InverseProperty("DischargeL")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MedicalClaim> DischargeLMedicalClaims { get; set; } = new List<MedicalClaim>();

		[InverseProperty("CareAlertTypeL")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<CareAlert> CareAlertTypeLCareAlerts { get; set; } = new List<CareAlert>();

		[InverseProperty("QualityMetricTypeL")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<QualityMetric> QualityMetricTypeLQualityMetrics { get; set; } = new List<QualityMetric>();

		[InverseProperty("ProgramCodeL")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Participation> ProgramCodeLParticipations { get; set; } = new List<Participation>();

		object IPrimaryKey.Key { get { return LookupId; }}
	
		int IPrimaryKey<int>.Key { get { return LookupId; }}

		[DisplayName("Lookup Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("LookupId")]
		public int LookupId { get; set; }

		/// <summary>
		/// Foreign key to the tenant that owns this account
		/// </summary>
		[Description("Foreign key to the tenant that owns this account")]
		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		//LinksTo:dbo.Tenants
		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Lookup Type")]
		[NotNull]
		[Required]
		[MaxLength(80)]
		[Column("LookupType")]
		public string LookupType { get; set; }

		[DisplayName("Lookup Key")]
		[MaxLength(255)]
		[Column("LookupKey")]
		public string LookupKey { get; set; }

		[DisplayName("Lookup Value")]
		[Column("LookupValue")]
		public string LookupValue { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} LookupId={LookupId} {extras}";
		}

		partial void OnConstructed();
	
		public Lookup()
			: this(null)
		{}

		public Lookup(Lookup other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					LookupId = other.LookupId;
				}
				MemberRelationshipLEligibilitys = other.MemberRelationshipLEligibilitys;
				CoverageTypeLEligibilitys = other.CoverageTypeLEligibilitys;
				CobraLEligibilitys = other.CobraLEligibilitys;
				DischargeLMedicalClaims = other.DischargeLMedicalClaims;
				CareAlertTypeLCareAlerts = other.CareAlertTypeLCareAlerts;
				QualityMetricTypeLQualityMetrics = other.QualityMetricTypeLQualityMetrics;
				ProgramCodeLParticipations = other.ProgramCodeLParticipations;
				TenantId = other.TenantId;
				LookupType = other.LookupType;
				LookupKey = other.LookupKey;
				LookupValue = other.LookupValue;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(LookupType, nameof(LookupType));
			Requires.Text(LookupType, nameof(LookupType), true, 0, 80);
			Requires.Text(LookupKey, nameof(LookupKey), true, 0, 255);
			PartialValidate();
        }
	}

	[Table("Notes", Schema = "dbo")]
	public partial class Note : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted, IPrimaryKey<int>
	{
        public static readonly Note[] None = new Note[0];

		[InverseProperty("ParentNote")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Note> ParentNoteNotes { get; set; } = new List<Note>();

		[InverseProperty("Note")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<NoteTarget> NoteNoteTargets { get; set; } = new List<NoteTarget>();

		object IPrimaryKey.Key { get { return NoteId; }}
	
		int IPrimaryKey<int>.Key { get { return NoteId; }}

		[DisplayName("Note Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("NoteId")]
		public int NoteId { get; set; }

		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		//LinksTo:dbo.Tenants
		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Parent Note Id")]
		[Column("ParentNoteId")]
		public int? ParentNoteId { get; set; }

		//LinksTo:dbo.Notes
		[ForeignKey("ParentNoteId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Note ParentNote { get; set; }

		[DisplayName("Created By Contact Id")]
		[Column("CreatedByContactId")]
		public int CreatedByContactId { get; set; }

		//LinksTo:dbo.Contacts
		[ForeignKey("CreatedByContactId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Contact CreatedByContact { get; set; }

		[DisplayName("Subject")]
		[MaxLength(255)]
		[Column("Subject")]
		public string Subject { get; set; }

		[DisplayName("Body")]
		[Column("Body")]
		public string Body { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} NoteId={NoteId} {extras}";
		}

		partial void OnConstructed();
	
		public Note()
			: this(null)
		{}

		public Note(Note other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					NoteId = other.NoteId;
				}
				ParentNoteNotes = other.ParentNoteNotes;
				NoteNoteTargets = other.NoteNoteTargets;
				TenantId = other.TenantId;
				ParentNoteId = other.ParentNoteId;
				CreatedByContactId = other.CreatedByContactId;
				Subject = other.Subject;
				Body = other.Body;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.Text(Subject, nameof(Subject), true, 0, 255);
			PartialValidate();
        }
	}

	[Table("NoteTargets", Schema = "dbo")]
	public partial class NoteTarget : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted, IPrimaryKey<int>
	{
        public static readonly NoteTarget[] None = new NoteTarget[0];

		object IPrimaryKey.Key { get { return NoteTargetId; }}
	
		int IPrimaryKey<int>.Key { get { return NoteTargetId; }}

		[DisplayName("Note Target Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("NoteTargetId")]
		public int NoteTargetId { get; set; }

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		//LinksTo:dbo.Tenants
		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Note Id")]
		[Column("NoteId")]
		public int NoteId { get; set; }

		//LinksTo:dbo.Notes
		[ForeignKey("NoteId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Note Note { get; set; }

		[DisplayName("Table Object Id")]
		[Column("TableObjectId")]
		public int TableObjectId { get; set; }

		[DisplayName("Table Pk Int Val")]
		[Column("TablePkIntVal")]
		public int? TablePkIntVal { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} NoteTargetId={NoteTargetId} {extras}";
		}

		partial void OnConstructed();
	
		public NoteTarget()
			: this(null)
		{}

		public NoteTarget(NoteTarget other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					NoteTargetId = other.NoteTargetId;
				}
				TenantId = other.TenantId;
				NoteId = other.NoteId;
				TableObjectId = other.TableObjectId;
				TablePkIntVal = other.TablePkIntVal;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			PartialValidate();
        }
	}

	[Table("ReleaseChanges", Schema = "dbo")]
	public partial class ReleaseChange : IRdbDataEntity, IValidate, IPreSave
	{
        public static readonly ReleaseChange[] None = new ReleaseChange[0];

		[DisplayName("Release Change Id")]
		[Key]
		[Column("ReleaseChangeId")]
		public int ReleaseChangeId { get; set; }

		[DisplayName("Release Id")]
		[Column("ReleaseId")]
		public int ReleaseId { get; set; }

		//LinksTo:dbo.Releases
		[ForeignKey("ReleaseId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Release Release { get; set; }

		[DisplayName("Change Type")]
		[MaxLength(255)]
		[Column("ChangeType")]
		public string ChangeType { get; set; }

		[DisplayName("Title")]
		[MaxLength(255)]
		[Column("Title")]
		public string Title { get; set; }

		[DisplayName("Order")]
		[Column("Order")]
		public int? Order { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public ReleaseChange()
			: this(null)
		{}

		public ReleaseChange(ReleaseChange other, bool copyKey=false)
		{
			if (other!=null)
			{
				ReleaseChangeId = other.ReleaseChangeId;
				ReleaseId = other.ReleaseId;
				ChangeType = other.ChangeType;
				Title = other.Title;
				Order = other.Order;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.Text(ChangeType, nameof(ChangeType), true, 0, 255);
			Requires.Text(Title, nameof(Title), true, 0, 255);
			PartialValidate();
        }
	}

	[Table("Releases", Schema = "dbo")]
	public partial class Release : IRdbDataEntity, IValidate, IPreSave
	{
        public static readonly Release[] None = new Release[0];

		[InverseProperty("Release")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<ReleaseChange> ReleaseReleaseChanges { get; set; } = new List<ReleaseChange>();

		[DisplayName("Release Id")]
		[Key]
		[Column("ReleaseId")]
		public int ReleaseId { get; set; }

		[DisplayName("App Type")]
		[NotNull]
		[Required]
		[MaxLength(80)]
		[Column("AppType")]
		public string AppType { get; set; }

		[DisplayName("Release Date")]
		[Column("ReleaseDate")]
		public DateTime? ReleaseDate { get; set; }

		[DisplayName("Release Name")]
		[MaxLength(255)]
		[Column("ReleaseName")]
		public string ReleaseName { get; set; }

		[DisplayName("Release Notes")]
		[Column("ReleaseNotes")]
		public string ReleaseNotes { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public Release()
			: this(null)
		{}

		public Release(Release other, bool copyKey=false)
		{
			if (other!=null)
			{
				ReleaseReleaseChanges = other.ReleaseReleaseChanges;
				ReleaseId = other.ReleaseId;
				AppType = other.AppType;
				ReleaseDate = other.ReleaseDate;
				ReleaseName = other.ReleaseName;
				ReleaseNotes = other.ReleaseNotes;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(AppType, nameof(AppType));
			Requires.Text(AppType, nameof(AppType), true, 0, 80);
			Requires.Text(ReleaseName, nameof(ReleaseName), true, 0, 255);
			PartialValidate();
        }
	}

	[Table("Tenants", Schema = "dbo")]
	public partial class Tenant : IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<int>
	{
        public static readonly Tenant[] None = new Tenant[0];

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<App> TenantApps { get; set; } = new List<App>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<DateDimension> TenantDateDimensions { get; set; } = new List<DateDimension>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Creative> TenantCreatives { get; set; } = new List<Creative>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MillimanScore> TenantMillimanScores { get; set; } = new List<MillimanScore>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Communication> TenantCommunications { get; set; } = new List<Communication>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<CommunicationBlast> TenantCommunicationBlasts { get; set; } = new List<CommunicationBlast>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Visit> TenantVisits { get; set; } = new List<Visit>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<CommunicationBlastTracker> TenantCommunicationBlastTrackers { get; set; } = new List<CommunicationBlastTracker>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<CommunicationPiece> TenantCommunicationPieces { get; set; } = new List<CommunicationPiece>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<CommunicationPieceVisit> TenantCommunicationPieceVisits { get; set; } = new List<CommunicationPieceVisit>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Pharmacy> TenantPharmacys { get; set; } = new List<Pharmacy>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Note> TenantNotes { get; set; } = new List<Note>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MedicalClaim> TenantMedicalClaims { get; set; } = new List<MedicalClaim>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<NoteTarget> TenantNoteTargets { get; set; } = new List<NoteTarget>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MedicalClaimDiagnose> TenantMedicalClaimDiagnoses { get; set; } = new List<MedicalClaimDiagnose>();

		//skipped: dbo.ReportMetaData

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MedicalClaimLine> TenantMedicalClaimLines { get; set; } = new List<MedicalClaimLine>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<CareAlert> TenantCareAlerts { get; set; } = new List<CareAlert>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Member> TenantMembers { get; set; } = new List<Member>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<QualityMetric> TenantQualityMetrics { get; set; } = new List<QualityMetric>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Participation> TenantParticipations { get; set; } = new List<Participation>();

		[InverseProperty("ParentTenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Tenant> ParentTenantTenants { get; set; } = new List<Tenant>();

		//skipped: dbo.AspNetRoles

		//skipped: dbo.AspNetUsers

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Lookup> TenantLookups { get; set; } = new List<Lookup>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Address> TenantAddresss { get; set; } = new List<Address>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Eligibility> TenantEligibilitys { get; set; } = new List<Eligibility>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Contact> TenantContacts { get; set; } = new List<Contact>();

		object IPrimaryKey.Key { get { return TenantId; }}
	
		int IPrimaryKey<int>.Key { get { return TenantId; }}

		[DisplayName("Tenant Id")]
		[Key]
		[Column("TenantId")]
		public int TenantId { get; set; }

		[DisplayName("Parent Tenant Id")]
		[Column("ParentTenantId")]
		public int? ParentTenantId { get; set; }

		//LinksTo:dbo.Tenants
		[ForeignKey("ParentTenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant ParentTenant { get; set; }

		/// <summary>
		/// Datetime when this entity was created.
		/// </summary>
		[Description("Datetime when this entity was created.")]
		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Tenant Name")]
		[NotNull]
		[Required]
		[MaxLength(255)]
		[Column("TenantName")]
		public string TenantName { get; set; }

		[DisplayName("Login Domain")]
		[MaxLength(80)]
		[Column("LoginDomain")]
		public string LoginDomain { get; set; }

		[DisplayName("Tenant Settings")]
		partial void OnTenantSettingsDeserialized();

        [NotMapped]
        public Bal.Settings.TenantSettings TenantSettings
        {
            get
            {
                if (TenantSettings_p == null)
                {
                    TenantSettings_p = Bal.Settings.TenantSettings.CreateFromJson(TenantSettingsJson) ?? new Bal.Settings.TenantSettings();
					OnTenantSettingsDeserialized();
                }
                return TenantSettings_p;
            }
            set { TenantSettings_p = value; }
        }
        private Bal.Settings.TenantSettings TenantSettings_p;

		[Column("TenantSettings")]
		public string TenantSettingsJson { get; set; }

		[DisplayName("Tenant Type")]
		[NotMapped]
		public Tenant.TenantTypes TenantType
        {
            get
            {
                Tenant.TenantTypes e;
                if (Enum.TryParse(TenantTypeStringValue, true, out e)) return e;
                return 0;
            }
            set { TenantTypeStringValue = value.ToString(); }
        }

		[NotNull]
		[Required]
		[MaxLength(80)]
		[Column("TenantType")]
		public string TenantTypeStringValue { get; set; }

		[DisplayName("Host Database Name")]
		[MaxLength(128)]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("HostDatabaseName")]
		public string HostDatabaseName { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} TenantId={TenantId} {extras}";
		}

		partial void OnConstructed();
	
		public Tenant()
			: this(null)
		{}

		public Tenant(Tenant other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					TenantId = other.TenantId;
				}
				TenantApps = other.TenantApps;
				TenantDateDimensions = other.TenantDateDimensions;
				TenantCreatives = other.TenantCreatives;
				TenantMillimanScores = other.TenantMillimanScores;
				TenantCommunications = other.TenantCommunications;
				TenantCommunicationBlasts = other.TenantCommunicationBlasts;
				TenantVisits = other.TenantVisits;
				TenantCommunicationBlastTrackers = other.TenantCommunicationBlastTrackers;
				TenantCommunicationPieces = other.TenantCommunicationPieces;
				TenantCommunicationPieceVisits = other.TenantCommunicationPieceVisits;
				TenantPharmacys = other.TenantPharmacys;
				TenantNotes = other.TenantNotes;
				TenantMedicalClaims = other.TenantMedicalClaims;
				TenantNoteTargets = other.TenantNoteTargets;
				TenantMedicalClaimDiagnoses = other.TenantMedicalClaimDiagnoses;
				TenantMedicalClaimLines = other.TenantMedicalClaimLines;
				TenantCareAlerts = other.TenantCareAlerts;
				TenantMembers = other.TenantMembers;
				TenantQualityMetrics = other.TenantQualityMetrics;
				TenantParticipations = other.TenantParticipations;
				ParentTenantTenants = other.ParentTenantTenants;
				TenantLookups = other.TenantLookups;
				TenantAddresss = other.TenantAddresss;
				TenantEligibilitys = other.TenantEligibilitys;
				TenantContacts = other.TenantContacts;
				ParentTenantId = other.ParentTenantId;
				TenantName = other.TenantName;
				LoginDomain = other.LoginDomain;
				TenantSettingsJson = other.TenantSettingsJson;
				TenantTypeStringValue = other.TenantTypeStringValue;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
            if (TenantSettings_p != null)
            {
				var json = TenantSettings_p.ToJson();
				if (TenantSettingsJson != json)
				{
					TenantSettingsJson = json;
				}				 
            }
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(TenantName, nameof(TenantName));
			Requires.Text(TenantName, nameof(TenantName), true, 0, 255);
			Requires.Text(LoginDomain, nameof(LoginDomain), true, 0, 80);
			Requires.NonNull(TenantTypeStringValue, nameof(TenantTypeStringValue));
			Requires.Text(TenantTypeStringValue, nameof(TenantTypeStringValue), true, 0, 80);
			Requires.Text(HostDatabaseName, nameof(HostDatabaseName), true, 0, 128);
			PartialValidate();
        }
	}

	[Table("Job", Schema = "HangFire")]
	public partial class Job : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted
	{
        public static readonly Job[] None = new Job[0];

		[DisplayName("Id")]
		[Key]
		[Column("Id")]
		public int Id { get; set; }

		[DisplayName("State Id")]
		[Column("StateId")]
		public int? StateId { get; set; }

		[DisplayName("State Name")]
		[MaxLength(20)]
		[Column("StateName")]
		public string StateName { get; set; }

		[DisplayName("Invocation Data")]
		[NotNull]
		[Required]
		[Column("InvocationData")]
		public string InvocationData { get; set; }

		[DisplayName("Arguments")]
		[NotNull]
		[Required]
		[Column("Arguments")]
		public string Arguments { get; set; }

		[DisplayName("Created At")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAt")]
		public DateTime CreatedAt { get; set; }

		[DisplayName("Expire At")]
		[Column("ExpireAt")]
		public DateTime? ExpireAt { get; set; }

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		//LinksTo:dbo.Tenants
		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Result Data")]
		[Column("ResultData")]
		public string ResultData { get; set; }

		[DisplayName("Recurring Job Id")]
		[MaxLength(256)]
		[Column("RecurringJobId")]
		public string RecurringJobId { get; set; }

		[DisplayName("Contact Id")]
		[Column("ContactId")]
		public int? ContactId { get; set; }

		//LinksTo:dbo.Contacts
		[ForeignKey("ContactId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Contact Contact { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public Job()
			: this(null)
		{}

		public Job(Job other, bool copyKey=false)
		{
			if (other!=null)
			{
				Id = other.Id;
				StateId = other.StateId;
				StateName = other.StateName;
				InvocationData = other.InvocationData;
				Arguments = other.Arguments;
				ExpireAt = other.ExpireAt;
				TenantId = other.TenantId;
				ResultData = other.ResultData;
				RecurringJobId = other.RecurringJobId;
				ContactId = other.ContactId;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.Text(StateName, nameof(StateName), true, 0, 20);
			Requires.NonNull(InvocationData, nameof(InvocationData));
			Requires.NonNull(Arguments, nameof(Arguments));
			Requires.Text(RecurringJobId, nameof(RecurringJobId), true, 0, 256);
			PartialValidate();
        }
	}

	[Table("CareAlerts", Schema = "Health")]
	public partial class CareAlert : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted, IDontCreate, IPrimaryKey<int>
	{
        public static readonly CareAlert[] None = new CareAlert[0];

		object IPrimaryKey.Key { get { return CareAlertId; }}
	
		int IPrimaryKey<int>.Key { get { return CareAlertId; }}

		[DisplayName("Care Alert Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("CareAlertId")]
		public int CareAlertId { get; set; }

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		//LinksTo:dbo.Tenants
		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Contact Id")]
		[Column("ContactId")]
		public int? ContactId { get; set; }

		//LinksTo:dbo.Contacts
		[ForeignKey("ContactId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Contact Contact { get; set; }

		[DisplayName("Care Alert Ddim")]
		[Column("CareAlertDdim")]
		public int? CareAlertDdim { get; set; }

		//LinksTo:dbo.DateDimensions
		[ForeignKey("CareAlertDdim")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension CareAlertDd { get; set; }

		[DisplayName("Care Alert Type Lid")]
		[Column("CareAlertTypeLid")]
		public int CareAlertTypeLid { get; set; }

		//LinksTo:dbo.Lookups
		[ForeignKey("CareAlertTypeLid")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Lookup CareAlertTypeL { get; set; }

		[DisplayName("Metric Type")]
		[MaxLength(50)]
		[Column("MetricType")]
		public string MetricType { get; set; }

		[DisplayName("Metric Name")]
		[MaxLength(50)]
		[Column("MetricName")]
		public string MetricName { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} CareAlertId={CareAlertId} {extras}";
		}

		partial void OnConstructed();
	
		public CareAlert()
			: this(null)
		{}

		public CareAlert(CareAlert other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					CareAlertId = other.CareAlertId;
				}
				TenantId = other.TenantId;
				ContactId = other.ContactId;
				CareAlertDdim = other.CareAlertDdim;
				CareAlertTypeLid = other.CareAlertTypeLid;
				MetricType = other.MetricType;
				MetricName = other.MetricName;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.Text(MetricType, nameof(MetricType), true, 0, 50);
			Requires.Text(MetricName, nameof(MetricName), true, 0, 50);
			PartialValidate();
        }
	}

	[Table("Eligibility", Schema = "Health")]
	public partial class Eligibility : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted, IDontCreate, IPrimaryKey<int>
	{
        public static readonly Eligibility[] None = new Eligibility[0];

		object IPrimaryKey.Key { get { return EligibilityId; }}
	
		int IPrimaryKey<int>.Key { get { return EligibilityId; }}

		[DisplayName("Eligibility Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("EligibilityId")]
		public int EligibilityId { get; set; }

		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		//LinksTo:dbo.Tenants
		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Contact Id")]
		[Column("ContactId")]
		public int? ContactId { get; set; }

		//LinksTo:dbo.Contacts
		[ForeignKey("ContactId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Contact Contact { get; set; }

		/// <summary>
		/// Member ID to display on the application, as sent by client
		/// </summary>
		[Description("Member ID to display on the application, as sent by client")]
		[DisplayName("Member Id")]
		[Column("MemberId")]
		public int MemberId { get; set; }

		//LinksTo:Health.Members
		[ForeignKey("MemberId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Member Member { get; set; }

		[DisplayName("Member Address Id")]
		[Column("MemberAddressId")]
		public int? MemberAddressId { get; set; }

		//LinksTo:dbo.Addresses
		[ForeignKey("MemberAddressId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Address MemberAddress { get; set; }

		/// <summary>
		/// Effective date for medical plan
		/// </summary>
		[Description("Effective date for medical plan")]
		[DisplayName("Medical Eff Ddim")]
		[Column("MedicalEffDdim")]
		public int? MedicalEffDdim { get; set; }

		//LinksTo:dbo.DateDimensions
		[ForeignKey("MedicalEffDdim")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension MedicalEffDd { get; set; }

		/// <summary>
		/// Termination date for medical plan
		/// </summary>
		[Description("Termination date for medical plan")]
		[DisplayName("Medical Term Ddim")]
		[Column("MedicalTermDdim")]
		public int? MedicalTermDdim { get; set; }

		//LinksTo:dbo.DateDimensions
		[ForeignKey("MedicalTermDdim")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension MedicalTermDd { get; set; }

		/// <summary>
		/// Effective date for drug plan
		/// </summary>
		[Description("Effective date for drug plan")]
		[DisplayName("Prescription Eff Ddim")]
		[Column("PrescriptionEffDdim")]
		public int? PrescriptionEffDdim { get; set; }

		//LinksTo:dbo.DateDimensions
		[ForeignKey("PrescriptionEffDdim")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension PrescriptionEffDd { get; set; }

		/// <summary>
		/// Termination date for drug plan
		/// </summary>
		[Description("Termination date for drug plan")]
		[DisplayName("Prescription Term Ddim")]
		[Column("PrescriptionTermDdim")]
		public int? PrescriptionTermDdim { get; set; }

		//LinksTo:dbo.DateDimensions
		[ForeignKey("PrescriptionTermDdim")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension PrescriptionTermDd { get; set; }

		/// <summary>
		/// Effective date for dental plan
		/// </summary>
		[Description("Effective date for dental plan")]
		[DisplayName("Dental Eff Ddim")]
		[Column("DentalEffDdim")]
		public int? DentalEffDdim { get; set; }

		//LinksTo:dbo.DateDimensions
		[ForeignKey("DentalEffDdim")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension DentalEffDd { get; set; }

		/// <summary>
		/// Termination date for dental plan
		/// </summary>
		[Description("Termination date for dental plan")]
		[DisplayName("Dental Term Ddim")]
		[Column("DentalTermDdim")]
		public int? DentalTermDdim { get; set; }

		//LinksTo:dbo.DateDimensions
		[ForeignKey("DentalTermDdim")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension DentalTermDd { get; set; }

		/// <summary>
		/// Effective date for vision plan
		/// </summary>
		[Description("Effective date for vision plan")]
		[DisplayName("Vision Eff Ddim")]
		[Column("VisionEffDdim")]
		public int? VisionEffDdim { get; set; }

		//LinksTo:dbo.DateDimensions
		[ForeignKey("VisionEffDdim")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension VisionEffDd { get; set; }

		/// <summary>
		/// Termination date for vision plan
		/// </summary>
		[Description("Termination date for vision plan")]
		[DisplayName("Vision Term Ddim")]
		[Column("VisionTermDdim")]
		public int? VisionTermDdim { get; set; }

		//LinksTo:dbo.DateDimensions
		[ForeignKey("VisionTermDdim")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension VisionTermDd { get; set; }

		/// <summary>
		/// Effective date for long term disability plan plan
		/// </summary>
		[Description("Effective date for long term disability plan plan")]
		[DisplayName("Long Term Disability Eff Ddim")]
		[Column("LongTermDisabilityEffDdim")]
		public int? LongTermDisabilityEffDdim { get; set; }

		//LinksTo:dbo.DateDimensions
		[ForeignKey("LongTermDisabilityEffDdim")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension LongTermDisabilityEffDd { get; set; }

		/// <summary>
		/// Termination date for long term disability plan
		/// </summary>
		[Description("Termination date for long term disability plan")]
		[DisplayName("Long Term Disability Term Ddim")]
		[Column("LongTermDisabilityTermDdim")]
		public int? LongTermDisabilityTermDdim { get; set; }

		//LinksTo:dbo.DateDimensions
		[ForeignKey("LongTermDisabilityTermDdim")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension LongTermDisabilityTermDd { get; set; }

		/// <summary>
		/// Effective date for short term disability plan
		/// </summary>
		[Description("Effective date for short term disability plan")]
		[DisplayName("Short Term Disability Eff Ddim")]
		[Column("ShortTermDisabilityEffDdim")]
		public int? ShortTermDisabilityEffDdim { get; set; }

		//LinksTo:dbo.DateDimensions
		[ForeignKey("ShortTermDisabilityEffDdim")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension ShortTermDisabilityEffDd { get; set; }

		/// <summary>
		/// Termination date for short term disability plan
		/// </summary>
		[Description("Termination date for short term disability plan")]
		[DisplayName("Short Term Disability Term Ddim")]
		[Column("ShortTermDisabilityTermDdim")]
		public int? ShortTermDisabilityTermDdim { get; set; }

		//LinksTo:dbo.DateDimensions
		[ForeignKey("ShortTermDisabilityTermDdim")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension ShortTermDisabilityTermDd { get; set; }

		[DisplayName("Member Relationship Lid")]
		[Column("MemberRelationshipLid")]
		public int? MemberRelationshipLid { get; set; }

		//LinksTo:dbo.Lookups
		[ForeignKey("MemberRelationshipLid")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Lookup MemberRelationshipL { get; set; }

		/// <summary>
		/// Coverage type
		/// </summary>
		[Description("Coverage type")]
		[DisplayName("Coverage Type Lid")]
		[SampleData("Family")]
		[Column("CoverageTypeLid")]
		public int? CoverageTypeLid { get; set; }

		//LinksTo:dbo.Lookups
		[ForeignKey("CoverageTypeLid")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Lookup CoverageTypeL { get; set; }

		/// <summary>
		/// Status Code of the Employee - Not Specified : 00, Working : 01, Terminated : 02
		/// </summary>
		[Description("Status Code of the Employee - Not Specified : 00, Working : 01, Terminated : 02")]
		[DisplayName("Cobra Lid")]
		[Column("CobraLid")]
		public int? CobraLid { get; set; }

		//LinksTo:dbo.Lookups
		[ForeignKey("CobraLid")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Lookup CobraL { get; set; }

		[DisplayName("Eligibility Details")]
		[Column("EligibilityDetails")]
		public string EligibilityDetails { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} EligibilityId={EligibilityId} {extras}";
		}

		partial void OnConstructed();
	
		public Eligibility()
			: this(null)
		{}

		public Eligibility(Eligibility other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					EligibilityId = other.EligibilityId;
				}
				TenantId = other.TenantId;
				ContactId = other.ContactId;
				MemberId = other.MemberId;
				MemberAddressId = other.MemberAddressId;
				MedicalEffDdim = other.MedicalEffDdim;
				MedicalTermDdim = other.MedicalTermDdim;
				PrescriptionEffDdim = other.PrescriptionEffDdim;
				PrescriptionTermDdim = other.PrescriptionTermDdim;
				DentalEffDdim = other.DentalEffDdim;
				DentalTermDdim = other.DentalTermDdim;
				VisionEffDdim = other.VisionEffDdim;
				VisionTermDdim = other.VisionTermDdim;
				LongTermDisabilityEffDdim = other.LongTermDisabilityEffDdim;
				LongTermDisabilityTermDdim = other.LongTermDisabilityTermDdim;
				ShortTermDisabilityEffDdim = other.ShortTermDisabilityEffDdim;
				ShortTermDisabilityTermDdim = other.ShortTermDisabilityTermDdim;
				MemberRelationshipLid = other.MemberRelationshipLid;
				CoverageTypeLid = other.CoverageTypeLid;
				CobraLid = other.CobraLid;
				EligibilityDetails = other.EligibilityDetails;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			PartialValidate();
        }
	}

	[Table("MedicalClaimDiagnoses", Schema = "Health")]
	public partial class MedicalClaimDiagnose : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted, IDontCreate, IPrimaryKey<int>
	{
        public static readonly MedicalClaimDiagnose[] None = new MedicalClaimDiagnose[0];

		object IPrimaryKey.Key { get { return MedicalClaimDiagnosisId; }}
	
		int IPrimaryKey<int>.Key { get { return MedicalClaimDiagnosisId; }}

		[DisplayName("Medical Claim Diagnosis Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("MedicalClaimDiagnosisId")]
		public int MedicalClaimDiagnosisId { get; set; }

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		//LinksTo:dbo.Tenants
		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Medical Claim Id")]
		[Column("MedicalClaimId")]
		public int MedicalClaimId { get; set; }

		//LinksTo:Health.MedicalClaims
		[ForeignKey("MedicalClaimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public MedicalClaim MedicalClaim { get; set; }

		[DisplayName("Icd10 Id")]
		[Column("Icd10Id")]
		public int? Icd10Id { get; set; }

		//LinksTo:InternationalClassificationDiseases.ICD10
		[ForeignKey("Icd10Id")]
		[JsonIgnore]
        [IgnoreDataMember]
		public ICD10 Icd10 { get; set; }

		[DisplayName("Diagnosis Number")]
		[Column("DiagnosisNumber")]
		public int DiagnosisNumber { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} MedicalClaimDiagnosisId={MedicalClaimDiagnosisId} {extras}";
		}

		partial void OnConstructed();
	
		public MedicalClaimDiagnose()
			: this(null)
		{}

		public MedicalClaimDiagnose(MedicalClaimDiagnose other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					MedicalClaimDiagnosisId = other.MedicalClaimDiagnosisId;
				}
				TenantId = other.TenantId;
				MedicalClaimId = other.MedicalClaimId;
				Icd10Id = other.Icd10Id;
				DiagnosisNumber = other.DiagnosisNumber;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			PartialValidate();
        }
	}

	[Table("MedicalClaimLines", Schema = "Health")]
	public partial class MedicalClaimLine : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted, IDontCreate, IPrimaryKey<int>
	{
        public static readonly MedicalClaimLine[] None = new MedicalClaimLine[0];

		object IPrimaryKey.Key { get { return MedicalClaimLineId; }}
	
		int IPrimaryKey<int>.Key { get { return MedicalClaimLineId; }}

		[DisplayName("Medical Claim Line Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("MedicalClaimLineId")]
		public int MedicalClaimLineId { get; set; }

		[DisplayName("Medical Claim Id")]
		[Column("MedicalClaimId")]
		public int MedicalClaimId { get; set; }

		//LinksTo:Health.MedicalClaims
		[ForeignKey("MedicalClaimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public MedicalClaim MedicalClaim { get; set; }

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		//LinksTo:dbo.Tenants
		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Contact Id")]
		[Column("ContactId")]
		public int? ContactId { get; set; }

		//LinksTo:dbo.Contacts
		[ForeignKey("ContactId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Contact Contact { get; set; }

		/// <summary>
		/// Member ID to display on the application, as sent by client
		/// </summary>
		[Description("Member ID to display on the application, as sent by client")]
		[DisplayName("Member Id")]
		[Column("MemberId")]
		public int MemberId { get; set; }

		//LinksTo:Health.Members
		[ForeignKey("MemberId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Member Member { get; set; }

		[DisplayName("Medical Claim Line Number")]
		[NotNull]
		[Required]
		[MaxLength(25)]
		[Column("MedicalClaimLineNumber")]
		public string MedicalClaimLineNumber { get; set; }

		[DisplayName("Visit Id")]
		[Column("VisitId")]
		public int? VisitId { get; set; }

		//LinksTo:Health.Visits
		[ForeignKey("VisitId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Visit Visit { get; set; }

		[DisplayName("Procedure Type")]
		[MaxLength(10)]
		[Column("ProcedureType")]
		public string ProcedureType { get; set; }

		[DisplayName("Procedure Code")]
		[NotNull]
		[Required]
		[MaxLength(10)]
		[Column("ProcedureCode")]
		public string ProcedureCode { get; set; }

		[DisplayName("Procedure Description")]
		[MaxLength(255)]
		[Column("ProcedureDescription")]
		public string ProcedureDescription { get; set; }

		[DisplayName("Procedure Hcpcs Id")]
		[Column("ProcedureHcpcsId")]
		public int? ProcedureHcpcsId { get; set; }

		//LinksTo:CmsGov.HealthcareCommonProcedureCodingSystemCodes
		[ForeignKey("ProcedureHcpcsId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public HealthcareCommonProcedureCodingSystemCode ProcedureHcpcs { get; set; }

		[DisplayName("Cpt Betos Id")]
		[Column("CptBetosId")]
		public int? CptBetosId { get; set; }

		//LinksTo:CmsGov.BerensonEggersTypeOfServices
		[ForeignKey("CptBetosId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public BerensonEggersTypeOfService CptBetos { get; set; }

		[DisplayName("Hcpcs Betos Id")]
		[Column("HcpcsBetosId")]
		public int? HcpcsBetosId { get; set; }

		//LinksTo:CmsGov.BerensonEggersTypeOfServices
		[ForeignKey("HcpcsBetosId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public BerensonEggersTypeOfService HcpcsBetos { get; set; }

		[DisplayName("Rev Betos Id")]
		[Column("RevBetosId")]
		public int? RevBetosId { get; set; }

		//LinksTo:CmsGov.BerensonEggersTypeOfServices
		[ForeignKey("RevBetosId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public BerensonEggersTypeOfService RevBetos { get; set; }

		[DisplayName("Drg Betos Id")]
		[Column("DrgBetosId")]
		public int? DrgBetosId { get; set; }

		//LinksTo:CmsGov.BerensonEggersTypeOfServices
		[ForeignKey("DrgBetosId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public BerensonEggersTypeOfService DrgBetos { get; set; }

		[DisplayName("Service From Ddim")]
		[Column("ServiceFromDdim")]
		public int? ServiceFromDdim { get; set; }

		//LinksTo:dbo.DateDimensions
		[ForeignKey("ServiceFromDdim")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension ServiceFromDd { get; set; }

		[DisplayName("Service To Ddim")]
		[Column("ServiceToDdim")]
		public int? ServiceToDdim { get; set; }

		//LinksTo:dbo.DateDimensions
		[ForeignKey("ServiceToDdim")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension ServiceToDd { get; set; }

		[DisplayName("Paid Ddim")]
		[Column("PaidDdim")]
		public int? PaidDdim { get; set; }

		//LinksTo:dbo.DateDimensions
		[ForeignKey("PaidDdim")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension PaidDd { get; set; }

		[DisplayName("Adjudication Ddim")]
		[Column("AdjudicationDdim")]
		public int? AdjudicationDdim { get; set; }

		//LinksTo:dbo.DateDimensions
		[ForeignKey("AdjudicationDdim")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension AdjudicationDd { get; set; }

		[DisplayName("Allowed Amount")]
		[Column("AllowedAmount")]
		public decimal? AllowedAmount { get; set; }

		[DisplayName("Billed Amount")]
		[Column("BilledAmount")]
		public decimal? BilledAmount { get; set; }

		[DisplayName("Coordination Of Benefits Amount")]
		[Column("CoordinationOfBenefitsAmount")]
		public decimal? CoordinationOfBenefitsAmount { get; set; }

		[DisplayName("Coinsurance Amount")]
		[Column("CoinsuranceAmount")]
		public decimal? CoinsuranceAmount { get; set; }

		[DisplayName("Copay Amount")]
		[Column("CopayAmount")]
		public decimal? CopayAmount { get; set; }

		[DisplayName("Coverage Charge Amount")]
		[Column("CoverageChargeAmount")]
		public decimal? CoverageChargeAmount { get; set; }

		[DisplayName("Deductible Amount")]
		[Column("DeductibleAmount")]
		public decimal? DeductibleAmount { get; set; }

		[DisplayName("Not Covered Amount")]
		[Column("NotCoveredAmount")]
		public decimal? NotCoveredAmount { get; set; }

		[DisplayName("PPOSavings")]
		[Column("PPOSavings")]
		public decimal? PPOSavings { get; set; }

		[DisplayName("Other Savings Generated")]
		[Column("OtherSavingsGenerated")]
		public decimal? OtherSavingsGenerated { get; set; }

		[DisplayName("Paid Amount")]
		[Column("PaidAmount")]
		public decimal? PaidAmount { get; set; }

		[DisplayName("Medical Claim Line Details")]
		[Column("MedicalClaimLineDetails")]
		public string MedicalClaimLineDetails { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} MedicalClaimLineId={MedicalClaimLineId} {extras}";
		}

		partial void OnConstructed();
	
		public MedicalClaimLine()
			: this(null)
		{}

		public MedicalClaimLine(MedicalClaimLine other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					MedicalClaimLineId = other.MedicalClaimLineId;
				}
				MedicalClaimId = other.MedicalClaimId;
				TenantId = other.TenantId;
				ContactId = other.ContactId;
				MemberId = other.MemberId;
				MedicalClaimLineNumber = other.MedicalClaimLineNumber;
				VisitId = other.VisitId;
				ProcedureType = other.ProcedureType;
				ProcedureCode = other.ProcedureCode;
				ProcedureDescription = other.ProcedureDescription;
				ProcedureHcpcsId = other.ProcedureHcpcsId;
				CptBetosId = other.CptBetosId;
				HcpcsBetosId = other.HcpcsBetosId;
				RevBetosId = other.RevBetosId;
				DrgBetosId = other.DrgBetosId;
				ServiceFromDdim = other.ServiceFromDdim;
				ServiceToDdim = other.ServiceToDdim;
				PaidDdim = other.PaidDdim;
				AdjudicationDdim = other.AdjudicationDdim;
				AllowedAmount = other.AllowedAmount;
				BilledAmount = other.BilledAmount;
				CoordinationOfBenefitsAmount = other.CoordinationOfBenefitsAmount;
				CoinsuranceAmount = other.CoinsuranceAmount;
				CopayAmount = other.CopayAmount;
				CoverageChargeAmount = other.CoverageChargeAmount;
				DeductibleAmount = other.DeductibleAmount;
				NotCoveredAmount = other.NotCoveredAmount;
				PPOSavings = other.PPOSavings;
				OtherSavingsGenerated = other.OtherSavingsGenerated;
				PaidAmount = other.PaidAmount;
				MedicalClaimLineDetails = other.MedicalClaimLineDetails;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(MedicalClaimLineNumber, nameof(MedicalClaimLineNumber));
			Requires.Text(MedicalClaimLineNumber, nameof(MedicalClaimLineNumber), true, 0, 25);
			Requires.Text(ProcedureType, nameof(ProcedureType), true, 0, 10);
			Requires.NonNull(ProcedureCode, nameof(ProcedureCode));
			Requires.Text(ProcedureCode, nameof(ProcedureCode), true, 0, 10);
			Requires.Text(ProcedureDescription, nameof(ProcedureDescription), true, 0, 255);
			PartialValidate();
        }
	}

	[Table("MedicalClaims", Schema = "Health")]
	public partial class MedicalClaim : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted, IDontCreate, IPrimaryKey<int>
	{
        public static readonly MedicalClaim[] None = new MedicalClaim[0];

		[InverseProperty("MedicalClaim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MedicalClaimDiagnose> MedicalClaimMedicalClaimDiagnoses { get; set; } = new List<MedicalClaimDiagnose>();

		[InverseProperty("MedicalClaim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MedicalClaimLine> MedicalClaimMedicalClaimLines { get; set; } = new List<MedicalClaimLine>();

		object IPrimaryKey.Key { get { return MedicalClaimId; }}
	
		int IPrimaryKey<int>.Key { get { return MedicalClaimId; }}

		[DisplayName("Medical Claim Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("MedicalClaimId")]
		public int MedicalClaimId { get; set; }

		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		//LinksTo:dbo.Tenants
		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Contact Id")]
		[Column("ContactId")]
		public int? ContactId { get; set; }

		//LinksTo:dbo.Contacts
		[ForeignKey("ContactId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Contact Contact { get; set; }

		/// <summary>
		/// Member ID to display on the application, as sent by client
		/// </summary>
		[Description("Member ID to display on the application, as sent by client")]
		[DisplayName("Member Id")]
		[Column("MemberId")]
		public int MemberId { get; set; }

		//LinksTo:Health.Members
		[ForeignKey("MemberId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Member Member { get; set; }

		[DisplayName("Medical Claim Number")]
		[NotNull]
		[Required]
		[MaxLength(50)]
		[Column("MedicalClaimNumber")]
		public string MedicalClaimNumber { get; set; }

		[DisplayName("Discharge Lid")]
		[Column("DischargeLid")]
		public int? DischargeLid { get; set; }

		//LinksTo:dbo.Lookups
		[ForeignKey("DischargeLid")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Lookup DischargeL { get; set; }

		[DisplayName("Line Items Count")]
		[Column("LineItemsCount")]
		public int LineItemsCount { get; set; }

		[DisplayName("Service From Ddim")]
		[Column("ServiceFromDdim")]
		public int? ServiceFromDdim { get; set; }

		//LinksTo:dbo.DateDimensions
		[ForeignKey("ServiceFromDdim")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension ServiceFromDd { get; set; }

		[DisplayName("Service To Ddim")]
		[Column("ServiceToDdim")]
		public int? ServiceToDdim { get; set; }

		//LinksTo:dbo.DateDimensions
		[ForeignKey("ServiceToDdim")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension ServiceToDd { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} MedicalClaimId={MedicalClaimId} {extras}";
		}

		partial void OnConstructed();
	
		public MedicalClaim()
			: this(null)
		{}

		public MedicalClaim(MedicalClaim other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					MedicalClaimId = other.MedicalClaimId;
				}
				MedicalClaimMedicalClaimDiagnoses = other.MedicalClaimMedicalClaimDiagnoses;
				MedicalClaimMedicalClaimLines = other.MedicalClaimMedicalClaimLines;
				TenantId = other.TenantId;
				ContactId = other.ContactId;
				MemberId = other.MemberId;
				MedicalClaimNumber = other.MedicalClaimNumber;
				DischargeLid = other.DischargeLid;
				LineItemsCount = other.LineItemsCount;
				ServiceFromDdim = other.ServiceFromDdim;
				ServiceToDdim = other.ServiceToDdim;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(MedicalClaimNumber, nameof(MedicalClaimNumber));
			Requires.Text(MedicalClaimNumber, nameof(MedicalClaimNumber), true, 0, 50);
			PartialValidate();
        }
	}

	[Table("Members", Schema = "Health")]
	public partial class Member : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted, IDontCreate, IPrimaryKey<int>
	{
        public static readonly Member[] None = new Member[0];

		[InverseProperty("Member")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MillimanScore> MemberMillimanScores { get; set; } = new List<MillimanScore>();

		[InverseProperty("Member")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Visit> MemberVisits { get; set; } = new List<Visit>();

		[InverseProperty("Member")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Pharmacy> MemberPharmacys { get; set; } = new List<Pharmacy>();

		[InverseProperty("Member")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MedicalClaim> MemberMedicalClaims { get; set; } = new List<MedicalClaim>();

		[InverseProperty("Member")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MedicalClaimLine> MemberMedicalClaimLines { get; set; } = new List<MedicalClaimLine>();

		[InverseProperty("Member")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Participation> MemberParticipations { get; set; } = new List<Participation>();

		[InverseProperty("Member")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Eligibility> MemberEligibilitys { get; set; } = new List<Eligibility>();

		object IPrimaryKey.Key { get { return MemberId; }}
	
		int IPrimaryKey<int>.Key { get { return MemberId; }}

		[DisplayName("Member Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("MemberId")]
		public int MemberId { get; set; }

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		//LinksTo:dbo.Tenants
		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Person Contact Id")]
		[Column("PersonContactId")]
		public int PersonContactId { get; set; }

		//LinksTo:dbo.Contacts
		[ForeignKey("PersonContactId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Contact PersonContact { get; set; }

		[DisplayName("Carrier Contact Id")]
		[Column("CarrierContactId")]
		public int CarrierContactId { get; set; }

		//LinksTo:dbo.Contacts
		[ForeignKey("CarrierContactId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Contact CarrierContact { get; set; }

		[DisplayName("Member Number")]
		[NotNull]
		[Required]
		[MaxLength(50)]
		[Column("MemberNumber")]
		public string MemberNumber { get; set; }

		[DisplayName("Member Relationship Family Number")]
		[NotNull]
		[Required]
		[MaxLength(50)]
		[Column("MemberRelationshipFamilyNumber")]
		public string MemberRelationshipFamilyNumber { get; set; }

		[DisplayName("Member Details")]
		[Column("MemberDetails")]
		public string MemberDetails { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} MemberId={MemberId} {extras}";
		}

		partial void OnConstructed();
	
		public Member()
			: this(null)
		{}

		public Member(Member other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					MemberId = other.MemberId;
				}
				MemberMillimanScores = other.MemberMillimanScores;
				MemberVisits = other.MemberVisits;
				MemberPharmacys = other.MemberPharmacys;
				MemberMedicalClaims = other.MemberMedicalClaims;
				MemberMedicalClaimLines = other.MemberMedicalClaimLines;
				MemberParticipations = other.MemberParticipations;
				MemberEligibilitys = other.MemberEligibilitys;
				TenantId = other.TenantId;
				PersonContactId = other.PersonContactId;
				CarrierContactId = other.CarrierContactId;
				MemberNumber = other.MemberNumber;
				MemberRelationshipFamilyNumber = other.MemberRelationshipFamilyNumber;
				MemberDetails = other.MemberDetails;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(MemberNumber, nameof(MemberNumber));
			Requires.Text(MemberNumber, nameof(MemberNumber), true, 0, 50);
			Requires.NonNull(MemberRelationshipFamilyNumber, nameof(MemberRelationshipFamilyNumber));
			Requires.Text(MemberRelationshipFamilyNumber, nameof(MemberRelationshipFamilyNumber), true, 0, 50);
			PartialValidate();
        }
	}

	[Table("MillimanScores", Schema = "Health")]
	public partial class MillimanScore : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted, IDontCreate, IPrimaryKey<long>
	{
        public static readonly MillimanScore[] None = new MillimanScore[0];

		object IPrimaryKey.Key { get { return MillimanScoreId; }}
	
		long IPrimaryKey<long>.Key { get { return MillimanScoreId; }}

		[DisplayName("Milliman Score Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("MillimanScoreId")]
		public long MillimanScoreId { get; set; }

		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		//LinksTo:dbo.Tenants
		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Contact Id")]
		[Column("ContactId")]
		public int? ContactId { get; set; }

		//LinksTo:dbo.Contacts
		[ForeignKey("ContactId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Contact Contact { get; set; }

		/// <summary>
		/// Member ID to display on the application, as sent by client
		/// </summary>
		[Description("Member ID to display on the application, as sent by client")]
		[DisplayName("Member Id")]
		[Column("MemberId")]
		public int MemberId { get; set; }

		//LinksTo:Health.Members
		[ForeignKey("MemberId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Member Member { get; set; }

		[DisplayName("Score Period Start Ddim")]
		[Column("ScorePeriodStartDdim")]
		public int? ScorePeriodStartDdim { get; set; }

		//LinksTo:dbo.DateDimensions
		[ForeignKey("ScorePeriodStartDdim")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension ScorePeriodStartDd { get; set; }

		[DisplayName("Score Period End Ddim")]
		[Column("ScorePeriodEndDdim")]
		public int ScorePeriodEndDdim { get; set; }

		//LinksTo:dbo.DateDimensions
		[ForeignKey("ScorePeriodEndDdim")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension ScorePeriodEndDd { get; set; }

		[DisplayName("Score Type")]
		[MaxLength(50)]
		[Column("ScoreType")]
		public string ScoreType { get; set; }

		[DisplayName("Inpatient Score")]
		[Column("InpatientScore")]
		public double? InpatientScore { get; set; }

		[DisplayName("Outpatient Score")]
		[Column("OutpatientScore")]
		public double? OutpatientScore { get; set; }

		[DisplayName("Physician Score")]
		[Column("PhysicianScore")]
		public double? PhysicianScore { get; set; }

		[DisplayName("Pharmacy Score")]
		[Column("PharmacyScore")]
		public double? PharmacyScore { get; set; }

		[DisplayName("Medical Score")]
		[Column("MedicalScore")]
		public double? MedicalScore { get; set; }

		[DisplayName("Emergency Room Score")]
		[Column("EmergencyRoomScore")]
		public double? EmergencyRoomScore { get; set; }

		[DisplayName("Other Score")]
		[Column("OtherScore")]
		public double? OtherScore { get; set; }

		[DisplayName("Total Score")]
		[Column("TotalScore")]
		public double? TotalScore { get; set; }

		[DisplayName("Concurrent Inpatient")]
		[Column("ConcurrentInpatient")]
		public double? ConcurrentInpatient { get; set; }

		[DisplayName("Concurrent Outpatient")]
		[Column("ConcurrentOutpatient")]
		public double? ConcurrentOutpatient { get; set; }

		[DisplayName("Concurrent Physician")]
		[Column("ConcurrentPhysician")]
		public double? ConcurrentPhysician { get; set; }

		[DisplayName("Concurrent Pharmacy")]
		[Column("ConcurrentPharmacy")]
		public double? ConcurrentPharmacy { get; set; }

		[DisplayName("Concurrent Medical")]
		[Column("ConcurrentMedical")]
		public double? ConcurrentMedical { get; set; }

		[DisplayName("Concurrent Inpatient Normalized To Group")]
		[Column("ConcurrentInpatientNormalizedToGroup")]
		public double? ConcurrentInpatientNormalizedToGroup { get; set; }

		[DisplayName("Concurrent Outpatient Normalized To Group")]
		[Column("ConcurrentOutpatientNormalizedToGroup")]
		public double? ConcurrentOutpatientNormalizedToGroup { get; set; }

		[DisplayName("Concurrent Physician Normalized To Group")]
		[Column("ConcurrentPhysicianNormalizedToGroup")]
		public double? ConcurrentPhysicianNormalizedToGroup { get; set; }

		[DisplayName("Concurrent Total")]
		[Column("ConcurrentTotal")]
		public double? ConcurrentTotal { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} MillimanScoreId={MillimanScoreId} {extras}";
		}

		partial void OnConstructed();
	
		public MillimanScore()
			: this(null)
		{}

		public MillimanScore(MillimanScore other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					MillimanScoreId = other.MillimanScoreId;
				}
				TenantId = other.TenantId;
				ContactId = other.ContactId;
				MemberId = other.MemberId;
				ScorePeriodStartDdim = other.ScorePeriodStartDdim;
				ScorePeriodEndDdim = other.ScorePeriodEndDdim;
				ScoreType = other.ScoreType;
				InpatientScore = other.InpatientScore;
				OutpatientScore = other.OutpatientScore;
				PhysicianScore = other.PhysicianScore;
				PharmacyScore = other.PharmacyScore;
				MedicalScore = other.MedicalScore;
				EmergencyRoomScore = other.EmergencyRoomScore;
				OtherScore = other.OtherScore;
				TotalScore = other.TotalScore;
				ConcurrentInpatient = other.ConcurrentInpatient;
				ConcurrentOutpatient = other.ConcurrentOutpatient;
				ConcurrentPhysician = other.ConcurrentPhysician;
				ConcurrentPharmacy = other.ConcurrentPharmacy;
				ConcurrentMedical = other.ConcurrentMedical;
				ConcurrentInpatientNormalizedToGroup = other.ConcurrentInpatientNormalizedToGroup;
				ConcurrentOutpatientNormalizedToGroup = other.ConcurrentOutpatientNormalizedToGroup;
				ConcurrentPhysicianNormalizedToGroup = other.ConcurrentPhysicianNormalizedToGroup;
				ConcurrentTotal = other.ConcurrentTotal;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.Text(ScoreType, nameof(ScoreType), true, 0, 50);
			PartialValidate();
        }
	}

	[Table("Participation", Schema = "Health")]
	public partial class Participation : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted, IDontCreate, IPrimaryKey<int>
	{
        public static readonly Participation[] None = new Participation[0];

		object IPrimaryKey.Key { get { return ParticipationId; }}
	
		int IPrimaryKey<int>.Key { get { return ParticipationId; }}

		[DisplayName("Participation Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("ParticipationId")]
		public int ParticipationId { get; set; }

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		//LinksTo:dbo.Tenants
		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Contact Id")]
		[Column("ContactId")]
		public int? ContactId { get; set; }

		//LinksTo:dbo.Contacts
		[ForeignKey("ContactId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Contact Contact { get; set; }

		[DisplayName("Member Id")]
		[Column("MemberId")]
		public int MemberId { get; set; }

		//LinksTo:Health.Members
		[ForeignKey("MemberId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Member Member { get; set; }

		[DisplayName("Program Type Code")]
		[NotNull]
		[Required]
		[MaxLength(50)]
		[Column("ProgramTypeCode")]
		public string ProgramTypeCode { get; set; }

		[DisplayName("Program Status")]
		[MaxLength(20)]
		[Column("ProgramStatus")]
		public string ProgramStatus { get; set; }

		[DisplayName("Program Code Lid")]
		[Column("ProgramCodeLid")]
		public int? ProgramCodeLid { get; set; }

		//LinksTo:dbo.Lookups
		[ForeignKey("ProgramCodeLid")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Lookup ProgramCodeL { get; set; }

		[DisplayName("Program Start Ddim")]
		[Column("ProgramStartDdim")]
		public int? ProgramStartDdim { get; set; }

		//LinksTo:dbo.DateDimensions
		[ForeignKey("ProgramStartDdim")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension ProgramStartDd { get; set; }

		[DisplayName("Program End Ddim")]
		[Column("ProgramEndDdim")]
		public int? ProgramEndDdim { get; set; }

		//LinksTo:dbo.DateDimensions
		[ForeignKey("ProgramEndDdim")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension ProgramEndDd { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} ParticipationId={ParticipationId} {extras}";
		}

		partial void OnConstructed();
	
		public Participation()
			: this(null)
		{}

		public Participation(Participation other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					ParticipationId = other.ParticipationId;
				}
				TenantId = other.TenantId;
				ContactId = other.ContactId;
				MemberId = other.MemberId;
				ProgramTypeCode = other.ProgramTypeCode;
				ProgramStatus = other.ProgramStatus;
				ProgramCodeLid = other.ProgramCodeLid;
				ProgramStartDdim = other.ProgramStartDdim;
				ProgramEndDdim = other.ProgramEndDdim;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(ProgramTypeCode, nameof(ProgramTypeCode));
			Requires.Text(ProgramTypeCode, nameof(ProgramTypeCode), true, 0, 50);
			Requires.Text(ProgramStatus, nameof(ProgramStatus), true, 0, 20);
			PartialValidate();
        }
	}

	[Table("Pharmacy", Schema = "Health")]
	public partial class Pharmacy : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted, IDontCreate, IPrimaryKey<int>
	{
        public static readonly Pharmacy[] None = new Pharmacy[0];

		object IPrimaryKey.Key { get { return PharmacyId; }}
	
		int IPrimaryKey<int>.Key { get { return PharmacyId; }}

		[DisplayName("Pharmacy Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("PharmacyId")]
		public int PharmacyId { get; set; }

		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		//LinksTo:dbo.Tenants
		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Contact Id")]
		[Column("ContactId")]
		public int ContactId { get; set; }

		//LinksTo:dbo.Contacts
		[ForeignKey("ContactId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Contact Contact { get; set; }

		/// <summary>
		/// Member ID to display on the application, as sent by client
		/// </summary>
		[Description("Member ID to display on the application, as sent by client")]
		[DisplayName("Member Id")]
		[Column("MemberId")]
		public int MemberId { get; set; }

		//LinksTo:Health.Members
		[ForeignKey("MemberId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Member Member { get; set; }

		[DisplayName("Prescriber Provider Contact Id")]
		[Column("PrescriberProviderContactId")]
		public int PrescriberProviderContactId { get; set; }

		//LinksTo:dbo.Contacts
		[ForeignKey("PrescriberProviderContactId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Contact PrescriberProviderContact { get; set; }

		[DisplayName("Transaction Number")]
		[NotNull]
		[Required]
		[MaxLength(80)]
		[Column("TransactionNumber")]
		public string TransactionNumber { get; set; }

		[DisplayName("National Drug Code Package Id")]
		[Column("NationalDrugCodePackageId")]
		public int? NationalDrugCodePackageId { get; set; }

		//LinksTo:NationalDrugCode.Packages
		[ForeignKey("NationalDrugCodePackageId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Package NationalDrugCodePackage { get; set; }

		/// <summary>
		/// date prescription was written
		/// </summary>
		[Description("date prescription was written")]
		[DisplayName("Prescription Written Ddim")]
		[Column("PrescriptionWrittenDdim")]
		public int PrescriptionWrittenDdim { get; set; }

		//LinksTo:dbo.DateDimensions
		[ForeignKey("PrescriptionWrittenDdim")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension PrescriptionWrittenDd { get; set; }

		/// <summary>
		/// date prescription was filled
		/// </summary>
		[Description("date prescription was filled")]
		[DisplayName("Prescription Filled Ddim")]
		[Column("PrescriptionFilledDdim")]
		public int PrescriptionFilledDdim { get; set; }

		//LinksTo:dbo.DateDimensions
		[ForeignKey("PrescriptionFilledDdim")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension PrescriptionFilledDd { get; set; }

		/// <summary>
		/// date of service
		/// </summary>
		[Description("date of service")]
		[DisplayName("Service Ddim")]
		[Column("ServiceDdim")]
		public int ServiceDdim { get; set; }

		//LinksTo:dbo.DateDimensions
		[ForeignKey("ServiceDdim")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension ServiceDd { get; set; }

		/// <summary>
		/// date of payment
		/// </summary>
		[Description("date of payment")]
		[DisplayName("Paid Ddim")]
		[Column("PaidDdim")]
		public int PaidDdim { get; set; }

		//LinksTo:dbo.DateDimensions
		[ForeignKey("PaidDdim")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension PaidDd { get; set; }

		/// <summary>
		/// Amount allowed under contract
		/// </summary>
		[Description("Amount allowed under contract")]
		[DisplayName("Allowed Amt")]
		[Column("AllowedAmt")]
		public decimal? AllowedAmt { get; set; }

		/// <summary>
		/// Gross charges
		/// </summary>
		[Description("Gross charges")]
		[DisplayName("Billed Amt")]
		[Column("BilledAmt")]
		public decimal? BilledAmt { get; set; }

		/// <summary>
		/// Coinsurance due from patient
		/// </summary>
		[Description("Coinsurance due from patient")]
		[DisplayName("Coinsurance Amt")]
		[Column("CoinsuranceAmt")]
		public decimal? CoinsuranceAmt { get; set; }

		/// <summary>
		/// Amount collected from the patient as a co-payment.
		/// </summary>
		[Description("Amount collected from the patient as a co-payment.")]
		[DisplayName("Copay Amt")]
		[Column("CopayAmt")]
		public decimal? CopayAmt { get; set; }

		/// <summary>
		/// Deductible Portion of the Allowed Amount
		/// </summary>
		[Description("Deductible Portion of the Allowed Amount")]
		[DisplayName("Deductible Amt")]
		[Column("DeductibleAmt")]
		public decimal? DeductibleAmt { get; set; }

		/// <summary>
		/// Dispensing Fee textged by the Pharmacy to the PBM
		/// </summary>
		[Description("Dispensing Fee textged by the Pharmacy to the PBM")]
		[DisplayName("Dispensing Fee Amt")]
		[Column("DispensingFeeAmt")]
		public decimal? DispensingFeeAmt { get; set; }

		/// <summary>
		/// Cost of ingredients
		/// </summary>
		[Description("Cost of ingredients")]
		[DisplayName("Ingredients Cost Amt")]
		[Column("IngredientsCostAmt")]
		public decimal? IngredientsCostAmt { get; set; }

		/// <summary>
		/// State Tax Paid
		/// </summary>
		[Description("State Tax Paid")]
		[DisplayName("State Tax Amt")]
		[Column("StateTaxAmt")]
		public decimal? StateTaxAmt { get; set; }

		/// <summary>
		/// Usual and Customary Fee
		/// </summary>
		[Description("Usual and Customary Fee")]
		[DisplayName("Usual Customary Fee Amt")]
		[Column("UsualCustomaryFeeAmt")]
		public decimal? UsualCustomaryFeeAmt { get; set; }

		/// <summary>
		/// Amount paid
		/// </summary>
		[Description("Amount paid")]
		[DisplayName("Paid Amt")]
		[Column("PaidAmt")]
		public decimal? PaidAmt { get; set; }

		[DisplayName("Pharmacy Details")]
		[Column("PharmacyDetails")]
		public string PharmacyDetails { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} PharmacyId={PharmacyId} {extras}";
		}

		partial void OnConstructed();
	
		public Pharmacy()
			: this(null)
		{}

		public Pharmacy(Pharmacy other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					PharmacyId = other.PharmacyId;
				}
				TenantId = other.TenantId;
				ContactId = other.ContactId;
				MemberId = other.MemberId;
				PrescriberProviderContactId = other.PrescriberProviderContactId;
				TransactionNumber = other.TransactionNumber;
				NationalDrugCodePackageId = other.NationalDrugCodePackageId;
				PrescriptionWrittenDdim = other.PrescriptionWrittenDdim;
				PrescriptionFilledDdim = other.PrescriptionFilledDdim;
				ServiceDdim = other.ServiceDdim;
				PaidDdim = other.PaidDdim;
				AllowedAmt = other.AllowedAmt;
				BilledAmt = other.BilledAmt;
				CoinsuranceAmt = other.CoinsuranceAmt;
				CopayAmt = other.CopayAmt;
				DeductibleAmt = other.DeductibleAmt;
				DispensingFeeAmt = other.DispensingFeeAmt;
				IngredientsCostAmt = other.IngredientsCostAmt;
				StateTaxAmt = other.StateTaxAmt;
				UsualCustomaryFeeAmt = other.UsualCustomaryFeeAmt;
				PaidAmt = other.PaidAmt;
				PharmacyDetails = other.PharmacyDetails;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(TransactionNumber, nameof(TransactionNumber));
			Requires.Text(TransactionNumber, nameof(TransactionNumber), true, 0, 80);
			PartialValidate();
        }
	}

	[Table("QualityMetrics", Schema = "Health")]
	public partial class QualityMetric : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted, IDontCreate, IPrimaryKey<int>
	{
        public static readonly QualityMetric[] None = new QualityMetric[0];

		object IPrimaryKey.Key { get { return QualityMetricId; }}
	
		int IPrimaryKey<int>.Key { get { return QualityMetricId; }}

		[DisplayName("Quality Metric Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("QualityMetricId")]
		public int QualityMetricId { get; set; }

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		//LinksTo:dbo.Tenants
		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Contact Id")]
		[Column("ContactId")]
		public int? ContactId { get; set; }

		//LinksTo:dbo.Contacts
		[ForeignKey("ContactId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Contact Contact { get; set; }

		[DisplayName("Measure From Ddim")]
		[Column("MeasureFromDdim")]
		public int? MeasureFromDdim { get; set; }

		//LinksTo:dbo.DateDimensions
		[ForeignKey("MeasureFromDdim")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension MeasureFromDd { get; set; }

		[DisplayName("Measure To Ddim")]
		[Column("MeasureToDdim")]
		public int? MeasureToDdim { get; set; }

		//LinksTo:dbo.DateDimensions
		[ForeignKey("MeasureToDdim")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension MeasureToDd { get; set; }

		[DisplayName("Quality Metric Type Lid")]
		[Column("QualityMetricTypeLid")]
		public int QualityMetricTypeLid { get; set; }

		//LinksTo:dbo.Lookups
		[ForeignKey("QualityMetricTypeLid")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Lookup QualityMetricTypeL { get; set; }

		[DisplayName("Positive")]
		[Column("Positive")]
		public bool Positive { get; set; }

		[DisplayName("Numerator")]
		[Column("Numerator")]
		public double Numerator { get; set; }

		[DisplayName("Denominator")]
		[Column("Denominator")]
		public double Denominator { get; set; }

		[DisplayName("Value")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("Value")]
		public double Value { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} QualityMetricId={QualityMetricId} {extras}";
		}

		partial void OnConstructed();
	
		public QualityMetric()
			: this(null)
		{}

		public QualityMetric(QualityMetric other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					QualityMetricId = other.QualityMetricId;
				}
				TenantId = other.TenantId;
				ContactId = other.ContactId;
				MeasureFromDdim = other.MeasureFromDdim;
				MeasureToDdim = other.MeasureToDdim;
				QualityMetricTypeLid = other.QualityMetricTypeLid;
				Positive = other.Positive;
				Numerator = other.Numerator;
				Denominator = other.Denominator;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			PartialValidate();
        }
	}

	[Table("Visits", Schema = "Health")]
	public partial class Visit : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted, IDontCreate, IPrimaryKey<int>
	{
        public static readonly Visit[] None = new Visit[0];

		[InverseProperty("Visit")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MedicalClaimLine> VisitMedicalClaimLines { get; set; } = new List<MedicalClaimLine>();

		object IPrimaryKey.Key { get { return VisitId; }}
	
		int IPrimaryKey<int>.Key { get { return VisitId; }}

		[DisplayName("Visit Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("VisitId")]
		public int VisitId { get; set; }

		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		//LinksTo:dbo.Tenants
		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Contact Id")]
		[Column("ContactId")]
		public int? ContactId { get; set; }

		//LinksTo:dbo.Contacts
		[ForeignKey("ContactId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Contact Contact { get; set; }

		/// <summary>
		/// Member ID to display on the application, as sent by client
		/// </summary>
		[Description("Member ID to display on the application, as sent by client")]
		[DisplayName("Member Id")]
		[Column("MemberId")]
		public int MemberId { get; set; }

		//LinksTo:Health.Members
		[ForeignKey("MemberId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Member Member { get; set; }

		[DisplayName("Foreign Id")]
		[MaxLength(50)]
		[Column("ForeignId")]
		public string ForeignId { get; set; }

		[DisplayName("Visit Type")]
		[MaxLength(50)]
		[Column("VisitType")]
		public string VisitType { get; set; }

		[DisplayName("Visit Start Ddim")]
		[Column("VisitStartDdim")]
		public int VisitStartDdim { get; set; }

		//LinksTo:dbo.DateDimensions
		[ForeignKey("VisitStartDdim")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension VisitStartDd { get; set; }

		[DisplayName("Visit End Ddim")]
		[Column("VisitEndDdim")]
		public int VisitEndDdim { get; set; }

		//LinksTo:dbo.DateDimensions
		[ForeignKey("VisitEndDdim")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension VisitEndDd { get; set; }

		[DisplayName("Inpatient Days")]
		[Column("InpatientDays")]
		public int InpatientDays { get; set; }

		[DisplayName("Admission Type")]
		[MaxLength(55)]
		[Column("AdmissionType")]
		public string AdmissionType { get; set; }

		[DisplayName("Admission From Emergency Room")]
		[Column("AdmissionFromEmergencyRoom")]
		public bool AdmissionFromEmergencyRoom { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} VisitId={VisitId} {extras}";
		}

		partial void OnConstructed();
	
		public Visit()
			: this(null)
		{}

		public Visit(Visit other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					VisitId = other.VisitId;
				}
				VisitMedicalClaimLines = other.VisitMedicalClaimLines;
				TenantId = other.TenantId;
				ContactId = other.ContactId;
				MemberId = other.MemberId;
				ForeignId = other.ForeignId;
				VisitType = other.VisitType;
				VisitStartDdim = other.VisitStartDdim;
				VisitEndDdim = other.VisitEndDdim;
				InpatientDays = other.InpatientDays;
				AdmissionType = other.AdmissionType;
				AdmissionFromEmergencyRoom = other.AdmissionFromEmergencyRoom;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.Text(ForeignId, nameof(ForeignId), true, 0, 50);
			Requires.Text(VisitType, nameof(VisitType), true, 0, 50);
			Requires.Text(AdmissionType, nameof(AdmissionType), true, 0, 55);
			PartialValidate();
        }
	}

	[Table("ICD10", Schema = "InternationalClassificationDiseases")]
	public partial class ICD10 : IRdbDataEntity, IValidate, IPreSave
	{
        public static readonly ICD10[] None = new ICD10[0];

		[InverseProperty("Icd10")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MedicalClaimDiagnose> Icd10MedicalClaimDiagnoses { get; set; } = new List<MedicalClaimDiagnose>();

		[DisplayName("Icd10 Id")]
		[Key]
		[Column("Icd10Id")]
		public int Icd10Id { get; set; }

		[DisplayName("Parent Icd10 Id")]
		[Column("ParentIcd10Id")]
		public int? ParentIcd10Id { get; set; }

		[DisplayName("Diagnosis Code")]
		[NotNull]
		[Required]
		[MaxLength(16)]
		[Column("DiagnosisCode")]
		public string DiagnosisCode { get; set; }

		[DisplayName("Diagnosis Description")]
		[NotNull]
		[Required]
		[MaxLength(255)]
		[Column("DiagnosisDescription")]
		public string DiagnosisDescription { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public ICD10()
			: this(null)
		{}

		public ICD10(ICD10 other, bool copyKey=false)
		{
			if (other!=null)
			{
				Icd10MedicalClaimDiagnoses = other.Icd10MedicalClaimDiagnoses;
				Icd10Id = other.Icd10Id;
				ParentIcd10Id = other.ParentIcd10Id;
				DiagnosisCode = other.DiagnosisCode;
				DiagnosisDescription = other.DiagnosisDescription;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(DiagnosisCode, nameof(DiagnosisCode));
			Requires.Text(DiagnosisCode, nameof(DiagnosisCode), true, 0, 16);
			Requires.NonNull(DiagnosisDescription, nameof(DiagnosisDescription));
			Requires.Text(DiagnosisDescription, nameof(DiagnosisDescription), true, 0, 255);
			PartialValidate();
        }
	}

	[Table("Countries", Schema = "ISO3166")]
	public partial class Country : IRdbDataEntity, IValidate, IPreSave, IDontCreate
	{
        public static readonly Country[] None = new Country[0];

		[DisplayName("Country Id")]
		[Key]
		[Column("CountryId")]
		public int CountryId { get; set; }

		[DisplayName("Country Name")]
		[NotNull]
		[Required]
		[MaxLength(100)]
		[Column("CountryName")]
		public string CountryName { get; set; }

		[DisplayName("Alpha2")]
		[Column("Alpha2")]
		public char Alpha2 { get; set; }

		[DisplayName("Alpha3")]
		[Column("Alpha3")]
		public char Alpha3 { get; set; }

		[DisplayName("Numeric Code")]
		[Column("NumericCode")]
		public char NumericCode { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public Country()
			: this(null)
		{}

		public Country(Country other, bool copyKey=false)
		{
			if (other!=null)
			{
				CountryId = other.CountryId;
				CountryName = other.CountryName;
				Alpha2 = other.Alpha2;
				Alpha3 = other.Alpha3;
				NumericCode = other.NumericCode;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(CountryName, nameof(CountryName));
			Requires.Text(CountryName, nameof(CountryName), true, 0, 100);
			PartialValidate();
        }
	}

	[Table("ReportMetaData", Schema = "Joint")]
	public partial class ReportMetaData : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted
	{
        public static readonly ReportMetaData[] None = new ReportMetaData[0];

		[DisplayName("Report Meta Data Id")]
		[Key]
		[Column("ReportMetaDataId")]
		public int ReportMetaDataId { get; set; }

		[DisplayName("External Report Key")]
		[NotNull]
		[Required]
		[MaxLength(2000)]
		[Column("ExternalReportKey")]
		public string ExternalReportKey { get; set; }

		[DisplayName("Parent Report Meta Data Id")]
		[Column("ParentReportMetaDataId")]
		public int? ParentReportMetaDataId { get; set; }

		[DisplayName("Owner Contact Id")]
		[Column("OwnerContactId")]
		public long? OwnerContactId { get; set; }

		/// <summary>
		/// Datetime when this entity was created.
		/// </summary>
		[Description("Datetime when this entity was created.")]
		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Report Details")]
		partial void OnReportDetailsDeserialized();

        [NotMapped]
        public Traffk.Bal.ReportVisuals.ReportDetails ReportDetails
        {
            get
            {
                if (ReportDetails_p == null)
                {
                    ReportDetails_p = Traffk.Bal.ReportVisuals.ReportDetails.CreateFromJson(ReportDetailsJson) ?? new Traffk.Bal.ReportVisuals.ReportDetails();
					OnReportDetailsDeserialized();
                }
                return ReportDetails_p;
            }
            set { ReportDetails_p = value; }
        }
        private Traffk.Bal.ReportVisuals.ReportDetails ReportDetails_p;

		[NotNull]
		[Required]
		[Column("ReportDetails")]
		public string ReportDetailsJson { get; set; }

		/// <summary>
		/// Foreign key to the tenant that owns this account
		/// </summary>
		[Description("Foreign key to the tenant that owns this account")]
		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public ReportMetaData()
			: this(null)
		{}

		public ReportMetaData(ReportMetaData other, bool copyKey=false)
		{
			if (other!=null)
			{
				ReportMetaDataId = other.ReportMetaDataId;
				ExternalReportKey = other.ExternalReportKey;
				ParentReportMetaDataId = other.ParentReportMetaDataId;
				OwnerContactId = other.OwnerContactId;
				ReportDetailsJson = other.ReportDetailsJson;
				TenantId = other.TenantId;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
            if (ReportDetails_p != null)
            {
				var json = ReportDetails_p.ToJson();
				if (ReportDetailsJson != json)
				{
					ReportDetailsJson = json;
				}				 
            }
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(ExternalReportKey, nameof(ExternalReportKey));
			Requires.Text(ExternalReportKey, nameof(ExternalReportKey), true, 0, 2000);
			Requires.NonNull(ReportDetailsJson, nameof(ReportDetailsJson));
			PartialValidate();
        }
	}

	[Table("Labelers", Schema = "NationalDrugCode")]
	public partial class Labeler : IRdbDataEntity, IValidate, IPreSave, IDontCreate
	{
        public static readonly Labeler[] None = new Labeler[0];

		[InverseProperty("Labeler")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Product> LabelerProducts { get; set; } = new List<Product>();

		[DisplayName("Labeler Id")]
		[Key]
		[Column("LabelerId")]
		public int LabelerId { get; set; }

		[DisplayName("Labeler Code")]
		[NotNull]
		[Required]
		[MaxLength(10)]
		[Column("LabelerCode")]
		public string LabelerCode { get; set; }

		[DisplayName("Labeler Name")]
		[MaxLength(255)]
		[Column("LabelerName")]
		public string LabelerName { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public Labeler()
			: this(null)
		{}

		public Labeler(Labeler other, bool copyKey=false)
		{
			if (other!=null)
			{
				LabelerProducts = other.LabelerProducts;
				LabelerId = other.LabelerId;
				LabelerCode = other.LabelerCode;
				LabelerName = other.LabelerName;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(LabelerCode, nameof(LabelerCode));
			Requires.Text(LabelerCode, nameof(LabelerCode), true, 0, 10);
			Requires.Text(LabelerName, nameof(LabelerName), true, 0, 255);
			PartialValidate();
        }
	}

	[Table("Packages", Schema = "NationalDrugCode")]
	public partial class Package : IRdbDataEntity, IValidate, IPreSave, IDontCreate
	{
        public static readonly Package[] None = new Package[0];

		[InverseProperty("NationalDrugCodePackage")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Pharmacy> NationalDrugCodePackagePharmacys { get; set; } = new List<Pharmacy>();

		[DisplayName("Package Id")]
		[Key]
		[Column("PackageId")]
		public int PackageId { get; set; }

		[DisplayName("Productid")]
		[Column("Productid")]
		public int Productid { get; set; }

		/// <summary>
		/// The labeler code and product code segments of the National Drug Code number, separated by a hyphen. Asterisks are no longer used or included within the product code segment to indicate certain configurations of the NDC.
		/// </summary>
		[Description("The labeler code and product code segments of the National Drug Code number, separated by a hyphen. Asterisks are no longer used or included within the product code segment to indicate certain configurations of the NDC.")]
		[DisplayName("Product NDC")]
		[NotNull]
		[Required]
		[MaxLength(16)]
		[Column("ProductNDC")]
		public string ProductNDC { get; set; }

		/// <summary>
		/// The labeler code, product code, and package code segments of the National Drug Code number, separated by hyphens. Asterisks are no longer used or included within the product and package code segments to indicate certain configurations of the NDC.
		/// </summary>
		[Description("The labeler code, product code, and package code segments of the National Drug Code number, separated by hyphens. Asterisks are no longer used or included within the product and package code segments to indicate certain configurations of the NDC.")]
		[DisplayName("NDCPackage Code")]
		[NotNull]
		[Required]
		[MaxLength(16)]
		[Column("NDCPackageCode")]
		public string NDCPackageCode { get; set; }

		/// <summary>
		/// A description of the size and type of packaging in sentence form. Multilevel packages will have the descriptions concatenated together.  For example: 4 BOTTLES in 1 CARTON/100 TABLETS in 1 BOTTLE.
		/// </summary>
		[Description("A description of the size and type of packaging in sentence form. Multilevel packages will have the descriptions concatenated together.  For example: 4 BOTTLES in 1 CARTON/100 TABLETS in 1 BOTTLE.")]
		[DisplayName("Package Description")]
		[NotNull]
		[Required]
		[Column("PackageDescription")]
		public string PackageDescription { get; set; }

		[DisplayName("Cms Code")]
		[MaxLength(8000)]
		[Column("CmsCode")]
		public string CmsCode { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public Package()
			: this(null)
		{}

		public Package(Package other, bool copyKey=false)
		{
			if (other!=null)
			{
				NationalDrugCodePackagePharmacys = other.NationalDrugCodePackagePharmacys;
				PackageId = other.PackageId;
				Productid = other.Productid;
				ProductNDC = other.ProductNDC;
				NDCPackageCode = other.NDCPackageCode;
				PackageDescription = other.PackageDescription;
				CmsCode = other.CmsCode;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(ProductNDC, nameof(ProductNDC));
			Requires.Text(ProductNDC, nameof(ProductNDC), true, 0, 16);
			Requires.NonNull(NDCPackageCode, nameof(NDCPackageCode));
			Requires.Text(NDCPackageCode, nameof(NDCPackageCode), true, 0, 16);
			Requires.NonNull(PackageDescription, nameof(PackageDescription));
			Requires.Text(CmsCode, nameof(CmsCode), true, 0, 8000);
			PartialValidate();
        }
	}

	[Table("Products", Schema = "NationalDrugCode")]
	public partial class Product : IRdbDataEntity, IValidate, IPreSave, IDontCreate
	{
        public static readonly Product[] None = new Product[0];

		[DisplayName("Product Id")]
		[Key]
		[Column("ProductId")]
		public int ProductId { get; set; }

		[DisplayName("Labeler Id")]
		[Column("LabelerId")]
		public int LabelerId { get; set; }

		//LinksTo:NationalDrugCode.Labelers
		[ForeignKey("LabelerId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Labeler Labeler { get; set; }

		/// <summary>
		/// ProductUID is a concatenation of the NDCproduct code and SPL documentID. It is included to help prevent duplicate rows from appearing when joining the product and package files together.  It has no regulatory value or significance.
		/// </summary>
		[Description("ProductUID is a concatenation of the NDCproduct code and SPL documentID. It is included to help prevent duplicate rows from appearing when joining the product and package files together.  It has no regulatory value or significance.")]
		[DisplayName("Product Uid")]
		[NotNull]
		[Required]
		[MaxLength(50)]
		[Column("ProductUid")]
		public string ProductUid { get; set; }

		/// <summary>
		/// The labeler code and product code segments of the National Drug Code number, separated by a hyphen. Asterisks are no longer used or included within the product code segment to indicate certain configurations of the NDC.
		/// </summary>
		[Description("The labeler code and product code segments of the National Drug Code number, separated by a hyphen. Asterisks are no longer used or included within the product code segment to indicate certain configurations of the NDC.")]
		[DisplayName("Product NDC")]
		[NotNull]
		[Required]
		[MaxLength(16)]
		[Column("ProductNDC")]
		public string ProductNDC { get; set; }

		/// <summary>
		/// Indicates the type of product, such as Human Prescription Drug or Human OTC Drug. This data element corresponds to the "Document Type" of the SPL submission for the listing. The complete list of codes and translations can be found at
		/// </summary>
		[Description("Indicates the type of product, such as Human Prescription Drug or Human OTC Drug. This data element corresponds to the \"Document Type\" of the SPL submission for the listing. The complete list of codes and translations can be found at")]
		[DisplayName("Product Type Name")]
		[MaxLength(64)]
		[Column("ProductTypeName")]
		public string ProductTypeName { get; set; }

		/// <summary>
		/// Also known as the trade name. It is the name of the product chosen by the labeler.
		/// </summary>
		[Description("Also known as the trade name. It is the name of the product chosen by the labeler.")]
		[DisplayName("Proprietary Name")]
		[MaxLength(1024)]
		[Column("ProprietaryName")]
		public string ProprietaryName { get; set; }

		/// <summary>
		/// A suffix to the proprietary name, a value here should be appended to the ProprietaryName field to obtain the complete name of the product. This suffix is often used to distinguish characteristics of a product such as extended release (“XR”) or sleep aid (“PM”). Although many companies follow certain naming conventions for suffices, there is no recognized standard.
		/// </summary>
		[Description("A suffix to the proprietary name, a value here should be appended to the ProprietaryName field to obtain the complete name of the product. This suffix is often used to distinguish characteristics of a product such as extended release (“XR”) or sleep aid (“PM”). Although many companies follow certain naming conventions for suffices, there is no recognized standard.")]
		[DisplayName("Proprietary Name Suffix")]
		[MaxLength(255)]
		[Column("ProprietaryNameSuffix")]
		public string ProprietaryNameSuffix { get; set; }

		/// <summary>
		/// Sometimes called the generic name, this is usually the active ingredient(s) of the product.
		/// </summary>
		[Description("Sometimes called the generic name, this is usually the active ingredient(s) of the product.")]
		[DisplayName("Non Proprietary Name")]
		[MaxLength(1024)]
		[Column("NonProprietaryName")]
		public string NonProprietaryName { get; set; }

		/// <summary>
		/// The translation of the DosageForm Code submitted by the firm. The complete list of codes and translations can be found www.fda.gov/edrls under Structured Product Labeling Resources.
		/// </summary>
		[Description("The translation of the DosageForm Code submitted by the firm. The complete list of codes and translations can be found www.fda.gov/edrls under Structured Product Labeling Resources.")]
		[DisplayName("Dosage Form Name")]
		[MaxLength(64)]
		[Column("DosageFormName")]
		public string DosageFormName { get; set; }

		/// <summary>
		/// The translation of the Route Code submitted by the firm, indicating route of administration. The complete list of codes and translations can be found at www.fda.gov/edrls under Structured Product Labeling Resources.
		/// </summary>
		[Description("The translation of the Route Code submitted by the firm, indicating route of administration. The complete list of codes and translations can be found at www.fda.gov/edrls under Structured Product Labeling Resources.")]
		[DisplayName("Route Name")]
		[MaxLength(255)]
		[Column("RouteName")]
		public string RouteName { get; set; }

		/// <summary>
		/// This is the date that the labeler indicates was the start of its marketing of the drug product.
		/// </summary>
		[Description("This is the date that the labeler indicates was the start of its marketing of the drug product.")]
		[DisplayName("Start Marketing Date")]
		[Column("StartMarketingDate")]
		public DateTime? StartMarketingDate { get; set; }

		/// <summary>
		/// This is the date the product will no longer be available on the market. If a product is no longer being manufactured, in most cases, the FDA recommends firms use the expiration date of the last lot produced as the EndMarketingDate, to reflect the potential for drug product to remain available after manufacturing has ceased. Products that are the subject of ongoing manufacturing will not ordinarily have any EndMarketingDate. Products with a value in the EndMarketingDate will be removed from the NDC Directory when the EndMarketingDate is reached.
		/// </summary>
		[Description("This is the date the product will no longer be available on the market. If a product is no longer being manufactured, in most cases, the FDA recommends firms use the expiration date of the last lot produced as the EndMarketingDate, to reflect the potential for drug product to remain available after manufacturing has ceased. Products that are the subject of ongoing manufacturing will not ordinarily have any EndMarketingDate. Products with a value in the EndMarketingDate will be removed from the NDC Directory when the EndMarketingDate is reached.")]
		[DisplayName("End Marketing Date")]
		[Column("EndMarketingDate")]
		public DateTime? EndMarketingDate { get; set; }

		/// <summary>
		/// Product types are broken down into several potential Marketing Categories, such as NDA/ANDA/BLA, OTC Monograph, or Unapproved Drug. One and only one Marketing Category may be chosen for a product, not all marketing categories are available to all product types. Currently, only final marketed product categories are included.  The complete list of codes and translations can be found at www.fda.gov/edrls under Structured Product Labeling Resources.
		/// </summary>
		[Description("Product types are broken down into several potential Marketing Categories, such as NDA/ANDA/BLA, OTC Monograph, or Unapproved Drug. One and only one Marketing Category may be chosen for a product, not all marketing categories are available to all product types. Currently, only final marketed product categories are included.  The complete list of codes and translations can be found at www.fda.gov/edrls under Structured Product Labeling Resources.")]
		[DisplayName("Marketing Category Name")]
		[MaxLength(64)]
		[Column("MarketingCategoryName")]
		public string MarketingCategoryName { get; set; }

		/// <summary>
		/// This corresponds to the NDA, ANDA, or BLA number reported by the labeler for products which have the corresponding Marketing Category designated. If the designated Marketing Category is OTC Monograph Final or OTC Monograph Not Final, then the Application number will be the CFR citation corresponding to the appropriate Monograph (e.g. “part 341”). For unapproved drugs, this field will be null.
		/// </summary>
		[Description("This corresponds to the NDA, ANDA, or BLA number reported by the labeler for products which have the corresponding Marketing Category designated. If the designated Marketing Category is OTC Monograph Final or OTC Monograph Not Final, then the Application number will be the CFR citation corresponding to the appropriate Monograph (e.g. “part 341”). For unapproved drugs, this field will be null.")]
		[DisplayName("Application Number")]
		[MaxLength(11)]
		[Column("ApplicationNumber")]
		public string ApplicationNumber { get; set; }

		/// <summary>
		/// This is the active ingredient list. Each ingredient name is the preferred term of the UNII code submitted.
		/// </summary>
		[Description("This is the active ingredient list. Each ingredient name is the preferred term of the UNII code submitted.")]
		[DisplayName("Substance Name")]
		[Column("SubstanceName")]
		public string SubstanceName { get; set; }

		/// <summary>
		/// These are the strength values (to be used with units below) of each active ingredient, listed in the same order as the SubstanceName field above.
		/// </summary>
		[Description("These are the strength values (to be used with units below) of each active ingredient, listed in the same order as the SubstanceName field above.")]
		[DisplayName("Strength Number")]
		[MaxLength(4000)]
		[Column("StrengthNumber")]
		public string StrengthNumber { get; set; }

		/// <summary>
		/// These are the units to be used with the strength values above, listed in the same order as the SubstanceName and SubstanceNumber.
		/// </summary>
		[Description("These are the units to be used with the strength values above, listed in the same order as the SubstanceName and SubstanceNumber.")]
		[DisplayName("Strength Unit")]
		[MaxLength(4000)]
		[Column("StrengthUnit")]
		public string StrengthUnit { get; set; }

		/// <summary>
		/// These are the reported pharmacological class categories corresponding to the SubstanceNames listed above.
		/// </summary>
		[Description("These are the reported pharmacological class categories corresponding to the SubstanceNames listed above.")]
		[DisplayName("Pharm Classes")]
		[Column("PharmClasses")]
		public string PharmClasses { get; set; }

		/// <summary>
		/// This is the assigned DEA Schedule number as reported by the labeler. Values are CI, CII, CIII, CIV, and CV.
		/// </summary>
		[Description("This is the assigned DEA Schedule number as reported by the labeler. Values are CI, CII, CIII, CIV, and CV.")]
		[DisplayName("DEASchedule")]
		[MaxLength(4)]
		[Column("DEASchedule")]
		public string DEASchedule { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public Product()
			: this(null)
		{}

		public Product(Product other, bool copyKey=false)
		{
			if (other!=null)
			{
				ProductId = other.ProductId;
				LabelerId = other.LabelerId;
				ProductUid = other.ProductUid;
				ProductNDC = other.ProductNDC;
				ProductTypeName = other.ProductTypeName;
				ProprietaryName = other.ProprietaryName;
				ProprietaryNameSuffix = other.ProprietaryNameSuffix;
				NonProprietaryName = other.NonProprietaryName;
				DosageFormName = other.DosageFormName;
				RouteName = other.RouteName;
				StartMarketingDate = other.StartMarketingDate;
				EndMarketingDate = other.EndMarketingDate;
				MarketingCategoryName = other.MarketingCategoryName;
				ApplicationNumber = other.ApplicationNumber;
				SubstanceName = other.SubstanceName;
				StrengthNumber = other.StrengthNumber;
				StrengthUnit = other.StrengthUnit;
				PharmClasses = other.PharmClasses;
				DEASchedule = other.DEASchedule;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(ProductUid, nameof(ProductUid));
			Requires.Text(ProductUid, nameof(ProductUid), true, 0, 50);
			Requires.NonNull(ProductNDC, nameof(ProductNDC));
			Requires.Text(ProductNDC, nameof(ProductNDC), true, 0, 16);
			Requires.Text(ProductTypeName, nameof(ProductTypeName), true, 0, 64);
			Requires.Text(ProprietaryName, nameof(ProprietaryName), true, 0, 1024);
			Requires.Text(ProprietaryNameSuffix, nameof(ProprietaryNameSuffix), true, 0, 255);
			Requires.Text(NonProprietaryName, nameof(NonProprietaryName), true, 0, 1024);
			Requires.Text(DosageFormName, nameof(DosageFormName), true, 0, 64);
			Requires.Text(RouteName, nameof(RouteName), true, 0, 255);
			Requires.Text(MarketingCategoryName, nameof(MarketingCategoryName), true, 0, 64);
			Requires.Text(ApplicationNumber, nameof(ApplicationNumber), true, 0, 11);
			Requires.Text(StrengthNumber, nameof(StrengthNumber), true, 0, 4000);
			Requires.Text(StrengthUnit, nameof(StrengthUnit), true, 0, 4000);
			Requires.Text(DEASchedule, nameof(DEASchedule), true, 0, 4);
			PartialValidate();
        }
	}
}
