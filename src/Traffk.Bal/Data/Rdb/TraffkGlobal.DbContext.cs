/*
This was autogenerated
DO NOT MODIFY BY HAND!!!
TT File: Rdb.Schema.tt
XML File: C:\src\traffk\HealthInformationPortal\src\Traffk.Bal\Data\Rdb\TraffkGlobal.SchemaMeta.xml
Generation Time: 06/24/2017 17:33:17
*/
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using RevolutionaryStuff.Core;
using RevolutionaryStuff.Core.ApplicationParts;
using RevolutionaryStuff.Core.Database;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data;
using System.Data.SqlClient;
using System.Threading.Tasks;
using System.Runtime.Serialization;
using Hangfire.Storage;

namespace Traffk.Bal.Data.Rdb.TraffkGlobal
{
    public partial class TraffkGlobalDbContext
    {
		protected override void OnModelCreating(ModelBuilder modelBuilder)
		{
            base.OnModelCreating(modelBuilder);
		}

		#region Collections

		
		public DbSet<DataSource> DataSources { get; set; } //dbo.DataSources

		
		public DbSet<DataSourceFetche> DataSourceFetches { get; set; } //dbo.DataSourceFetches

		
		public DbSet<DataSourceFetchItem> DataSourceFetchItems { get; set; } //dbo.DataSourceFetchItems

		
		public DbSet<HangfireHash> Hash { get; set; } //HangFire.Hash

		
		public DbSet<HangfireJob> Job { get; set; } //HangFire.Job

		#endregion

		#region Sprocs

		#endregion

	}

	[Table("DataSourceFetches", Schema = "dbo")]
	public partial class DataSourceFetche : IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<int>
	{
        public static readonly DataSourceFetche[] None = new DataSourceFetche[0];

		[InverseProperty("DataSourceFetch")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<DataSourceFetchItem> DataSourceFetchDataSourceFetchItems { get; set; } = new List<DataSourceFetchItem>();

		object IPrimaryKey.Key { get { return DataSourceFetchId; }}
	
		int IPrimaryKey<int>.Key { get { return DataSourceFetchId; }}

		[DisplayName("Data Source Fetch Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("DataSourceFetchId")]
		public int DataSourceFetchId { get; set; }

		[DisplayName("Data Source Id")]
		[Column("DataSourceId")]
		public int DataSourceId { get; set; }

		//LinksTo:dbo.DataSources
		[ForeignKey("DataSourceId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DataSource DataSource { get; set; }

		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} DataSourceFetchId={DataSourceFetchId} {extras}";
		}

		partial void OnConstructed();
	
		public DataSourceFetche()
			: this(null)
		{}

		public DataSourceFetche(DataSourceFetche other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					DataSourceFetchId = other.DataSourceFetchId;
				}
				DataSourceFetchDataSourceFetchItems = other.DataSourceFetchDataSourceFetchItems;
				DataSourceId = other.DataSourceId;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			PartialValidate();
        }
	}

	[Table("DataSourceFetchItems", Schema = "dbo")]
	public partial class DataSourceFetchItem : IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<int>
	{
        public static readonly DataSourceFetchItem[] None = new DataSourceFetchItem[0];

		[InverseProperty("ParentDataSourceFetchItem")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<DataSourceFetchItem> ParentDataSourceFetchItemDataSourceFetchItems { get; set; } = new List<DataSourceFetchItem>();

		[InverseProperty("SameDataSourceReplicatedDataSourceFetchItem")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<DataSourceFetchItem> SameDataSourceReplicatedDataSourceFetchItemDataSourceFetchItems { get; set; } = new List<DataSourceFetchItem>();

		object IPrimaryKey.Key { get { return DataSourceFetchItemId; }}
	
		int IPrimaryKey<int>.Key { get { return DataSourceFetchItemId; }}

		[DisplayName("Data Source Fetch Item Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("DataSourceFetchItemId")]
		public int DataSourceFetchItemId { get; set; }

		[DisplayName("Data Source Fetch Id")]
		[Column("DataSourceFetchId")]
		public int DataSourceFetchId { get; set; }

		//LinksTo:dbo.DataSourceFetches
		[ForeignKey("DataSourceFetchId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DataSourceFetche DataSourceFetch { get; set; }

		[DisplayName("Data Source Fetch Item Type")]
		[NotMapped]
		public DataSourceFetchItem.DataSourceFetchItemTypes DataSourceFetchItemType
        {
            get
            {
                DataSourceFetchItem.DataSourceFetchItemTypes e;
                if (Enum.TryParse(DataSourceFetchItemTypeStringValue, true, out e)) return e;
                return 0;
            }
            set { DataSourceFetchItemTypeStringValue = value.ToString(); }
        }

		[NotNull]
		[Required]
		[MaxLength(80)]
		[Column("DataSourceFetchItemType")]
		public string DataSourceFetchItemTypeStringValue { get; set; }

		[DisplayName("Parent Data Source Fetch Item Id")]
		[Column("ParentDataSourceFetchItemId")]
		public int? ParentDataSourceFetchItemId { get; set; }

		//LinksTo:dbo.DataSourceFetchItems
		[ForeignKey("ParentDataSourceFetchItemId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DataSourceFetchItem ParentDataSourceFetchItem { get; set; }

		[DisplayName("Same Data Source Replicated Data Source Fetch Item Id")]
		[Column("SameDataSourceReplicatedDataSourceFetchItemId")]
		public int? SameDataSourceReplicatedDataSourceFetchItemId { get; set; }

		//LinksTo:dbo.DataSourceFetchItems
		[ForeignKey("SameDataSourceReplicatedDataSourceFetchItemId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DataSourceFetchItem SameDataSourceReplicatedDataSourceFetchItem { get; set; }

		[DisplayName("Name")]
		[MaxLength(1024)]
		[Column("Name")]
		public string Name { get; set; }

		[DisplayName("Size")]
		[Column("Size")]
		public long? Size { get; set; }

		[DisplayName("Url")]
		[MaxLength(1024)]
		[Column("Url")]
		public string Url { get; set; }

		[DisplayName("Data Source Fetch Item Properties")]
		partial void OnDataSourceFetchItemPropertiesDeserialized();

        [NotMapped]
        public Bal.Settings.DataSourceFetchItemProperties DataSourceFetchItemProperties
        {
            get
            {
                if (DataSourceFetchItemProperties_p == null)
                {
                    DataSourceFetchItemProperties_p = Bal.Settings.DataSourceFetchItemProperties.CreateFromJson(DataSourceFetchItemPropertiesJson) ?? new Bal.Settings.DataSourceFetchItemProperties();
					OnDataSourceFetchItemPropertiesDeserialized();
                }
                return DataSourceFetchItemProperties_p;
            }
            set { DataSourceFetchItemProperties_p = value; }
        }
        private Bal.Settings.DataSourceFetchItemProperties DataSourceFetchItemProperties_p;

		[Column("DataSourceFetchItemProperties")]
		public string DataSourceFetchItemPropertiesJson { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} DataSourceFetchItemId={DataSourceFetchItemId} {extras}";
		}

		partial void OnConstructed();
	
		public DataSourceFetchItem()
			: this(null)
		{}

		public DataSourceFetchItem(DataSourceFetchItem other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					DataSourceFetchItemId = other.DataSourceFetchItemId;
				}
				ParentDataSourceFetchItemDataSourceFetchItems = other.ParentDataSourceFetchItemDataSourceFetchItems;
				SameDataSourceReplicatedDataSourceFetchItemDataSourceFetchItems = other.SameDataSourceReplicatedDataSourceFetchItemDataSourceFetchItems;
				DataSourceFetchId = other.DataSourceFetchId;
				DataSourceFetchItemTypeStringValue = other.DataSourceFetchItemTypeStringValue;
				ParentDataSourceFetchItemId = other.ParentDataSourceFetchItemId;
				SameDataSourceReplicatedDataSourceFetchItemId = other.SameDataSourceReplicatedDataSourceFetchItemId;
				Name = other.Name;
				Size = other.Size;
				Url = other.Url;
				DataSourceFetchItemPropertiesJson = other.DataSourceFetchItemPropertiesJson;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
            if (DataSourceFetchItemProperties_p != null)
            {
				var json = DataSourceFetchItemProperties_p.ToJson();
				if (DataSourceFetchItemPropertiesJson != json)
				{
					DataSourceFetchItemPropertiesJson = json;
				}				 
            }
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(DataSourceFetchItemTypeStringValue, nameof(DataSourceFetchItemTypeStringValue));
			Requires.Text(DataSourceFetchItemTypeStringValue, nameof(DataSourceFetchItemTypeStringValue), true, 0, 80);
			Requires.Text(Name, nameof(Name), true, 0, 1024);
			Requires.Text(Url, nameof(Url), true, 0, 1024);
			PartialValidate();
        }
	}

	[Table("DataSources", Schema = "dbo")]
	public partial class DataSource : IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<int>
	{
        public static readonly DataSource[] None = new DataSource[0];

		[InverseProperty("DataSource")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<DataSourceFetche> DataSourceDataSourceFetches { get; set; } = new List<DataSourceFetche>();

		object IPrimaryKey.Key { get { return DataSourceId; }}
	
		int IPrimaryKey<int>.Key { get { return DataSourceId; }}

		[DisplayName("Data Source Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("DataSourceId")]
		public int DataSourceId { get; set; }

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int? TenantId { get; set; }

		/// <summary>
		/// Datetime when this entity was created.
		/// </summary>
		[Description("Datetime when this entity was created.")]
		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Data Source Settings")]
		partial void OnDataSourceSettingsDeserialized();

        [NotMapped]
        public Bal.Settings.DataSourceSettings DataSourceSettings
        {
            get
            {
                if (DataSourceSettings_p == null)
                {
                    DataSourceSettings_p = Bal.Settings.DataSourceSettings.CreateFromJson(DataSourceSettingsJson) ?? new Bal.Settings.DataSourceSettings();
					OnDataSourceSettingsDeserialized();
                }
                return DataSourceSettings_p;
            }
            set { DataSourceSettings_p = value; }
        }
        private Bal.Settings.DataSourceSettings DataSourceSettings_p;

		[Column("DataSourceSettings")]
		public string DataSourceSettingsJson { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} DataSourceId={DataSourceId} {extras}";
		}

		partial void OnConstructed();
	
		public DataSource()
			: this(null)
		{}

		public DataSource(DataSource other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					DataSourceId = other.DataSourceId;
				}
				DataSourceDataSourceFetches = other.DataSourceDataSourceFetches;
				TenantId = other.TenantId;
				DataSourceSettingsJson = other.DataSourceSettingsJson;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
            if (DataSourceSettings_p != null)
            {
				var json = DataSourceSettings_p.ToJson();
				if (DataSourceSettingsJson != json)
				{
					DataSourceSettingsJson = json;
				}				 
            }
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			PartialValidate();
        }
	}

	[Table("Hash", Schema = "HangFire")]
	public partial class HangfireHash : IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<int>
	{
        public static readonly HangfireHash[] None = new HangfireHash[0];

		object IPrimaryKey.Key { get { return Id; }}
	
		int IPrimaryKey<int>.Key { get { return Id; }}

		[DisplayName("Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("Id")]
		public int Id { get; set; }

		[DisplayName("Key")]
		[NotNull]
		[Required]
		[MaxLength(100)]
		[Column("Key")]
		public string Key { get; set; }

		[DisplayName("Field")]
		[NotNull]
		[Required]
		[MaxLength(100)]
		[Column("Field")]
		public string Field { get; set; }

		[DisplayName("Value")]
		[Column("Value")]
		public string Value { get; set; }

		[DisplayName("Expire At")]
		[Column("ExpireAt")]
		public DateTime? ExpireAt { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} Id={Id} {extras}";
		}

		partial void OnConstructed();
	
		public HangfireHash()
			: this(null)
		{}

		public HangfireHash(HangfireHash other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					Id = other.Id;
				}
				Key = other.Key;
				Field = other.Field;
				Value = other.Value;
				ExpireAt = other.ExpireAt;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(Key, nameof(Key));
			Requires.Text(Key, nameof(Key), true, 0, 100);
			Requires.NonNull(Field, nameof(Field));
			Requires.Text(Field, nameof(Field), true, 0, 100);
			PartialValidate();
        }
	}

	[Table("Job", Schema = "HangFire")]
	public partial class HangfireJob : IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<int>
	{
        public static readonly HangfireJob[] None = new HangfireJob[0];

		[InverseProperty("ParentJob")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<HangfireJob> ParentJobHangfireJobs { get; set; } = new List<HangfireJob>();

		//skipped: HangFire.State

		//skipped: HangFire.JobParameter

		object IPrimaryKey.Key { get { return Id; }}
	
		int IPrimaryKey<int>.Key { get { return Id; }}

		[DisplayName("Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("Id")]
		public int Id { get; set; }

		[DisplayName("State Id")]
		[Column("StateId")]
		public int? StateId { get; set; }

		[DisplayName("State Name")]
		[MaxLength(20)]
		[Column("StateName")]
		public string StateName { get; set; }

		[DisplayName("Invocation Data")]
		[NotNull]
		[Required]
		[Column("InvocationData")]
		public string InvocationData { get; set; }

		[DisplayName("Arguments")]
		[NotNull]
		[Required]
		[Column("Arguments")]
		public string Arguments { get; set; }

		[DisplayName("Created At")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAt")]
		public DateTime CreatedAt { get; set; }

		[DisplayName("Expire At")]
		[Column("ExpireAt")]
		public DateTime? ExpireAt { get; set; }

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int? TenantId { get; set; }

		[DisplayName("Result Data")]
		[Column("ResultData")]
		public string ResultData { get; set; }

		[DisplayName("Recurring Job Id")]
		[MaxLength(256)]
		[Column("RecurringJobId")]
		public string RecurringJobId { get; set; }

		[DisplayName("Parent Job Id")]
		[Column("ParentJobId")]
		public int? ParentJobId { get; set; }

		//LinksTo:HangFire.Job
		[ForeignKey("ParentJobId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public HangfireJob ParentJob { get; set; }

		[DisplayName("Contact Id")]
		[Column("ContactId")]
		public int? ContactId { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} Id={Id} {extras}";
		}

		partial void OnConstructed();
	
		public HangfireJob()
			: this(null)
		{}

		public HangfireJob(HangfireJob other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					Id = other.Id;
				}
				ParentJobHangfireJobs = other.ParentJobHangfireJobs;
				StateId = other.StateId;
				StateName = other.StateName;
				InvocationData = other.InvocationData;
				Arguments = other.Arguments;
				ExpireAt = other.ExpireAt;
				TenantId = other.TenantId;
				ResultData = other.ResultData;
				RecurringJobId = other.RecurringJobId;
				ParentJobId = other.ParentJobId;
				ContactId = other.ContactId;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.Text(StateName, nameof(StateName), true, 0, 20);
			Requires.NonNull(InvocationData, nameof(InvocationData));
			Requires.NonNull(Arguments, nameof(Arguments));
			Requires.Text(RecurringJobId, nameof(RecurringJobId), true, 0, 256);
			PartialValidate();
        }
	}
}
