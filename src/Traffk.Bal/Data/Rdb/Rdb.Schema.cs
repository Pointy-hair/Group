
// This was autogenerated using Rdb.Schema.tt and C:\src\traffk\Repos\HealthInformationPortal\src\Traffk.Bal\Data\Rdb\Rdb.Meta.xml at 01/09/2017 00:40:15
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using RevolutionaryStuff.Core;
using RevolutionaryStuff.Core.ApplicationParts;
using RevolutionaryStuff.Core.Database;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data;
using System.Data.SqlClient;
using System.Threading.Tasks;
using System.Runtime.Serialization;

namespace Traffk.Bal.Data.Rdb
{
    public partial class TraffkRdbContext
    {
		protected override void OnModelCreating(ModelBuilder modelBuilder)
		{
            base.OnModelCreating(modelBuilder);
			modelBuilder.Entity<Contact>()
				.HasDiscriminator<string>("ContactType")
				.HasValue<Organization>("Organization")
				.HasValue<Person>("Person")
				;
		}

		#region Collections

		public DbSet<Application> Applications { get; set; }

		public DbSet<CommunicationBlast> CommunicationBlasts { get; set; }

		public DbSet<CommunicationBlastTracker> CommunicationBlastTrackers { get; set; }

		public DbSet<CommunicationPiece> CommunicationPieces { get; set; }

		public DbSet<CommunicationPieceVisit> CommunicationPieceVisits { get; set; }

		public DbSet<Communication> Communications { get; set; }

		public DbSet<Contact> Contacts { get; set; }

		public DbSet<Organization> Organizations { get; set; }

		public DbSet<Person> People { get; set; }

		public DbSet<Creative> Creatives { get; set; }

		public DbSet<DateDimension> DateDimensions { get; set; }

		public DbSet<Job> Jobs { get; set; }

		public DbSet<ReleaseChange> ReleaseChanges { get; set; }

		public DbSet<Release> Releases { get; set; }

		public DbSet<Tenant> Tenants { get; set; }

		public DbSet<UserActivity> UserActivities { get; set; }

		public DbSet<CareAlert> CareAlerts { get; set; }

		public DbSet<Demographic> Demographics { get; set; }

		public DbSet<Eligibility> Eligibility { get; set; }

		public DbSet<HighCostDiagnosi> HighCostDiagnosis { get; set; }

		public DbSet<HistoricalScore> HistoricalScores { get; set; }

		public DbSet<MedicalClaim> MedicalClaims { get; set; }

		public DbSet<MemberPCP> MemberPCP { get; set; }

		public DbSet<Participation> Participation { get; set; }

		public DbSet<Pharmacy> Pharmacy { get; set; }

		public DbSet<QualityMetric> QualityMetrics { get; set; }

		public DbSet<Score> Scores { get; set; }

		public DbSet<Visit> Visits { get; set; }

		#endregion

		#region Sprocs

		public async Task<ConnectionHelpers.Result<Traffk.Bal.Data.Rdb.ApplicationHostItem>> ApplicationFindByHostAsync(string hostName = null, ApplicationTypes? applicationType = null) 
		{
            var ps = new SqlParameter[]
                {
                    new SqlParameter("@hostName", hostName==null ? DBNull.Value:(object) hostName){Direction=ParameterDirection.Input},
                    new SqlParameter("@applicationType", applicationType==null ? DBNull.Value:(object) applicationType.ToString()){Direction=ParameterDirection.Input},
                };
            var conn = Database.GetDbConnection();
			if (conn.State!=ConnectionState.Open)
			{
	            await conn.OpenAsync();
			}
            return await conn.ExecuteReaderAsync<Traffk.Bal.Data.Rdb.ApplicationHostItem>(null, "dbo.ApplicationFindByHost", null, ps);
		}

		internal async Task<ConnectionHelpers.Result<Traffk.Bal.Data.GetCountsResult.Item>> GetFieldCountsAsync(string schemaName = null, string tableName = null, int? tenantId = null, string fieldNamesCsv = null) 
		{
            var ps = new SqlParameter[]
                {
                    new SqlParameter("@schemaName", schemaName==null ? DBNull.Value:(object) schemaName){Direction=ParameterDirection.Input},
                    new SqlParameter("@tableName", tableName==null ? DBNull.Value:(object) tableName){Direction=ParameterDirection.Input},
                    new SqlParameter("@tenantId", tenantId==null ? DBNull.Value:(object) tenantId){Direction=ParameterDirection.Input},
                    new SqlParameter("@fieldNamesCsv", fieldNamesCsv==null ? DBNull.Value:(object) fieldNamesCsv){Direction=ParameterDirection.Input},
                };
            var conn = Database.GetDbConnection();
			if (conn.State!=ConnectionState.Open)
			{
	            await conn.OpenAsync();
			}
            return await conn.ExecuteReaderAsync<Traffk.Bal.Data.GetCountsResult.Item>(null, "dbo.GetFieldCounts", null, ps);
		}

		public async Task<ConnectionHelpers.Result<Job>> JobDequeueAsync(JobTypes? jobType = null, string serviceRoleMachineName = null, int? numUnits = null, int? jobId = null, int? tenantId = null, int? maxConcurrentPerTenant = null) 
		{
            var ps = new SqlParameter[]
                {
                    new SqlParameter("@jobType", jobType==null ? DBNull.Value:(object) jobType.ToString()){Direction=ParameterDirection.Input},
                    new SqlParameter("@serviceRoleMachineName", serviceRoleMachineName==null ? DBNull.Value:(object) serviceRoleMachineName){Direction=ParameterDirection.Input},
                    new SqlParameter("@numUnits", numUnits==null ? DBNull.Value:(object) numUnits){Direction=ParameterDirection.Input},
                    new SqlParameter("@jobId", jobId==null ? DBNull.Value:(object) jobId){Direction=ParameterDirection.Input},
                    new SqlParameter("@tenantId", tenantId==null ? DBNull.Value:(object) tenantId){Direction=ParameterDirection.Input},
                    new SqlParameter("@maxConcurrentPerTenant", maxConcurrentPerTenant==null ? DBNull.Value:(object) maxConcurrentPerTenant){Direction=ParameterDirection.Input},
                };
            var conn = Database.GetDbConnection();
			if (conn.State!=ConnectionState.Open)
			{
	            await conn.OpenAsync();
			}
            return await conn.ExecuteReaderAsync<Job>(null, "dbo.JobDequeue", null, ps);
		}

		#endregion

	}

	/// <summary>
	/// Type of application that runs this system
	/// </summary>
	[Table("Applications", Schema = "dbo")]
	public partial class Application : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted
	{
        public static readonly Application[] None = new Application[0];

		/// <summary>
		/// Primary key
		/// </summary>
		[Description("Primary key")]
		[DisplayName("Application Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("ApplicationId")]
		public int ApplicationId { get; set; }

		/// <summary>
		/// Foreign key to the tenant that owns this account
		/// </summary>
		[Description("Foreign key to the tenant that owns this account")]
		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		/// <summary>
		/// Type of application
		/// </summary>
		[Description("Type of application")]
		[DisplayName("Application Type")]
		[NotMapped]
		public ApplicationTypes ApplicationType
        {
            get
            {
                ApplicationTypes e;
                if (Enum.TryParse(ApplicationTypeStringValue, true, out e)) return e;
                return 0;
            }
            set { ApplicationTypeStringValue = value.ToString(); }
        }

		[NotNull]
		[Required]
		[MaxLength(80)]
		[Column("ApplicationType")]
		public string ApplicationTypeStringValue { get; set; }

		/// <summary>
		/// Human readible name of the application
		/// </summary>
		[Description("Human readible name of the application")]
		[DisplayName("Application Name")]
		[NotNull]
		[Required]
		[MaxLength(255)]
		[Column("ApplicationName")]
		public string ApplicationName { get; set; }

		/// <summary>
		/// Settings particular to this type of application
		/// </summary>
		[Description("Settings particular to this type of application")]
		[DisplayName("Application Settings")]
		partial void OnApplicationSettingsDeserialized();

        [NotMapped]
        public Bal.Settings.ApplicationSettings ApplicationSettings
        {
            get
            {
                if (ApplicationSettings_p == null)
                {
                    ApplicationSettings_p = Bal.Settings.ApplicationSettings.CreateFromJson(ApplicationSettingsJson) ?? new Bal.Settings.ApplicationSettings();
					OnApplicationSettingsDeserialized();
                }
                return ApplicationSettings_p;
            }
            set { ApplicationSettings_p = value; }
        }
        private Bal.Settings.ApplicationSettings ApplicationSettings_p;

		[Column("ApplicationSettings")]
		public string ApplicationSettingsJson { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} ApplicationId={ApplicationId} {extras}";
		}

		partial void OnConstructed();
	
		public Application()
			: this(null)
		{}

		public Application(Application other)
		{
			if (other!=null)
			{
				TenantId = other.TenantId;
				ApplicationTypeStringValue = other.ApplicationTypeStringValue;
				ApplicationName = other.ApplicationName;
				ApplicationSettingsJson = other.ApplicationSettingsJson;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
            if (ApplicationSettings_p != null)
            {
				var json = ApplicationSettings_p.ToJson();
				if (ApplicationSettingsJson != json)
				{
					ApplicationSettingsJson = json;
				}				 
            }
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(ApplicationTypeStringValue, nameof(ApplicationTypeStringValue));
			Requires.Text(ApplicationTypeStringValue, nameof(ApplicationTypeStringValue), true, 0, 80);
			Requires.NonNull(ApplicationName, nameof(ApplicationName));
			Requires.Text(ApplicationName, nameof(ApplicationName), true, 0, 255);
			PartialValidate();
        }
	}

	/// <summary>
	/// An instance of a communication.
	/// </summary>
	[Table("CommunicationBlasts", Schema = "dbo")]
	public partial class CommunicationBlast : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted
	{
        public static readonly CommunicationBlast[] None = new CommunicationBlast[0];

		[InverseProperty("CommunicationBlast")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<CommunicationPiece> CommunicationBlastCommunicationPieces { get; set; } = new List<CommunicationPiece>();

		[InverseProperty("CommunicationBlast")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<CommunicationBlastTracker> CommunicationBlastCommunicationBlastTrackers { get; set; } = new List<CommunicationBlastTracker>();

		[DisplayName("Communication Blast Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("CommunicationBlastId")]
		public int CommunicationBlastId { get; set; }

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Communication Id")]
		[Column("CommunicationId")]
		public int CommunicationId { get; set; }

		[ForeignKey("CommunicationId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Communication Communication { get; set; }

		[DisplayName("Creative Id")]
		[Column("CreativeId")]
		public int? CreativeId { get; set; }

		[ForeignKey("CreativeId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Creative Creative { get; set; }

		[DisplayName("Job Id")]
		[Column("JobId")]
		public int? JobId { get; set; }

		[ForeignKey("JobId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Job Job { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} CommunicationBlastId={CommunicationBlastId} {extras}";
		}

		partial void OnConstructed();
	
		public CommunicationBlast()
			: this(null)
		{}

		public CommunicationBlast(CommunicationBlast other)
		{
			if (other!=null)
			{
				CommunicationBlastCommunicationPieces = other.CommunicationBlastCommunicationPieces;
				CommunicationBlastCommunicationBlastTrackers = other.CommunicationBlastCommunicationBlastTrackers;
				TenantId = other.TenantId;
				CommunicationId = other.CommunicationId;
				CreativeId = other.CreativeId;
				JobId = other.JobId;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			PartialValidate();
        }
	}

	/// <summary>
	/// Assets referenced by a creative whose hyperlinks have been munged to support tracking
	/// </summary>
	[Table("CommunicationBlastTrackers", Schema = "dbo")]
	public partial class CommunicationBlastTracker : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted
	{
        public static readonly CommunicationBlastTracker[] None = new CommunicationBlastTracker[0];

		[InverseProperty("CommunicationBlastTracker")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<CommunicationPieceVisit> CommunicationBlastTrackerCommunicationPieceVisits { get; set; } = new List<CommunicationPieceVisit>();

		[DisplayName("Communication Blast Tracker Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("CommunicationBlastTrackerId")]
		public int CommunicationBlastTrackerId { get; set; }

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Communication Blast Id")]
		[Column("CommunicationBlastId")]
		public int CommunicationBlastId { get; set; }

		[ForeignKey("CommunicationBlastId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public CommunicationBlast CommunicationBlast { get; set; }

		[DisplayName("Link Type")]
		[NotMapped]
		public CommunicationBlastTrackerLinkTypes LinkType
        {
            get
            {
                CommunicationBlastTrackerLinkTypes e;
                if (Enum.TryParse(LinkTypeStringValue, true, out e)) return e;
                return 0;
            }
            set { LinkTypeStringValue = value.ToString(); }
        }

		[NotNull]
		[Required]
		[MaxLength(80)]
		[Column("LinkType")]
		public string LinkTypeStringValue { get; set; }

		/// <summary>
		/// Non-guessable guid for this item
		/// </summary>
		[Description("Non-guessable guid for this item")]
		[DisplayName("Tracker Uid")]
		[Column("TrackerUid")]
		public Guid TrackerUid { get; set; }

		[DisplayName("Redirect Url")]
		[NotNull]
		[Required]
		[MaxLength(1024)]
		[Column("RedirectUrl")]
		public string RedirectUrl { get; set; }

		[DisplayName("Position")]
		[Column("Position")]
		public int Position { get; set; }

		[DisplayName("Communication Type")]
		[NotMapped]
		public Traffk.Bal.Communications.CommunicationTypes CommunicationType
        {
            get
            {
                Traffk.Bal.Communications.CommunicationTypes e;
                if (Enum.TryParse(CommunicationTypeStringValue, true, out e)) return e;
                return 0;
            }
            set { CommunicationTypeStringValue = value.ToString(); }
        }

		[NotNull]
		[Required]
		[MaxLength(80)]
		[Column("CommunicationType")]
		public string CommunicationTypeStringValue { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} CommunicationBlastTrackerId={CommunicationBlastTrackerId} {extras}";
		}

		partial void OnConstructed();
	
		public CommunicationBlastTracker()
			: this(null)
		{}

		public CommunicationBlastTracker(CommunicationBlastTracker other)
		{
			if (other!=null)
			{
				CommunicationBlastTrackerCommunicationPieceVisits = other.CommunicationBlastTrackerCommunicationPieceVisits;
				TenantId = other.TenantId;
				CommunicationBlastId = other.CommunicationBlastId;
				LinkTypeStringValue = other.LinkTypeStringValue;
				TrackerUid = other.TrackerUid;
				RedirectUrl = other.RedirectUrl;
				Position = other.Position;
				CommunicationTypeStringValue = other.CommunicationTypeStringValue;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(LinkTypeStringValue, nameof(LinkTypeStringValue));
			Requires.Text(LinkTypeStringValue, nameof(LinkTypeStringValue), true, 0, 80);
			Requires.NonNull(RedirectUrl, nameof(RedirectUrl));
			Requires.Text(RedirectUrl, nameof(RedirectUrl), true, 0, 1024);
			Requires.NonNull(CommunicationTypeStringValue, nameof(CommunicationTypeStringValue));
			Requires.Text(CommunicationTypeStringValue, nameof(CommunicationTypeStringValue), true, 0, 80);
			PartialValidate();
        }
	}

	/// <summary>
	/// Instance of a communication piece that has been queued for delivery
	/// </summary>
	[Table("CommunicationPieces", Schema = "dbo")]
	public partial class CommunicationPiece : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted
	{
        public static readonly CommunicationPiece[] None = new CommunicationPiece[0];

		[InverseProperty("CommunicationPiece")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<CommunicationPieceVisit> CommunicationPieceCommunicationPieceVisits { get; set; } = new List<CommunicationPieceVisit>();

		[DisplayName("Communication Piece Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("CommunicationPieceId")]
		public long CommunicationPieceId { get; set; }

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		/// <summary>
		/// Non-guessable guid for this item
		/// </summary>
		[Description("Non-guessable guid for this item")]
		[DisplayName("Communication Piece Uid")]
		[Column("CommunicationPieceUid")]
		public Guid CommunicationPieceUid { get; set; }

		[DisplayName("Communication Blast Id")]
		[Column("CommunicationBlastId")]
		public int CommunicationBlastId { get; set; }

		[ForeignKey("CommunicationBlastId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public CommunicationBlast CommunicationBlast { get; set; }

		[DisplayName("Contact Id")]
		[Column("ContactId")]
		public long? ContactId { get; set; }

		[ForeignKey("ContactId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Contact Contact { get; set; }

		[DisplayName("User Id")]
		[MaxLength(450)]
		[Column("UserId")]
		public string UserId { get; set; }

		[ForeignKey("UserId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public ApplicationUser User { get; set; }

		[DisplayName("Data")]
		partial void OnDataDeserialized();

        [NotMapped]
        public Bal.Settings.CommunicationPieceData Data
        {
            get
            {
                if (Data_p == null)
                {
                    Data_p = Bal.Settings.CommunicationPieceData.CreateFromJson(DataJson) ?? new Bal.Settings.CommunicationPieceData();
					OnDataDeserialized();
                }
                return Data_p;
            }
            set { Data_p = value; }
        }
        private Bal.Settings.CommunicationPieceData Data_p;

		[Column("Data")]
		public string DataJson { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} CommunicationPieceId={CommunicationPieceId} {extras}";
		}

		partial void OnConstructed();
	
		public CommunicationPiece()
			: this(null)
		{}

		public CommunicationPiece(CommunicationPiece other)
		{
			if (other!=null)
			{
				CommunicationPieceCommunicationPieceVisits = other.CommunicationPieceCommunicationPieceVisits;
				TenantId = other.TenantId;
				CommunicationPieceUid = other.CommunicationPieceUid;
				CommunicationBlastId = other.CommunicationBlastId;
				ContactId = other.ContactId;
				UserId = other.UserId;
				DataJson = other.DataJson;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
            if (Data_p != null)
            {
				var json = Data_p.ToJson();
				if (DataJson != json)
				{
					DataJson = json;
				}				 
            }
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.Text(UserId, nameof(UserId), true, 0, 450);
			PartialValidate();
        }
	}

	/// <summary>
	/// Record that a creator tracker has been seen relative to communication piece
	/// </summary>
	[Table("CommunicationPieceVisits", Schema = "dbo")]
	public partial class CommunicationPieceVisit : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted
	{
        public static readonly CommunicationPieceVisit[] None = new CommunicationPieceVisit[0];

		[DisplayName("Communication Piece Visit Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("CommunicationPieceVisitId")]
		public long CommunicationPieceVisitId { get; set; }

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Communication Piece Id")]
		[Column("CommunicationPieceId")]
		public long CommunicationPieceId { get; set; }

		[ForeignKey("CommunicationPieceId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public CommunicationPiece CommunicationPiece { get; set; }

		[DisplayName("Communication Blast Tracker Id")]
		[Column("CommunicationBlastTrackerId")]
		public int CommunicationBlastTrackerId { get; set; }

		[ForeignKey("CommunicationBlastTrackerId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public CommunicationBlastTracker CommunicationBlastTracker { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} CommunicationPieceVisitId={CommunicationPieceVisitId} {extras}";
		}

		partial void OnConstructed();
	
		public CommunicationPieceVisit()
			: this(null)
		{}

		public CommunicationPieceVisit(CommunicationPieceVisit other)
		{
			if (other!=null)
			{
				TenantId = other.TenantId;
				CommunicationPieceId = other.CommunicationPieceId;
				CommunicationBlastTrackerId = other.CommunicationBlastTrackerId;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			PartialValidate();
        }
	}

	/// <summary>
	/// A communication outreach piece.
	/// </summary>
	[Table("Communications", Schema = "dbo")]
	public partial class Communication : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted
	{
        public static readonly Communication[] None = new Communication[0];

		[InverseProperty("Communication")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<CommunicationBlast> CommunicationCommunicationBlasts { get; set; } = new List<CommunicationBlast>();

		[DisplayName("Communication Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("CommunicationId")]
		public int CommunicationId { get; set; }

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Communication Title")]
		[MaxLength(255)]
		[Column("CommunicationTitle")]
		public string CommunicationTitle { get; set; }

		[DisplayName("Topic Name")]
		[MaxLength(255)]
		[Column("TopicName")]
		public string TopicName { get; set; }

		[DisplayName("Campaign Name")]
		[MaxLength(255)]
		[Column("CampaignName")]
		public string CampaignName { get; set; }

		[DisplayName("Creative Id")]
		[Column("CreativeId")]
		public int? CreativeId { get; set; }

		[ForeignKey("CreativeId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Creative Creative { get; set; }

		[DisplayName("Communication Settings")]
		partial void OnCommunicationSettingsDeserialized();

        [NotMapped]
        public Traffk.Bal.Settings.CommunicationSettings CommunicationSettings
        {
            get
            {
                if (CommunicationSettings_p == null)
                {
                    CommunicationSettings_p = Traffk.Bal.Settings.CommunicationSettings.CreateFromJson(CommunicationSettingsJson) ?? new Traffk.Bal.Settings.CommunicationSettings();
					OnCommunicationSettingsDeserialized();
                }
                return CommunicationSettings_p;
            }
            set { CommunicationSettings_p = value; }
        }
        private Traffk.Bal.Settings.CommunicationSettings CommunicationSettings_p;

		[Column("CommunicationSettings")]
		public string CommunicationSettingsJson { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} CommunicationId={CommunicationId} {extras}";
		}

		partial void OnConstructed();
	
		public Communication()
			: this(null)
		{}

		public Communication(Communication other)
		{
			if (other!=null)
			{
				CommunicationCommunicationBlasts = other.CommunicationCommunicationBlasts;
				TenantId = other.TenantId;
				CommunicationTitle = other.CommunicationTitle;
				TopicName = other.TopicName;
				CampaignName = other.CampaignName;
				CreativeId = other.CreativeId;
				CommunicationSettingsJson = other.CommunicationSettingsJson;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
            if (CommunicationSettings_p != null)
            {
				var json = CommunicationSettings_p.ToJson();
				if (CommunicationSettingsJson != json)
				{
					CommunicationSettingsJson = json;
				}				 
            }
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.Text(CommunicationTitle, nameof(CommunicationTitle), true, 0, 255);
			Requires.Text(TopicName, nameof(TopicName), true, 0, 255);
			Requires.Text(CampaignName, nameof(CampaignName), true, 0, 255);
			PartialValidate();
        }
	}

	[Table("Contacts", Schema = "dbo")]
	public abstract partial class Contact : IRdbDataEntity, IValidate, IPreSave
	{
        public static readonly Contact[] None = new Contact[0];

		[InverseProperty("Contact")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Eligibility> ContactEligibilitys { get; set; } = new List<Eligibility>();

		[InverseProperty("Contact")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Pharmacy> ContactPharmacys { get; set; } = new List<Pharmacy>();

		[InverseProperty("Contact")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<CommunicationPiece> ContactCommunicationPieces { get; set; } = new List<CommunicationPiece>();

		[InverseProperty("Contact")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MedicalClaim> ContactMedicalClaims { get; set; } = new List<MedicalClaim>();

		[InverseProperty("Contact")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Demographic> ContactDemographics { get; set; } = new List<Demographic>();

		[InverseProperty("Contact")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Visit> ContactVisits { get; set; } = new List<Visit>();

		[InverseProperty("Contact")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MemberPCP> ContactMemberPCPs { get; set; } = new List<MemberPCP>();

		[InverseProperty("Contact")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Score> ContactScores { get; set; } = new List<Score>();

		[InverseProperty("Contact")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<HistoricalScore> ContactHistoricalScores { get; set; } = new List<HistoricalScore>();

		[InverseProperty("Contact")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Participation> ContactParticipations { get; set; } = new List<Participation>();

		[InverseProperty("Contact")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<QualityMetric> ContactQualityMetrics { get; set; } = new List<QualityMetric>();

		[InverseProperty("Contact")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<HighCostDiagnosi> ContactHighCostDiagnosis { get; set; } = new List<HighCostDiagnosi>();

		[InverseProperty("Contact")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<CareAlert> ContactCareAlerts { get; set; } = new List<CareAlert>();

		[DisplayName("Contact Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("ContactId")]
		public long ContactId { get; set; }

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Contact Type")]
		[NotNull]
		[Required]
		[MaxLength(80)]
		[Column("ContactType")]
		public string ContactType { get; set; }

		/// <summary>
		/// Datetime when this entity was created.
		/// </summary>
		[Description("Datetime when this entity was created.")]
		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Full Name")]
		[MaxLength(255)]
		[Column("FullName")]
		public string FullName { get; set; }

		[DisplayName("Member Id")]
		[MaxLength(50)]
		[Column("MemberId")]
		public string MemberId { get; set; }

		[DisplayName("Deerwalk Member Id")]
		[MaxLength(50)]
		[Column("DeerwalkMemberId")]
		public string DeerwalkMemberId { get; set; }

		[DisplayName("Contact Details")]
		partial void OnContactDetailsDeserialized();

        [NotMapped]
        public Traffk.Bal.Data.Rdb.Contact.ContactDetails_ ContactDetails
        {
            get
            {
                if (ContactDetails_p == null)
                {
                    ContactDetails_p = Traffk.Bal.Data.Rdb.Contact.ContactDetails_.CreateFromJson(ContactDetailsJson) ?? new Traffk.Bal.Data.Rdb.Contact.ContactDetails_();
					OnContactDetailsDeserialized();
                }
                return ContactDetails_p;
            }
            set { ContactDetails_p = value; }
        }
        private Traffk.Bal.Data.Rdb.Contact.ContactDetails_ ContactDetails_p;

		[Column("ContactDetails")]
		public string ContactDetailsJson { get; set; }

		[DisplayName("Primary Email")]
		[EmailAddress]
		[MaxLength(254)]
		[Column("PrimaryEmail")]
		public string PrimaryEmail { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} ContactId={ContactId} {extras}";
		}

		partial void OnConstructed();
	
		public Contact()
			: this(null)
		{}

		public Contact(Contact other)
		{
			if (other!=null)
			{
				ContactEligibilitys = other.ContactEligibilitys;
				ContactPharmacys = other.ContactPharmacys;
				ContactCommunicationPieces = other.ContactCommunicationPieces;
				ContactMedicalClaims = other.ContactMedicalClaims;
				ContactDemographics = other.ContactDemographics;
				ContactVisits = other.ContactVisits;
				ContactMemberPCPs = other.ContactMemberPCPs;
				ContactScores = other.ContactScores;
				ContactHistoricalScores = other.ContactHistoricalScores;
				ContactParticipations = other.ContactParticipations;
				ContactQualityMetrics = other.ContactQualityMetrics;
				ContactHighCostDiagnosis = other.ContactHighCostDiagnosis;
				ContactCareAlerts = other.ContactCareAlerts;
				TenantId = other.TenantId;
				ContactType = other.ContactType;
				FullName = other.FullName;
				MemberId = other.MemberId;
				DeerwalkMemberId = other.DeerwalkMemberId;
				ContactDetailsJson = other.ContactDetailsJson;
				PrimaryEmail = other.PrimaryEmail;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
            if (ContactDetails_p != null)
            {
				var json = ContactDetails_p.ToJson();
				if (ContactDetailsJson != json)
				{
					ContactDetailsJson = json;
				}				 
            }
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(ContactType, nameof(ContactType));
			Requires.Text(ContactType, nameof(ContactType), true, 0, 80);
			Requires.Text(FullName, nameof(FullName), true, 0, 255);
			Requires.Text(MemberId, nameof(MemberId), true, 0, 50);
			Requires.Text(DeerwalkMemberId, nameof(DeerwalkMemberId), true, 0, 50);
			Requires.Text(PrimaryEmail, nameof(PrimaryEmail), true, 0, 254);
			PartialValidate();
        }
	}

	[Table("Contacts", Schema = "dbo")]
	public partial class Organization : Contact
	{
        public static new readonly Organization[] None = new Organization[0];

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public Organization()
			: this(null)
		{}

		public Organization(Organization other)
			: base(other)
		{
			if (other!=null)
			{
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		protected override void OnPreSave()
		{
			base.OnPreSave();
			PartialPreSave();
        }

		partial void PartialValidate();

		public override void Validate()
        {
			base.Validate();
			PartialValidate();
        }
	}

	[Table("Contacts", Schema = "dbo")]
	public partial class Person : Contact
	{
        public static new readonly Person[] None = new Person[0];

		[DisplayName("Gender")]
		[MaxLength(100)]
		[Column("Gender")]
		public string Gender { get; set; }

		[DisplayName("Date Of Birth")]
		[Column("DateOfBirth")]
		public DateTime? DateOfBirth { get; set; }

		[DisplayName("Prefix")]
		[MaxLength(255)]
		[Column("Prefix")]
		public string Prefix { get; set; }

		[DisplayName("First Name")]
		[MaxLength(255)]
		[Column("FirstName")]
		public string FirstName { get; set; }

		[DisplayName("Middle Name")]
		[MaxLength(255)]
		[Column("MiddleName")]
		public string MiddleName { get; set; }

		[DisplayName("Last Name")]
		[MaxLength(255)]
		[Column("LastName")]
		public string LastName { get; set; }

		[DisplayName("Suffix")]
		[MaxLength(255)]
		[Column("Suffix")]
		public string Suffix { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		public Person()
			: this(null)
		{}

		public Person(Person other)
			: base(other)
		{
			if (other!=null)
			{
				Gender = other.Gender;
				DateOfBirth = other.DateOfBirth;
				Prefix = other.Prefix;
				FirstName = other.FirstName;
				MiddleName = other.MiddleName;
				LastName = other.LastName;
				Suffix = other.Suffix;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		protected override void OnPreSave()
		{
			base.OnPreSave();
			PartialPreSave();
        }

		partial void PartialValidate();

		public override void Validate()
        {
			base.Validate();
			Requires.Text(Gender, nameof(Gender), true, 0, 100);
			Requires.Text(Prefix, nameof(Prefix), true, 0, 255);
			Requires.Text(FirstName, nameof(FirstName), true, 0, 255);
			Requires.Text(MiddleName, nameof(MiddleName), true, 0, 255);
			Requires.Text(LastName, nameof(LastName), true, 0, 255);
			Requires.Text(Suffix, nameof(Suffix), true, 0, 255);
			PartialValidate();
        }
	}

	[Table("Contacts", Schema = "dbo")]
	public partial class ContactAllFields : Contact
	{
        public static new readonly ContactAllFields[] None = new ContactAllFields[0];

		[DisplayName("Gender")]
		[MaxLength(100)]
		[Column("Gender")]
		public string Gender { get; set; }

		[DisplayName("Date Of Birth")]
		[Column("DateOfBirth")]
		public DateTime? DateOfBirth { get; set; }

		[DisplayName("Prefix")]
		[MaxLength(255)]
		[Column("Prefix")]
		public string Prefix { get; set; }

		[DisplayName("First Name")]
		[MaxLength(255)]
		[Column("FirstName")]
		public string FirstName { get; set; }

		[DisplayName("Middle Name")]
		[MaxLength(255)]
		[Column("MiddleName")]
		public string MiddleName { get; set; }

		[DisplayName("Last Name")]
		[MaxLength(255)]
		[Column("LastName")]
		public string LastName { get; set; }

		[DisplayName("Suffix")]
		[MaxLength(255)]
		[Column("Suffix")]
		public string Suffix { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name}  {extras}";
		}

		partial void OnConstructed();
	
		private ContactAllFields()
			: this(null)
		{}

		private ContactAllFields(ContactAllFields other)
			: base(other)
		{
			if (other!=null)
			{
				Gender = other.Gender;
				DateOfBirth = other.DateOfBirth;
				Prefix = other.Prefix;
				FirstName = other.FirstName;
				MiddleName = other.MiddleName;
				LastName = other.LastName;
				Suffix = other.Suffix;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		protected override void OnPreSave()
		{
			base.OnPreSave();
			PartialPreSave();
        }

		partial void PartialValidate();

		public override void Validate()
        {
			base.Validate();
			Requires.Text(Gender, nameof(Gender), true, 0, 100);
			Requires.Text(Prefix, nameof(Prefix), true, 0, 255);
			Requires.Text(FirstName, nameof(FirstName), true, 0, 255);
			Requires.Text(MiddleName, nameof(MiddleName), true, 0, 255);
			Requires.Text(LastName, nameof(LastName), true, 0, 255);
			Requires.Text(Suffix, nameof(Suffix), true, 0, 255);
			PartialValidate();
        }
	}

	/// <summary>
	/// Assets that are used in a communication piece
	/// </summary>
	[Table("Creatives", Schema = "dbo")]
	public partial class Creative : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted
	{
        public static readonly Creative[] None = new Creative[0];

		[InverseProperty("Creative")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Communication> CreativeCommunications { get; set; } = new List<Communication>();

		[InverseProperty("Creative")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<CommunicationBlast> CreativeCommunicationBlasts { get; set; } = new List<CommunicationBlast>();

		[DisplayName("Creative Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("CreativeId")]
		public int CreativeId { get; set; }

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		/// <summary>
		/// Datetime when this entity was created.
		/// </summary>
		[Description("Datetime when this entity was created.")]
		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		/// <summary>
		/// Identifyable title for this asset.
		/// </summary>
		[Description("Identifyable title for this asset.")]
		[DisplayName("Creative Title")]
		[MaxLength(255)]
		[Column("CreativeTitle")]
		public string CreativeTitle { get; set; }

		[DisplayName("Model Type")]
		[NotMapped]
		public Traffk.Bal.Communications.CommunicationModelTypes ModelType
        {
            get
            {
                Traffk.Bal.Communications.CommunicationModelTypes e;
                if (Enum.TryParse(ModelTypeStringValue, true, out e)) return e;
                return 0;
            }
            set { ModelTypeStringValue = value.ToString(); }
        }

		[MaxLength(80)]
		[Column("ModelType")]
		public string ModelTypeStringValue { get; set; }

		[DisplayName("Template Engine Type")]
		[NotMapped]
		public Traffk.Bal.Communications.TemplateEngineTypes TemplateEngineType
        {
            get
            {
                Traffk.Bal.Communications.TemplateEngineTypes e;
                if (Enum.TryParse(TemplateEngineTypeStringValue, true, out e)) return e;
                return 0;
            }
            set { TemplateEngineTypeStringValue = value.ToString(); }
        }

		[NotNull]
		[Required]
		[MaxLength(80)]
		[Column("TemplateEngineType")]
		public string TemplateEngineTypeStringValue { get; set; }

		[DisplayName("Creative Settings")]
		partial void OnCreativeSettingsDeserialized();

        [NotMapped]
        public Bal.Settings.CreativeSettings CreativeSettings
        {
            get
            {
                if (CreativeSettings_p == null)
                {
                    CreativeSettings_p = Bal.Settings.CreativeSettings.CreateFromJson(CreativeSettingsJson) ?? new Bal.Settings.CreativeSettings();
					OnCreativeSettingsDeserialized();
                }
                return CreativeSettings_p;
            }
            set { CreativeSettings_p = value; }
        }
        private Bal.Settings.CreativeSettings CreativeSettings_p;

		[Column("CreativeSettings")]
		public string CreativeSettingsJson { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} CreativeId={CreativeId} {extras}";
		}

		partial void OnConstructed();
	
		public Creative()
			: this(null)
		{}

		public Creative(Creative other)
		{
			if (other!=null)
			{
				CreativeCommunications = other.CreativeCommunications;
				CreativeCommunicationBlasts = other.CreativeCommunicationBlasts;
				TenantId = other.TenantId;
				CreativeTitle = other.CreativeTitle;
				ModelTypeStringValue = other.ModelTypeStringValue;
				TemplateEngineTypeStringValue = other.TemplateEngineTypeStringValue;
				CreativeSettingsJson = other.CreativeSettingsJson;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
            if (CreativeSettings_p != null)
            {
				var json = CreativeSettings_p.ToJson();
				if (CreativeSettingsJson != json)
				{
					CreativeSettingsJson = json;
				}				 
            }
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.Text(CreativeTitle, nameof(CreativeTitle), true, 0, 255);
			Requires.Text(ModelTypeStringValue, nameof(ModelTypeStringValue), true, 0, 80);
			Requires.NonNull(TemplateEngineTypeStringValue, nameof(TemplateEngineTypeStringValue));
			Requires.Text(TemplateEngineTypeStringValue, nameof(TemplateEngineTypeStringValue), true, 0, 80);
			PartialValidate();
        }
	}

	[Table("DateDimensions", Schema = "dbo")]
	public partial class DateDimension : IRdbDataEntity, IValidate, IPreSave
	{
        public static readonly DateDimension[] None = new DateDimension[0];

		[InverseProperty("InsLtdEffDateDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Eligibility> InsLtdEffDateDateDimEligibilitys { get; set; } = new List<Eligibility>();

		[InverseProperty("InsLtdTermDateDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Eligibility> InsLtdTermDateDateDimEligibilitys { get; set; } = new List<Eligibility>();

		[InverseProperty("InsStdEffDateDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Eligibility> InsStdEffDateDateDimEligibilitys { get; set; } = new List<Eligibility>();

		[InverseProperty("InsStdTermDateDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Eligibility> InsStdTermDateDateDimEligibilitys { get; set; } = new List<Eligibility>();

		[InverseProperty("MbrDobDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Pharmacy> MbrDobDateDimPharmacys { get; set; } = new List<Pharmacy>();

		[InverseProperty("SvcWrittenDateDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Pharmacy> SvcWrittenDateDateDimPharmacys { get; set; } = new List<Pharmacy>();

		[InverseProperty("SvcFilledDateDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Pharmacy> SvcFilledDateDateDimPharmacys { get; set; } = new List<Pharmacy>();

		[InverseProperty("SvcServiceDateDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Pharmacy> SvcServiceDateDateDimPharmacys { get; set; } = new List<Pharmacy>();

		[InverseProperty("RevPaidDateDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Pharmacy> RevPaidDateDateDimPharmacys { get; set; } = new List<Pharmacy>();

		[InverseProperty("MbrDobDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MedicalClaim> MbrDobDateDimMedicalClaims { get; set; } = new List<MedicalClaim>();

		[InverseProperty("SvcServiceFrmDateDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MedicalClaim> SvcServiceFrmDateDateDimMedicalClaims { get; set; } = new List<MedicalClaim>();

		[InverseProperty("SvcServiceToDateDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MedicalClaim> SvcServiceToDateDateDimMedicalClaims { get; set; } = new List<MedicalClaim>();

		[InverseProperty("RevAdjudicationDateDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MedicalClaim> RevAdjudicationDateDateDimMedicalClaims { get; set; } = new List<MedicalClaim>();

		[InverseProperty("RevPaidDateDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MedicalClaim> RevPaidDateDateDimMedicalClaims { get; set; } = new List<MedicalClaim>();

		[InverseProperty("DwCreationDateDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MedicalClaim> DwCreationDateDateDimMedicalClaims { get; set; } = new List<MedicalClaim>();

		[InverseProperty("DwUpdateDateDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MedicalClaim> DwUpdateDateDateDimMedicalClaims { get; set; } = new List<MedicalClaim>();

		[InverseProperty("MbrDobDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Demographic> MbrDobDateDimDemographics { get; set; } = new List<Demographic>();

		[InverseProperty("MbrStartDateDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Visit> MbrStartDateDateDimVisits { get; set; } = new List<Visit>();

		[InverseProperty("MbrEndDateDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Visit> MbrEndDateDateDimVisits { get; set; } = new List<Visit>();

		[InverseProperty("StartDateDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MemberPCP> StartDateDateDimMemberPCPs { get; set; } = new List<MemberPCP>();

		[InverseProperty("EndDateDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MemberPCP> EndDateDateDimMemberPCPs { get; set; } = new List<MemberPCP>();

		[InverseProperty("ScoreStartDateDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Score> ScoreStartDateDateDimScores { get; set; } = new List<Score>();

		[InverseProperty("ScoreEndDateDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Score> ScoreEndDateDateDimScores { get; set; } = new List<Score>();

		[InverseProperty("ScoreStartDateDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<HistoricalScore> ScoreStartDateDateDimHistoricalScores { get; set; } = new List<HistoricalScore>();

		[InverseProperty("ScoreEndDateDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<HistoricalScore> ScoreEndDateDateDimHistoricalScores { get; set; } = new List<HistoricalScore>();

		[InverseProperty("ProgramStartDateDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Participation> ProgramStartDateDateDimParticipations { get; set; } = new List<Participation>();

		[InverseProperty("ProgramEndDateDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Participation> ProgramEndDateDateDimParticipations { get; set; } = new List<Participation>();

		[InverseProperty("MemberdobDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<QualityMetric> MemberdobDateDimQualityMetrics { get; set; } = new List<QualityMetric>();

		[InverseProperty("StartdateDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<QualityMetric> StartdateDateDimQualityMetrics { get; set; } = new List<QualityMetric>();

		[InverseProperty("EnddateDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<QualityMetric> EnddateDateDimQualityMetrics { get; set; } = new List<QualityMetric>();

		[InverseProperty("MbrDobDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<CareAlert> MbrDobDateDimCareAlerts { get; set; } = new List<CareAlert>();

		[InverseProperty("CareAlertStartdateDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<CareAlert> CareAlertStartdateDateDimCareAlerts { get; set; } = new List<CareAlert>();

		[InverseProperty("MbrDobDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Eligibility> MbrDobDateDimEligibilitys { get; set; } = new List<Eligibility>();

		[InverseProperty("InsMedEffDateDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Eligibility> InsMedEffDateDateDimEligibilitys { get; set; } = new List<Eligibility>();

		[InverseProperty("InsMedTermDateDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Eligibility> InsMedTermDateDateDimEligibilitys { get; set; } = new List<Eligibility>();

		[InverseProperty("InsRxEffDateDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Eligibility> InsRxEffDateDateDimEligibilitys { get; set; } = new List<Eligibility>();

		[InverseProperty("InsRxTermDateDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Eligibility> InsRxTermDateDateDimEligibilitys { get; set; } = new List<Eligibility>();

		[InverseProperty("InsDenEffDateDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Eligibility> InsDenEffDateDateDimEligibilitys { get; set; } = new List<Eligibility>();

		[InverseProperty("InsDenTermDateDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Eligibility> InsDenTermDateDateDimEligibilitys { get; set; } = new List<Eligibility>();

		[InverseProperty("InsVisEffDateDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Eligibility> InsVisEffDateDateDimEligibilitys { get; set; } = new List<Eligibility>();

		[InverseProperty("InsVisTermDateDateDim")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Eligibility> InsVisTermDateDateDimEligibilitys { get; set; } = new List<Eligibility>();

		[DisplayName("Date Dimension Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("DateDimensionId")]
		public int DateDimensionId { get; set; }

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Calendar Date")]
		[Column("CalendarDate")]
		public DateTime CalendarDate { get; set; }

		[DisplayName("Calendar Year")]
		[Column("CalendarYear")]
		public int? CalendarYear { get; set; }

		[DisplayName("Calendar Quarter")]
		[Column("CalendarQuarter")]
		public int? CalendarQuarter { get; set; }

		[DisplayName("Calendar Month")]
		[Column("CalendarMonth")]
		public int? CalendarMonth { get; set; }

		[DisplayName("Calendar Day")]
		[Column("CalendarDay")]
		public int? CalendarDay { get; set; }

		[DisplayName("Fiscal Year")]
		[Column("FiscalYear")]
		public int FiscalYear { get; set; }

		[DisplayName("Fiscal Quarter")]
		[Column("FiscalQuarter")]
		public byte FiscalQuarter { get; set; }

		[DisplayName("Fiscal Month")]
		[Column("FiscalMonth")]
		public byte FiscalMonth { get; set; }

		[DisplayName("Fiscal Day")]
		[Column("FiscalDay")]
		public int FiscalDay { get; set; }

		[DisplayName("Fiscal Year Name")]
		[NotNull]
		[Required]
		[MaxLength(50)]
		[Column("FiscalYearName")]
		public string FiscalYearName { get; set; }

		[DisplayName("Fiscal Quarter Name")]
		[NotNull]
		[Required]
		[MaxLength(50)]
		[Column("FiscalQuarterName")]
		public string FiscalQuarterName { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} DateDimensionId={DateDimensionId} {extras}";
		}

		partial void OnConstructed();
	
		public DateDimension()
			: this(null)
		{}

		public DateDimension(DateDimension other)
		{
			if (other!=null)
			{
				InsLtdEffDateDateDimEligibilitys = other.InsLtdEffDateDateDimEligibilitys;
				InsLtdTermDateDateDimEligibilitys = other.InsLtdTermDateDateDimEligibilitys;
				InsStdEffDateDateDimEligibilitys = other.InsStdEffDateDateDimEligibilitys;
				InsStdTermDateDateDimEligibilitys = other.InsStdTermDateDateDimEligibilitys;
				MbrDobDateDimPharmacys = other.MbrDobDateDimPharmacys;
				SvcWrittenDateDateDimPharmacys = other.SvcWrittenDateDateDimPharmacys;
				SvcFilledDateDateDimPharmacys = other.SvcFilledDateDateDimPharmacys;
				SvcServiceDateDateDimPharmacys = other.SvcServiceDateDateDimPharmacys;
				RevPaidDateDateDimPharmacys = other.RevPaidDateDateDimPharmacys;
				MbrDobDateDimMedicalClaims = other.MbrDobDateDimMedicalClaims;
				SvcServiceFrmDateDateDimMedicalClaims = other.SvcServiceFrmDateDateDimMedicalClaims;
				SvcServiceToDateDateDimMedicalClaims = other.SvcServiceToDateDateDimMedicalClaims;
				RevAdjudicationDateDateDimMedicalClaims = other.RevAdjudicationDateDateDimMedicalClaims;
				RevPaidDateDateDimMedicalClaims = other.RevPaidDateDateDimMedicalClaims;
				DwCreationDateDateDimMedicalClaims = other.DwCreationDateDateDimMedicalClaims;
				DwUpdateDateDateDimMedicalClaims = other.DwUpdateDateDateDimMedicalClaims;
				MbrDobDateDimDemographics = other.MbrDobDateDimDemographics;
				MbrStartDateDateDimVisits = other.MbrStartDateDateDimVisits;
				MbrEndDateDateDimVisits = other.MbrEndDateDateDimVisits;
				StartDateDateDimMemberPCPs = other.StartDateDateDimMemberPCPs;
				EndDateDateDimMemberPCPs = other.EndDateDateDimMemberPCPs;
				ScoreStartDateDateDimScores = other.ScoreStartDateDateDimScores;
				ScoreEndDateDateDimScores = other.ScoreEndDateDateDimScores;
				ScoreStartDateDateDimHistoricalScores = other.ScoreStartDateDateDimHistoricalScores;
				ScoreEndDateDateDimHistoricalScores = other.ScoreEndDateDateDimHistoricalScores;
				ProgramStartDateDateDimParticipations = other.ProgramStartDateDateDimParticipations;
				ProgramEndDateDateDimParticipations = other.ProgramEndDateDateDimParticipations;
				MemberdobDateDimQualityMetrics = other.MemberdobDateDimQualityMetrics;
				StartdateDateDimQualityMetrics = other.StartdateDateDimQualityMetrics;
				EnddateDateDimQualityMetrics = other.EnddateDateDimQualityMetrics;
				MbrDobDateDimCareAlerts = other.MbrDobDateDimCareAlerts;
				CareAlertStartdateDateDimCareAlerts = other.CareAlertStartdateDateDimCareAlerts;
				MbrDobDateDimEligibilitys = other.MbrDobDateDimEligibilitys;
				InsMedEffDateDateDimEligibilitys = other.InsMedEffDateDateDimEligibilitys;
				InsMedTermDateDateDimEligibilitys = other.InsMedTermDateDateDimEligibilitys;
				InsRxEffDateDateDimEligibilitys = other.InsRxEffDateDateDimEligibilitys;
				InsRxTermDateDateDimEligibilitys = other.InsRxTermDateDateDimEligibilitys;
				InsDenEffDateDateDimEligibilitys = other.InsDenEffDateDateDimEligibilitys;
				InsDenTermDateDateDimEligibilitys = other.InsDenTermDateDateDimEligibilitys;
				InsVisEffDateDateDimEligibilitys = other.InsVisEffDateDateDimEligibilitys;
				InsVisTermDateDateDimEligibilitys = other.InsVisTermDateDateDimEligibilitys;
				TenantId = other.TenantId;
				CalendarDate = other.CalendarDate;
				CalendarYear = other.CalendarYear;
				CalendarQuarter = other.CalendarQuarter;
				CalendarMonth = other.CalendarMonth;
				CalendarDay = other.CalendarDay;
				FiscalYear = other.FiscalYear;
				FiscalQuarter = other.FiscalQuarter;
				FiscalMonth = other.FiscalMonth;
				FiscalDay = other.FiscalDay;
				FiscalYearName = other.FiscalYearName;
				FiscalQuarterName = other.FiscalQuarterName;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(FiscalYearName, nameof(FiscalYearName));
			Requires.Text(FiscalYearName, nameof(FiscalYearName), true, 0, 50);
			Requires.NonNull(FiscalQuarterName, nameof(FiscalQuarterName));
			Requires.Text(FiscalQuarterName, nameof(FiscalQuarterName), true, 0, 50);
			PartialValidate();
        }
	}

	[Table("Jobs", Schema = "dbo")]
	public partial class Job : IRdbDataEntity, IValidate, IPreSave
	{
        public static readonly Job[] None = new Job[0];

		[InverseProperty("Job")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<CommunicationBlast> JobCommunicationBlasts { get; set; } = new List<CommunicationBlast>();

		[DisplayName("Job Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("JobId")]
		public int JobId { get; set; }

		[DisplayName("Job Type")]
		[NotMapped]
		public JobTypes JobType
        {
            get
            {
                JobTypes e;
                if (Enum.TryParse(JobTypeStringValue, true, out e)) return e;
                return 0;
            }
            set { JobTypeStringValue = value.ToString(); }
        }

		[NotNull]
		[Required]
		[MaxLength(80)]
		[Column("JobType")]
		public string JobTypeStringValue { get; set; }

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int? TenantId { get; set; }

		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		/// <summary>
		/// Datetime when this entity was created.
		/// </summary>
		[Description("Datetime when this entity was created.")]
		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Dont Run Before Utc")]
		[Column("DontRunBeforeUtc")]
		public DateTime? DontRunBeforeUtc { get; set; }

		[DisplayName("Dont Run Before")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime? DontRunBefore => DontRunBeforeUtc?.ToLocalTime();

		[DisplayName("Job Status")]
		[NotMapped]
		public JobStatuses JobStatus
        {
            get
            {
                JobStatuses e;
                if (Enum.TryParse(JobStatusStringValue, true, out e)) return e;
                return 0;
            }
            set { JobStatusStringValue = value.ToString(); }
        }

		[NotNull]
		[Required]
		[MaxLength(80)]
		[Column("JobStatus")]
		public string JobStatusStringValue { get; set; }

		[DisplayName("Dequeued At Utc")]
		[Column("DequeuedAtUtc")]
		public DateTime? DequeuedAtUtc { get; set; }

		[DisplayName("Dequeued At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime? DequeuedAt => DequeuedAtUtc?.ToLocalTime();

		[DisplayName("Completed At Utc")]
		[Column("CompletedAtUtc")]
		public DateTime? CompletedAtUtc { get; set; }

		[DisplayName("Completed At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime? CompletedAt => CompletedAtUtc?.ToLocalTime();

		[DisplayName("Priority")]
		[Column("Priority")]
		public int Priority { get; set; }

		[DisplayName("Service Role Machine Name")]
		[MaxLength(80)]
		[Column("ServiceRoleMachineName")]
		public string ServiceRoleMachineName { get; set; }

		[DisplayName("Job Data")]
		[Column("JobData")]
		public string JobData { get; set; }

		[DisplayName("Job Result")]
		partial void OnJobResultDeserialized();

        [NotMapped]
        public Traffk.Bal.JobResult JobResult
        {
            get
            {
                if (JobResult_p == null)
                {
                    JobResult_p = Traffk.Bal.JobResult.CreateFromJson(JobResultJson) ?? new Traffk.Bal.JobResult();
					OnJobResultDeserialized();
                }
                return JobResult_p;
            }
            set { JobResult_p = value; }
        }
        private Traffk.Bal.JobResult JobResult_p;

		[Column("JobResult")]
		public string JobResultJson { get; set; }

		[DisplayName("Concurrency Token")]
		[MaxLength(80)]
		[Column("ConcurrencyToken")]
		public string ConcurrencyToken { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} JobId={JobId} {extras}";
		}

		partial void OnConstructed();
	
		public Job()
			: this(null)
		{}

		public Job(Job other)
		{
			if (other!=null)
			{
				JobCommunicationBlasts = other.JobCommunicationBlasts;
				JobTypeStringValue = other.JobTypeStringValue;
				TenantId = other.TenantId;
				DontRunBeforeUtc = other.DontRunBeforeUtc;
				JobStatusStringValue = other.JobStatusStringValue;
				DequeuedAtUtc = other.DequeuedAtUtc;
				CompletedAtUtc = other.CompletedAtUtc;
				Priority = other.Priority;
				ServiceRoleMachineName = other.ServiceRoleMachineName;
				JobData = other.JobData;
				JobResultJson = other.JobResultJson;
				ConcurrencyToken = other.ConcurrencyToken;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
            if (JobResult_p != null)
            {
				var json = JobResult_p.ToJson();
				if (JobResultJson != json)
				{
					JobResultJson = json;
				}				 
            }
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(JobTypeStringValue, nameof(JobTypeStringValue));
			Requires.Text(JobTypeStringValue, nameof(JobTypeStringValue), true, 0, 80);
			Requires.NonNull(JobStatusStringValue, nameof(JobStatusStringValue));
			Requires.Text(JobStatusStringValue, nameof(JobStatusStringValue), true, 0, 80);
			Requires.Text(ServiceRoleMachineName, nameof(ServiceRoleMachineName), true, 0, 80);
			Requires.Text(ConcurrencyToken, nameof(ConcurrencyToken), true, 0, 80);
			PartialValidate();
        }
	}

	[Table("ReleaseChanges", Schema = "dbo")]
	public partial class ReleaseChange : IRdbDataEntity, IValidate, IPreSave
	{
        public static readonly ReleaseChange[] None = new ReleaseChange[0];

		[DisplayName("Release Change Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("ReleaseChangeId")]
		public int ReleaseChangeId { get; set; }

		[DisplayName("Release Id")]
		[Column("ReleaseId")]
		public int ReleaseId { get; set; }

		[ForeignKey("ReleaseId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Release Release { get; set; }

		[DisplayName("Change Type")]
		[MaxLength(255)]
		[Column("ChangeType")]
		public string ChangeType { get; set; }

		[DisplayName("Title")]
		[MaxLength(255)]
		[Column("Title")]
		public string Title { get; set; }

		[DisplayName("Order")]
		[Column("Order")]
		public int? Order { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} ReleaseChangeId={ReleaseChangeId} {extras}";
		}

		partial void OnConstructed();
	
		public ReleaseChange()
			: this(null)
		{}

		public ReleaseChange(ReleaseChange other)
		{
			if (other!=null)
			{
				ReleaseId = other.ReleaseId;
				ChangeType = other.ChangeType;
				Title = other.Title;
				Order = other.Order;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.Text(ChangeType, nameof(ChangeType), true, 0, 255);
			Requires.Text(Title, nameof(Title), true, 0, 255);
			PartialValidate();
        }
	}

	[Table("Releases", Schema = "dbo")]
	public partial class Release : IRdbDataEntity, IValidate, IPreSave
	{
        public static readonly Release[] None = new Release[0];

		[InverseProperty("Release")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<ReleaseChange> ReleaseReleaseChanges { get; set; } = new List<ReleaseChange>();

		[DisplayName("Release Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("ReleaseId")]
		public int ReleaseId { get; set; }

		[DisplayName("Application Type")]
		[NotNull]
		[Required]
		[MaxLength(80)]
		[Column("ApplicationType")]
		public string ApplicationType { get; set; }

		[DisplayName("Release Date")]
		[Column("ReleaseDate")]
		public DateTime? ReleaseDate { get; set; }

		[DisplayName("Release Name")]
		[MaxLength(255)]
		[Column("ReleaseName")]
		public string ReleaseName { get; set; }

		[DisplayName("Release Notes")]
		[Column("ReleaseNotes")]
		public string ReleaseNotes { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} ReleaseId={ReleaseId} {extras}";
		}

		partial void OnConstructed();
	
		public Release()
			: this(null)
		{}

		public Release(Release other)
		{
			if (other!=null)
			{
				ReleaseReleaseChanges = other.ReleaseReleaseChanges;
				ApplicationType = other.ApplicationType;
				ReleaseDate = other.ReleaseDate;
				ReleaseName = other.ReleaseName;
				ReleaseNotes = other.ReleaseNotes;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(ApplicationType, nameof(ApplicationType));
			Requires.Text(ApplicationType, nameof(ApplicationType), true, 0, 80);
			Requires.Text(ReleaseName, nameof(ReleaseName), true, 0, 255);
			PartialValidate();
        }
	}

	[Table("Tenants", Schema = "dbo")]
	public partial class Tenant : IRdbDataEntity, IValidate, IPreSave
	{
        public static readonly Tenant[] None = new Tenant[0];

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Communication> TenantCommunications { get; set; } = new List<Communication>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<CommunicationBlast> TenantCommunicationBlasts { get; set; } = new List<CommunicationBlast>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Eligibility> TenantEligibilitys { get; set; } = new List<Eligibility>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<CommunicationPiece> TenantCommunicationPieces { get; set; } = new List<CommunicationPiece>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Pharmacy> TenantPharmacys { get; set; } = new List<Pharmacy>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MedicalClaim> TenantMedicalClaims { get; set; } = new List<MedicalClaim>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Demographic> TenantDemographics { get; set; } = new List<Demographic>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<UserActivity> TenantUserActivitys { get; set; } = new List<UserActivity>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Visit> TenantVisits { get; set; } = new List<Visit>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<MemberPCP> TenantMemberPCPs { get; set; } = new List<MemberPCP>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Score> TenantScores { get; set; } = new List<Score>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<HistoricalScore> TenantHistoricalScores { get; set; } = new List<HistoricalScore>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Creative> TenantCreatives { get; set; } = new List<Creative>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Participation> TenantParticipations { get; set; } = new List<Participation>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Contact> TenantContacts { get; set; } = new List<Contact>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<QualityMetric> TenantQualityMetrics { get; set; } = new List<QualityMetric>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<HighCostDiagnosi> TenantHighCostDiagnosis { get; set; } = new List<HighCostDiagnosi>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Job> TenantJobs { get; set; } = new List<Job>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<CareAlert> TenantCareAlerts { get; set; } = new List<CareAlert>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<CommunicationBlastTracker> TenantCommunicationBlastTrackers { get; set; } = new List<CommunicationBlastTracker>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<CommunicationPieceVisit> TenantCommunicationPieceVisits { get; set; } = new List<CommunicationPieceVisit>();

		[InverseProperty("ParentTenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Tenant> ParentTenantTenants { get; set; } = new List<Tenant>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<ApplicationUser> TenantApplicationUsers { get; set; } = new List<ApplicationUser>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<ApplicationRole> TenantApplicationRoles { get; set; } = new List<ApplicationRole>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<Application> TenantApplications { get; set; } = new List<Application>();

		[InverseProperty("Tenant")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<DateDimension> TenantDateDimensions { get; set; } = new List<DateDimension>();

		[DisplayName("Tenant Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("TenantId")]
		public int TenantId { get; set; }

		[DisplayName("Parent Tenant Id")]
		[Column("ParentTenantId")]
		public int? ParentTenantId { get; set; }

		[ForeignKey("ParentTenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant ParentTenant { get; set; }

		/// <summary>
		/// Datetime when this entity was created.
		/// </summary>
		[Description("Datetime when this entity was created.")]
		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Tenant Name")]
		[NotNull]
		[Required]
		[MaxLength(255)]
		[Column("TenantName")]
		public string TenantName { get; set; }

		[DisplayName("Login Domain")]
		[MaxLength(80)]
		[Column("LoginDomain")]
		public string LoginDomain { get; set; }

		[DisplayName("Tenant Settings")]
		partial void OnTenantSettingsDeserialized();

        [NotMapped]
        public Bal.Settings.TenantSettings TenantSettings
        {
            get
            {
                if (TenantSettings_p == null)
                {
                    TenantSettings_p = Bal.Settings.TenantSettings.CreateFromJson(TenantSettingsJson) ?? new Bal.Settings.TenantSettings();
					OnTenantSettingsDeserialized();
                }
                return TenantSettings_p;
            }
            set { TenantSettings_p = value; }
        }
        private Bal.Settings.TenantSettings TenantSettings_p;

		[Column("TenantSettings")]
		public string TenantSettingsJson { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} TenantId={TenantId} {extras}";
		}

		partial void OnConstructed();
	
		public Tenant()
			: this(null)
		{}

		public Tenant(Tenant other)
		{
			if (other!=null)
			{
				TenantCommunications = other.TenantCommunications;
				TenantCommunicationBlasts = other.TenantCommunicationBlasts;
				TenantEligibilitys = other.TenantEligibilitys;
				TenantCommunicationPieces = other.TenantCommunicationPieces;
				TenantPharmacys = other.TenantPharmacys;
				TenantMedicalClaims = other.TenantMedicalClaims;
				TenantDemographics = other.TenantDemographics;
				TenantUserActivitys = other.TenantUserActivitys;
				TenantVisits = other.TenantVisits;
				TenantMemberPCPs = other.TenantMemberPCPs;
				TenantScores = other.TenantScores;
				TenantHistoricalScores = other.TenantHistoricalScores;
				TenantCreatives = other.TenantCreatives;
				TenantParticipations = other.TenantParticipations;
				TenantContacts = other.TenantContacts;
				TenantQualityMetrics = other.TenantQualityMetrics;
				TenantHighCostDiagnosis = other.TenantHighCostDiagnosis;
				TenantJobs = other.TenantJobs;
				TenantCareAlerts = other.TenantCareAlerts;
				TenantCommunicationBlastTrackers = other.TenantCommunicationBlastTrackers;
				TenantCommunicationPieceVisits = other.TenantCommunicationPieceVisits;
				ParentTenantTenants = other.ParentTenantTenants;
				TenantApplicationUsers = other.TenantApplicationUsers;
				TenantApplicationRoles = other.TenantApplicationRoles;
				TenantApplications = other.TenantApplications;
				TenantDateDimensions = other.TenantDateDimensions;
				ParentTenantId = other.ParentTenantId;
				TenantName = other.TenantName;
				LoginDomain = other.LoginDomain;
				TenantSettingsJson = other.TenantSettingsJson;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
            if (TenantSettings_p != null)
            {
				var json = TenantSettings_p.ToJson();
				if (TenantSettingsJson != json)
				{
					TenantSettingsJson = json;
				}				 
            }
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(TenantName, nameof(TenantName));
			Requires.Text(TenantName, nameof(TenantName), true, 0, 255);
			Requires.Text(LoginDomain, nameof(LoginDomain), true, 0, 80);
			PartialValidate();
        }
	}

	[Table("UserActivities", Schema = "dbo")]
	public partial class UserActivity : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted
	{
        public static readonly UserActivity[] None = new UserActivity[0];

		[DisplayName("User Activity Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("UserActivityId")]
		public int UserActivityId { get; set; }

		[DisplayName("User Id")]
		[NotNull]
		[Required]
		[MaxLength(450)]
		[Column("UserId")]
		public string UserId { get; set; }

		[ForeignKey("UserId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public ApplicationUser User { get; set; }

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		/// <summary>
		/// Datetime when this entity was created.
		/// </summary>
		[Description("Datetime when this entity was created.")]
		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Activity Type")]
		[NotNull]
		[Required]
		[MaxLength(80)]
		[Column("ActivityType")]
		public string ActivityType { get; set; }

		[DisplayName("Activity Result")]
		[MaxLength(80)]
		[Column("ActivityResult")]
		public string ActivityResult { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} UserActivityId={UserActivityId} {extras}";
		}

		partial void OnConstructed();
	
		public UserActivity()
			: this(null)
		{}

		public UserActivity(UserActivity other)
		{
			if (other!=null)
			{
				UserId = other.UserId;
				TenantId = other.TenantId;
				ActivityType = other.ActivityType;
				ActivityResult = other.ActivityResult;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(UserId, nameof(UserId));
			Requires.Text(UserId, nameof(UserId), true, 0, 450);
			Requires.NonNull(ActivityType, nameof(ActivityType));
			Requires.Text(ActivityType, nameof(ActivityType), true, 0, 80);
			Requires.Text(ActivityResult, nameof(ActivityResult), true, 0, 80);
			PartialValidate();
        }
	}

	[Table("CareAlerts", Schema = "deerwalk")]
	public partial class CareAlert : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted, IDontCreate
	{
        public static readonly CareAlert[] None = new CareAlert[0];

		[DisplayName("Care Alert Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("CareAlertId")]
		public long CareAlertId { get; set; }

		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Contact Id")]
		[Column("ContactId")]
		public long? ContactId { get; set; }

		[ForeignKey("ContactId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Contact Contact { get; set; }

		/// <summary>
		/// Auto-increment number-a unique identifier for Makalu engine
		/// </summary>
		[Description("Auto-increment number-a unique identifier for Makalu engine")]
		[DisplayName("Care Alert RID")]
		[SampleData("1")]
		[Column("dw_record_id")]
		public int? dw_record_id { get; set; }

		/// <summary>
		/// Member ID
		/// </summary>
		[Description("Member ID")]
		[DisplayName("Member ID")]
		[SampleData("Hash Encrypted")]
		[MaxLength(50)]
		[Column("dw_member_id")]
		public string dw_member_id { get; set; }

		/// <summary>
		/// Member ID to display on the application, as sent by client
		/// </summary>
		[Description("Member ID to display on the application, as sent by client")]
		[DisplayName("Member ID")]
		[SampleData("15435")]
		[MaxLength(50)]
		[Column("mbr_id")]
		public string mbr_id { get; set; }

		/// <summary>
		/// Member first name
		/// </summary>
		[Description("Member first name")]
		[DisplayName("Member first")]
		[MaxLength(50)]
		[Column("first_name")]
		public string first_name { get; set; }

		/// <summary>
		/// Member last name
		/// </summary>
		[Description("Member last name")]
		[DisplayName("Member last")]
		[MaxLength(20)]
		[Column("last_name")]
		public string last_name { get; set; }

		/// <summary>
		/// Member middle name
		/// </summary>
		[Description("Member middle name")]
		[DisplayName("Middle Name")]
		[MaxLength(10)]
		[Column("middle_name")]
		public string middle_name { get; set; }

		/// <summary>
		/// Member date of birth
		/// </summary>
		[Description("Member date of birth")]
		[DisplayName("DOB")]
		[SampleData("yyyy-mm-dd")]
		[Column("mbr_dob")]
		public DateTime? mbr_dob { get; set; }

		[DisplayName("Gender")]
		[SampleData("Male, Female")]
		[MaxLength(10)]
		[Column("mbr_gender")]
		public string mbr_gender { get; set; }

		/// <summary>
		/// Active or Termed
		/// </summary>
		[Description("Active or Termed")]
		[DisplayName("Active or")]
		[MaxLength(10)]
		[Column("mbr_status")]
		public string mbr_status { get; set; }

		/// <summary>
		/// Relationship
		/// </summary>
		[Description("Relationship")]
		[DisplayName("Relationship")]
		[SampleData("Employee, Dependent")]
		[MaxLength(50)]
		[Column("mbr_relationship")]
		public string mbr_relationship { get; set; }

		/// <summary>
		/// PCP name
		/// </summary>
		[Description("PCP name")]
		[DisplayName("PCP Name")]
		[MaxLength(50)]
		[Column("pcp_full_name")]
		public string pcp_full_name { get; set; }

		/// <summary>
		/// Age of member
		/// </summary>
		[Description("Age of member")]
		[DisplayName("Age")]
		[SampleData("30")]
		[Column("mbr_age")]
		public int? mbr_age { get; set; }

		/// <summary>
		/// Member Months
		/// </summary>
		[Description("Member Months")]
		[DisplayName("Member Months")]
		[SampleData("11")]
		[MaxLength(3)]
		[Column("mbr_months")]
		public string mbr_months { get; set; }

		/// <summary>
		/// Care Alert Date
		/// </summary>
		[Description("Care Alert Date")]
		[DisplayName("Care Alert")]
		[SampleData("yyyy-mm-dd")]
		[Column("care_alert_startDate")]
		public DateTime? care_alert_startDate { get; set; }

		/// <summary>
		/// Care Alert Id
		/// </summary>
		[Description("Care Alert Id")]
		[DisplayName("Care Alert")]
		[MaxLength(50)]
		[Column("care_alert_id")]
		public string care_alert_id { get; set; }

		/// <summary>
		/// Care Alert Description
		/// </summary>
		[Description("Care Alert Description")]
		[DisplayName("Care Alert")]
		[MaxLength(200)]
		[Column("care_alert_desc")]
		public string care_alert_desc { get; set; }

		/// <summary>
		/// Metric type
		/// </summary>
		[Description("Metric type")]
		[DisplayName("Metric Type")]
		[SampleData("Positive Metric or Negative Metric")]
		[MaxLength(50)]
		[Column("metric_Type")]
		public string metric_Type { get; set; }

		/// <summary>
		/// Metric Name
		/// </summary>
		[Description("Metric Name")]
		[DisplayName("Metric Name")]
		[SampleData("Wellness, Hypertension")]
		[MaxLength(50)]
		[Column("metric_name")]
		public string metric_name { get; set; }

		[DisplayName("Mbr Dob Date Dim Id")]
		[Column("MbrDobDateDimId")]
		public int? MbrDobDateDimId { get; set; }

		[ForeignKey("MbrDobDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension MbrDobDateDim { get; set; }

		[DisplayName("Care Alert Startdate Date Dim Id")]
		[Column("CareAlertStartdateDateDimId")]
		public int? CareAlertStartdateDateDimId { get; set; }

		[ForeignKey("CareAlertStartdateDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension CareAlertStartdateDateDim { get; set; }

		[DisplayName("Date Dimensions Linked")]
		[Column("DateDimensionsLinked")]
		public bool DateDimensionsLinked { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} CareAlertId={CareAlertId} {extras}";
		}

		partial void OnConstructed();
	
		public CareAlert()
			: this(null)
		{}

		public CareAlert(CareAlert other)
		{
			if (other!=null)
			{
				TenantId = other.TenantId;
				ContactId = other.ContactId;
				dw_record_id = other.dw_record_id;
				dw_member_id = other.dw_member_id;
				mbr_id = other.mbr_id;
				first_name = other.first_name;
				last_name = other.last_name;
				middle_name = other.middle_name;
				mbr_dob = other.mbr_dob;
				mbr_gender = other.mbr_gender;
				mbr_status = other.mbr_status;
				mbr_relationship = other.mbr_relationship;
				pcp_full_name = other.pcp_full_name;
				mbr_age = other.mbr_age;
				mbr_months = other.mbr_months;
				care_alert_startDate = other.care_alert_startDate;
				care_alert_id = other.care_alert_id;
				care_alert_desc = other.care_alert_desc;
				metric_Type = other.metric_Type;
				metric_name = other.metric_name;
				MbrDobDateDimId = other.MbrDobDateDimId;
				CareAlertStartdateDateDimId = other.CareAlertStartdateDateDimId;
				DateDimensionsLinked = other.DateDimensionsLinked;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.Text(dw_member_id, nameof(dw_member_id), true, 0, 50);
			Requires.Text(mbr_id, nameof(mbr_id), true, 0, 50);
			Requires.Text(first_name, nameof(first_name), true, 0, 50);
			Requires.Text(last_name, nameof(last_name), true, 0, 20);
			Requires.Text(middle_name, nameof(middle_name), true, 0, 10);
			Requires.Text(mbr_gender, nameof(mbr_gender), true, 0, 10);
			Requires.Text(mbr_status, nameof(mbr_status), true, 0, 10);
			Requires.Text(mbr_relationship, nameof(mbr_relationship), true, 0, 50);
			Requires.Text(pcp_full_name, nameof(pcp_full_name), true, 0, 50);
			Requires.Text(mbr_months, nameof(mbr_months), true, 0, 3);
			Requires.Text(care_alert_id, nameof(care_alert_id), true, 0, 50);
			Requires.Text(care_alert_desc, nameof(care_alert_desc), true, 0, 200);
			Requires.Text(metric_Type, nameof(metric_Type), true, 0, 50);
			Requires.Text(metric_name, nameof(metric_name), true, 0, 50);
			PartialValidate();
        }
	}

	[Table("Demographics", Schema = "deerwalk")]
	public partial class Demographic : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted, IDontCreate
	{
        public static readonly Demographic[] None = new Demographic[0];

		[DisplayName("Demographic Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("DemographicId")]
		public long DemographicId { get; set; }

		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Contact Id")]
		[Column("ContactId")]
		public long? ContactId { get; set; }

		[ForeignKey("ContactId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Contact Contact { get; set; }

		/// <summary>
		/// Auto-increment number-a unique identifier for Makalu engine
		/// </summary>
		[Description("Auto-increment number-a unique identifier for Makalu engine")]
		[DisplayName("Demographic RID")]
		[SampleData("1")]
		[Column("dw_record_id")]
		public int? dw_record_id { get; set; }

		/// <summary>
		/// Account id
		/// </summary>
		[Description("Account id")]
		[DisplayName("Account id")]
		[SampleData("1027")]
		[MaxLength(50)]
		[Column("dw_account_id")]
		public string dw_account_id { get; set; }

		/// <summary>
		/// Clientid
		/// </summary>
		[Description("Clientid")]
		[DisplayName("Client ID")]
		[SampleData("1")]
		[MaxLength(10)]
		[Column("dw_client_id")]
		public string dw_client_id { get; set; }

		/// <summary>
		/// Member ID
		/// </summary>
		[Description("Member ID")]
		[DisplayName("Member ID")]
		[SampleData("Hash Encrypted")]
		[MaxLength(50)]
		[Column("dw_member_id")]
		public string dw_member_id { get; set; }

		/// <summary>
		/// Member ID to display on the application, as sent by client
		/// </summary>
		[Description("Member ID to display on the application, as sent by client")]
		[DisplayName("Member ID")]
		[SampleData("9916897")]
		[NotNull]
		[Required]
		[MaxLength(50)]
		[Column("mbr_id")]
		public string mbr_id { get; set; }

		/// <summary>
		/// Member SSN
		/// </summary>
		[Description("Member SSN")]
		[DisplayName("SSN")]
		[SampleData("811619")]
		[MaxLength(30)]
		[Column("mbr_ssn")]
		public string mbr_ssn { get; set; }

		/// <summary>
		/// Member first name
		/// </summary>
		[Description("Member first name")]
		[DisplayName("First Name")]
		[SampleData("BEVERLY")]
		[MaxLength(100)]
		[Column("mbr_first_name")]
		public string mbr_first_name { get; set; }

		/// <summary>
		/// Member middle name
		/// </summary>
		[Description("Member middle name")]
		[DisplayName("Middle Name")]
		[SampleData("George")]
		[MaxLength(100)]
		[Column("mbr_middle_name")]
		public string mbr_middle_name { get; set; }

		/// <summary>
		/// Member last name
		/// </summary>
		[Description("Member last name")]
		[DisplayName("Last Name")]
		[SampleData("BARRETT")]
		[MaxLength(100)]
		[Column("mbr_last_name")]
		public string mbr_last_name { get; set; }

		/// <summary>
		///  Current status of member
		/// </summary>
		[Description(" Current status of member")]
		[DisplayName("Current Status")]
		[SampleData("active")]
		[MaxLength(10)]
		[Column("mbr_current_status")]
		public string mbr_current_status { get; set; }

		/// <summary>
		/// Member gender
		/// </summary>
		[Description("Member gender")]
		[DisplayName("Gender")]
		[SampleData("M")]
		[NotNull]
		[Required]
		[MaxLength(10)]
		[Column("mbr_gender")]
		public string mbr_gender { get; set; }

		/// <summary>
		/// Member date of Birth
		/// </summary>
		[Description("Member date of Birth")]
		[DisplayName("DOB")]
		[SampleData("31597")]
		[Column("mbr_dob")]
		public DateTime mbr_dob { get; set; }

		/// <summary>
		/// Member Street Address 1
		/// </summary>
		[Description("Member Street Address 1")]
		[DisplayName("Street 1")]
		[SampleData("5621 TEAKWOOD ROAD")]
		[MaxLength(100)]
		[Column("mbr_street_1")]
		public string mbr_street_1 { get; set; }

		/// <summary>
		/// Member Street Address 2
		/// </summary>
		[Description("Member Street Address 2")]
		[DisplayName("Street 2")]
		[MaxLength(100)]
		[Column("mbr_street_2")]
		public string mbr_street_2 { get; set; }

		/// <summary>
		/// Member City
		/// </summary>
		[Description("Member City")]
		[DisplayName("City")]
		[SampleData("Lakeworth")]
		[MaxLength(100)]
		[Column("mbr_city")]
		public string mbr_city { get; set; }

		/// <summary>
		/// Member County
		/// </summary>
		[Description("Member County")]
		[DisplayName("County")]
		[SampleData("Lexington")]
		[MaxLength(100)]
		[Column("mbr_county")]
		public string mbr_county { get; set; }

		/// <summary>
		/// Abbreviation of State
		/// </summary>
		[Description("Abbreviation of State")]
		[DisplayName("State")]
		[SampleData("FL")]
		[MaxLength(100)]
		[Column("mbr_state")]
		public string mbr_state { get; set; }

		/// <summary>
		/// Zip code
		/// </summary>
		[Description("Zip code")]
		[DisplayName("Zip")]
		[SampleData("34746")]
		[MaxLength(100)]
		[Column("mbr_zip")]
		public string mbr_zip { get; set; }

		/// <summary>
		/// Member Phone
		/// </summary>
		[Description("Member Phone")]
		[DisplayName("Phone")]
		[SampleData("7802966511")]
		[MaxLength(100)]
		[Column("mbr_phone")]
		public string mbr_phone { get; set; }

		/// <summary>
		/// Member Region code
		/// </summary>
		[Description("Member Region code")]
		[DisplayName("Region Code")]
		[MaxLength(100)]
		[Column("mbr_region_code")]
		public string mbr_region_code { get; set; }

		/// <summary>
		/// Member Region
		/// </summary>
		[Description("Member Region")]
		[DisplayName("Region")]
		[MaxLength(100)]
		[Column("mbr_region_name")]
		public string mbr_region_name { get; set; }

		/// <summary>
		/// Relationship Code to the Subscriber; subscriber(01), spouse (02),child (03), other (04)
		/// </summary>
		[Description("Relationship Code to the Subscriber; subscriber(01), spouse (02),child (03), other (04)")]
		[DisplayName("Relationship Code")]
		[MaxLength(10)]
		[Column("mbr_relationship_code")]
		public string mbr_relationship_code { get; set; }

		/// <summary>
		/// Relationship Description to the Subscriber, Dependent, Spouse
		/// </summary>
		[Description("Relationship Description to the Subscriber, Dependent, Spouse")]
		[DisplayName("Relationship")]
		[SampleData("Dependent")]
		[MaxLength(50)]
		[Column("mbr_relationship_desc")]
		public string mbr_relationship_desc { get; set; }

		/// <summary>
		/// Filename from vendor
		/// </summary>
		[Description("Filename from vendor")]
		[DisplayName("Filename from")]
		[MaxLength(100)]
		[Column("dw_rawfilename")]
		public string dw_rawfilename { get; set; }

		/// <summary>
		/// Month when data is recieved
		/// </summary>
		[Description("Month when data is recieved")]
		[DisplayName("Month when")]
		[SampleData("201106")]
		[MaxLength(100)]
		[Column("dw_recievedmonth")]
		public string dw_recievedmonth { get; set; }

		/// <summary>
		/// Data Vendor Name
		/// </summary>
		[Description("Data Vendor Name")]
		[DisplayName("Data Vendor")]
		[MaxLength(100)]
		[Column("dw_vendor_name")]
		public string dw_vendor_name { get; set; }

		[DisplayName("Mbr Dob Date Dim Id")]
		[Column("MbrDobDateDimId")]
		public int? MbrDobDateDimId { get; set; }

		[ForeignKey("MbrDobDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension MbrDobDateDim { get; set; }

		[DisplayName("Date Dimensions Linked")]
		[Column("DateDimensionsLinked")]
		public bool DateDimensionsLinked { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} DemographicId={DemographicId} {extras}";
		}

		partial void OnConstructed();
	
		public Demographic()
			: this(null)
		{}

		public Demographic(Demographic other)
		{
			if (other!=null)
			{
				TenantId = other.TenantId;
				ContactId = other.ContactId;
				dw_record_id = other.dw_record_id;
				dw_account_id = other.dw_account_id;
				dw_client_id = other.dw_client_id;
				dw_member_id = other.dw_member_id;
				mbr_id = other.mbr_id;
				mbr_ssn = other.mbr_ssn;
				mbr_first_name = other.mbr_first_name;
				mbr_middle_name = other.mbr_middle_name;
				mbr_last_name = other.mbr_last_name;
				mbr_current_status = other.mbr_current_status;
				mbr_gender = other.mbr_gender;
				mbr_dob = other.mbr_dob;
				mbr_street_1 = other.mbr_street_1;
				mbr_street_2 = other.mbr_street_2;
				mbr_city = other.mbr_city;
				mbr_county = other.mbr_county;
				mbr_state = other.mbr_state;
				mbr_zip = other.mbr_zip;
				mbr_phone = other.mbr_phone;
				mbr_region_code = other.mbr_region_code;
				mbr_region_name = other.mbr_region_name;
				mbr_relationship_code = other.mbr_relationship_code;
				mbr_relationship_desc = other.mbr_relationship_desc;
				dw_rawfilename = other.dw_rawfilename;
				dw_recievedmonth = other.dw_recievedmonth;
				dw_vendor_name = other.dw_vendor_name;
				MbrDobDateDimId = other.MbrDobDateDimId;
				DateDimensionsLinked = other.DateDimensionsLinked;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.Text(dw_account_id, nameof(dw_account_id), true, 0, 50);
			Requires.Text(dw_client_id, nameof(dw_client_id), true, 0, 10);
			Requires.Text(dw_member_id, nameof(dw_member_id), true, 0, 50);
			Requires.NonNull(mbr_id, nameof(mbr_id));
			Requires.Text(mbr_id, nameof(mbr_id), true, 0, 50);
			Requires.Text(mbr_ssn, nameof(mbr_ssn), true, 0, 30);
			Requires.Text(mbr_first_name, nameof(mbr_first_name), true, 0, 100);
			Requires.Text(mbr_middle_name, nameof(mbr_middle_name), true, 0, 100);
			Requires.Text(mbr_last_name, nameof(mbr_last_name), true, 0, 100);
			Requires.Text(mbr_current_status, nameof(mbr_current_status), true, 0, 10);
			Requires.NonNull(mbr_gender, nameof(mbr_gender));
			Requires.Text(mbr_gender, nameof(mbr_gender), true, 0, 10);
			Requires.Text(mbr_street_1, nameof(mbr_street_1), true, 0, 100);
			Requires.Text(mbr_street_2, nameof(mbr_street_2), true, 0, 100);
			Requires.Text(mbr_city, nameof(mbr_city), true, 0, 100);
			Requires.Text(mbr_county, nameof(mbr_county), true, 0, 100);
			Requires.Text(mbr_state, nameof(mbr_state), true, 0, 100);
			Requires.Text(mbr_zip, nameof(mbr_zip), true, 0, 100);
			Requires.Text(mbr_phone, nameof(mbr_phone), true, 0, 100);
			Requires.Text(mbr_region_code, nameof(mbr_region_code), true, 0, 100);
			Requires.Text(mbr_region_name, nameof(mbr_region_name), true, 0, 100);
			Requires.Text(mbr_relationship_code, nameof(mbr_relationship_code), true, 0, 10);
			Requires.Text(mbr_relationship_desc, nameof(mbr_relationship_desc), true, 0, 50);
			Requires.Text(dw_rawfilename, nameof(dw_rawfilename), true, 0, 100);
			Requires.Text(dw_recievedmonth, nameof(dw_recievedmonth), true, 0, 100);
			Requires.Text(dw_vendor_name, nameof(dw_vendor_name), true, 0, 100);
			PartialValidate();
        }
	}

	[Table("Eligibility", Schema = "deerwalk")]
	public partial class Eligibility : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted, IDontCreate
	{
        public static readonly Eligibility[] None = new Eligibility[0];

		[DisplayName("Eligibility Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("EligibilityId")]
		public long EligibilityId { get; set; }

		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Contact Id")]
		[Column("ContactId")]
		public long? ContactId { get; set; }

		[ForeignKey("ContactId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Contact Contact { get; set; }

		/// <summary>
		/// Member ID to display on the application, as sent by client
		/// </summary>
		[Description("Member ID to display on the application, as sent by client")]
		[DisplayName("Member ID")]
		[SampleData("9916897")]
		[NotNull]
		[Required]
		[MaxLength(50)]
		[Column("mbr_id")]
		public string mbr_id { get; set; }

		/// <summary>
		/// Policy Number for Member
		/// </summary>
		[Description("Policy Number for Member")]
		[DisplayName("Policy Number")]
		[MaxLength(50)]
		[Column("ins_policy_id")]
		public string ins_policy_id { get; set; }

		/// <summary>
		/// Member SSN
		/// </summary>
		[Description("Member SSN")]
		[DisplayName("SSN")]
		[SampleData("811619")]
		[MaxLength(30)]
		[Column("mbr_ssn")]
		public string mbr_ssn { get; set; }

		/// <summary>
		/// Member first name
		/// </summary>
		[Description("Member first name")]
		[DisplayName("First Name")]
		[SampleData("BEVERLY")]
		[MaxLength(30)]
		[Column("mbr_first_name")]
		public string mbr_first_name { get; set; }

		/// <summary>
		/// Member middle name
		/// </summary>
		[Description("Member middle name")]
		[DisplayName("Middle Name")]
		[SampleData("George")]
		[MaxLength(30)]
		[Column("mbr_middle_name")]
		public string mbr_middle_name { get; set; }

		/// <summary>
		/// Member last name
		/// </summary>
		[Description("Member last name")]
		[DisplayName("Last Name")]
		[SampleData("BARRETT")]
		[MaxLength(30)]
		[Column("mbr_last_name")]
		public string mbr_last_name { get; set; }

		/// <summary>
		///  Current status of member
		/// </summary>
		[Description(" Current status of member")]
		[DisplayName("Current Status")]
		[SampleData("active")]
		[MaxLength(20)]
		[Column("mbr_current_status")]
		public string mbr_current_status { get; set; }

		/// <summary>
		/// Member gender
		/// </summary>
		[Description("Member gender")]
		[DisplayName("Gender")]
		[SampleData("M")]
		[NotNull]
		[Required]
		[MaxLength(2)]
		[Column("mbr_gender")]
		public string mbr_gender { get; set; }

		/// <summary>
		/// Member date of Birth
		/// </summary>
		[Description("Member date of Birth")]
		[DisplayName("DOB")]
		[SampleData("31597")]
		[Column("mbr_dob")]
		public DateTime mbr_dob { get; set; }

		/// <summary>
		/// Member Street Address 1
		/// </summary>
		[Description("Member Street Address 1")]
		[DisplayName("Street 1")]
		[SampleData("5621 TEAKWOOD ROAD")]
		[MaxLength(50)]
		[Column("mbr_street_1")]
		public string mbr_street_1 { get; set; }

		/// <summary>
		/// Member Street Address 2
		/// </summary>
		[Description("Member Street Address 2")]
		[DisplayName("Street 2")]
		[MaxLength(50)]
		[Column("mbr_street_2")]
		public string mbr_street_2 { get; set; }

		/// <summary>
		/// Member City
		/// </summary>
		[Description("Member City")]
		[DisplayName("City")]
		[SampleData("Lakeworth")]
		[MaxLength(100)]
		[Column("mbr_city")]
		public string mbr_city { get; set; }

		/// <summary>
		/// Member County
		/// </summary>
		[Description("Member County")]
		[DisplayName("County")]
		[SampleData("Lexington")]
		[MaxLength(20)]
		[Column("mbr_county")]
		public string mbr_county { get; set; }

		/// <summary>
		/// Abbreviation of State
		/// </summary>
		[Description("Abbreviation of State")]
		[DisplayName("State")]
		[SampleData("FL")]
		[MaxLength(2)]
		[Column("mbr_state")]
		public string mbr_state { get; set; }

		/// <summary>
		/// Zip code
		/// </summary>
		[Description("Zip code")]
		[DisplayName("Zip")]
		[SampleData("34746")]
		[MaxLength(12)]
		[Column("mbr_zip")]
		public string mbr_zip { get; set; }

		/// <summary>
		/// Member Phone
		/// </summary>
		[Description("Member Phone")]
		[DisplayName("Phone")]
		[SampleData("7802966511")]
		[MaxLength(15)]
		[Column("mbr_phone")]
		public string mbr_phone { get; set; }

		/// <summary>
		/// Member Region code
		/// </summary>
		[Description("Member Region code")]
		[DisplayName("Region Code")]
		[MaxLength(32)]
		[Column("mbr_region_code")]
		public string mbr_region_code { get; set; }

		/// <summary>
		/// Member Region
		/// </summary>
		[Description("Member Region")]
		[DisplayName("Region")]
		[MaxLength(50)]
		[Column("mbr_region_name")]
		public string mbr_region_name { get; set; }

		/// <summary>
		/// Relationship Code to the Subscriber; subscriber(01), spouse (02),child (03), other (04)
		/// </summary>
		[Description("Relationship Code to the Subscriber; subscriber(01), spouse (02),child (03), other (04)")]
		[DisplayName("Relationship Code")]
		[MaxLength(5)]
		[Column("mbr_relationship_code")]
		public string mbr_relationship_code { get; set; }

		/// <summary>
		/// Relationship Description to the Subscriber, Dependent, Spouse
		/// </summary>
		[Description("Relationship Description to the Subscriber, Dependent, Spouse")]
		[DisplayName("Relationship")]
		[SampleData("Dependent")]
		[MaxLength(50)]
		[Column("mbr_relationship_desc")]
		public string mbr_relationship_desc { get; set; }

		/// <summary>
		/// Plan type code
		/// </summary>
		[Description("Plan type code")]
		[DisplayName("Plan Type Code")]
		[SampleData("com")]
		[MaxLength(20)]
		[Column("ins_plan_type_code")]
		public string ins_plan_type_code { get; set; }

		/// <summary>
		/// Plan type name
		/// </summary>
		[Description("Plan type name")]
		[DisplayName("Plan Type")]
		[SampleData("Commercial")]
		[MaxLength(255)]
		[Column("ins_plan_type_desc")]
		public string ins_plan_type_desc { get; set; }

		/// <summary>
		/// TPA/ASO/HMO
		/// </summary>
		[Description("TPA/ASO/HMO")]
		[DisplayName("Carrier ID")]
		[SampleData("1")]
		[MaxLength(20)]
		[Column("ins_carrier_id")]
		public string ins_carrier_id { get; set; }

		/// <summary>
		/// TPA/ASO/HMO name
		/// </summary>
		[Description("TPA/ASO/HMO name")]
		[DisplayName("Carrier")]
		[SampleData("Harry TPA")]
		[MaxLength(50)]
		[Column("ins_carrier_name")]
		public string ins_carrier_name { get; set; }

		/// <summary>
		/// Coverage type
		/// </summary>
		[Description("Coverage type")]
		[DisplayName("Coverage Type Code")]
		[SampleData("1")]
		[MaxLength(20)]
		[Column("ins_coverage_type_code")]
		public string ins_coverage_type_code { get; set; }

		/// <summary>
		/// Coverage type name; infer from code
		/// </summary>
		[Description("Coverage type name; infer from code")]
		[DisplayName("Coverage Type")]
		[SampleData("Family")]
		[MaxLength(50)]
		[Column("ins_coverage_type_desc")]
		public string ins_coverage_type_desc { get; set; }

		/// <summary>
		/// Plan id of insurance
		/// </summary>
		[Description("Plan id of insurance")]
		[DisplayName("Plan ID")]
		[SampleData("M720000-M")]
		[MaxLength(20)]
		[Column("ins_plan_id")]
		public string ins_plan_id { get; set; }

		/// <summary>
		/// Plan name of insurance
		/// </summary>
		[Description("Plan name of insurance")]
		[DisplayName("Plan")]
		[SampleData("Family")]
		[MaxLength(100)]
		[Column("ins_plan_desc")]
		public string ins_plan_desc { get; set; }

		/// <summary>
		/// Identification of the group the subscriber is employed with
		/// </summary>
		[Description("Identification of the group the subscriber is employed with")]
		[DisplayName("Employer Group ID")]
		[SampleData("3198508")]
		[MaxLength(20)]
		[Column("ins_emp_group_id")]
		public string ins_emp_group_id { get; set; }

		/// <summary>
		/// Name of the group the subscriber is employed with
		/// </summary>
		[Description("Name of the group the subscriber is employed with")]
		[DisplayName("Employer Group")]
		[SampleData("Deerwalk")]
		[MaxLength(50)]
		[Column("ins_emp_group_name")]
		public string ins_emp_group_name { get; set; }

		/// <summary>
		/// Identification of the division the subscriber is employed with
		/// </summary>
		[Description("Identification of the division the subscriber is employed with")]
		[DisplayName("Insurance Division ID")]
		[MaxLength(20)]
		[Column("ins_division_id")]
		public string ins_division_id { get; set; }

		/// <summary>
		/// Name of the group the division  subscriber is employed with
		/// </summary>
		[Description("Name of the group the division  subscriber is employed with")]
		[DisplayName("Insurance Division")]
		[MaxLength(100)]
		[Column("ins_division_name")]
		public string ins_division_name { get; set; }

		/// <summary>
		/// Status Code of the Employee - Not Specified : 00, Working : 01, Terminated : 02
		/// </summary>
		[Description("Status Code of the Employee - Not Specified : 00, Working : 01, Terminated : 02")]
		[DisplayName("Cobra Status Code")]
		[SampleData("1")]
		[MaxLength(2)]
		[Column("ins_cobra_code")]
		public string ins_cobra_code { get; set; }

		/// <summary>
		/// Status of the Employee - Working, Terminated, etc
		/// </summary>
		[Description("Status of the Employee - Working, Terminated, etc")]
		[DisplayName("Cobra Status")]
		[SampleData("Working")]
		[MaxLength(30)]
		[Column("ins_cobra_desc")]
		public string ins_cobra_desc { get; set; }

		/// <summary>
		/// Effective date for medical plan
		/// </summary>
		[Description("Effective date for medical plan")]
		[DisplayName("Effective Date")]
		[SampleData("39814")]
		[Column("ins_med_eff_date")]
		public DateTime ins_med_eff_date { get; set; }

		/// <summary>
		/// Termination date for medical plan
		/// </summary>
		[Description("Termination date for medical plan")]
		[DisplayName("Termination Date")]
		[SampleData("30/09/2011")]
		[Column("ins_med_term_date")]
		public DateTime ins_med_term_date { get; set; }

		/// <summary>
		/// Effective date for drug plan
		/// </summary>
		[Description("Effective date for drug plan")]
		[DisplayName("Effective Date")]
		[SampleData("39819")]
		[Column("ins_rx_eff_date")]
		public DateTime? ins_rx_eff_date { get; set; }

		/// <summary>
		/// Termination date for drug plan
		/// </summary>
		[Description("Termination date for drug plan")]
		[DisplayName("Termination Date")]
		[SampleData("30/06/2011")]
		[Column("ins_rx_term_date")]
		public DateTime? ins_rx_term_date { get; set; }

		/// <summary>
		/// Effective date for dental plan
		/// </summary>
		[Description("Effective date for dental plan")]
		[DisplayName("Effective date")]
		[SampleData("39821")]
		[Column("ins_den_eff_date")]
		public DateTime? ins_den_eff_date { get; set; }

		/// <summary>
		/// Termination date for dental plan
		/// </summary>
		[Description("Termination date for dental plan")]
		[DisplayName("Termination date")]
		[SampleData("40550")]
		[Column("ins_den_term_date")]
		public DateTime? ins_den_term_date { get; set; }

		/// <summary>
		/// Effective date for vision plan
		/// </summary>
		[Description("Effective date for vision plan")]
		[DisplayName("Effective Date")]
		[SampleData("39821")]
		[Column("ins_vis_eff_date")]
		public DateTime? ins_vis_eff_date { get; set; }

		/// <summary>
		/// Termination date for vision plan
		/// </summary>
		[Description("Termination date for vision plan")]
		[DisplayName("Termination Date")]
		[SampleData("40550")]
		[Column("ins_vis_term_date")]
		public DateTime? ins_vis_term_date { get; set; }

		/// <summary>
		/// Effective date for long term disability plan plan
		/// </summary>
		[Description("Effective date for long term disability plan plan")]
		[DisplayName("Effective Date")]
		[SampleData("39821")]
		[Column("ins_ltd_eff_date")]
		public DateTime? ins_ltd_eff_date { get; set; }

		/// <summary>
		/// Termination date for long term disability plan
		/// </summary>
		[Description("Termination date for long term disability plan")]
		[DisplayName("Termination Date")]
		[SampleData("40550")]
		[Column("ins_ltd_term_date")]
		public DateTime? ins_ltd_term_date { get; set; }

		/// <summary>
		/// Effective date for short term disability plan
		/// </summary>
		[Description("Effective date for short term disability plan")]
		[DisplayName("Effective Date")]
		[SampleData("39821")]
		[Column("ins_std_eff_date")]
		public DateTime? ins_std_eff_date { get; set; }

		/// <summary>
		/// Termination date for short term disability plan
		/// </summary>
		[Description("Termination date for short term disability plan")]
		[DisplayName("Termination Date")]
		[SampleData("40550")]
		[Column("ins_std_term_date")]
		public DateTime? ins_std_term_date { get; set; }

		/// <summary>
		/// Primary Care Physician identification number
		/// </summary>
		[Description("Primary Care Physician identification number")]
		[DisplayName("PCP ID")]
		[SampleData("5687456598")]
		[MaxLength(50)]
		[Column("prv_pcp_id")]
		public string prv_pcp_id { get; set; }

		/// <summary>
		/// Primary Care Physician First Name
		/// </summary>
		[Description("Primary Care Physician First Name")]
		[DisplayName("PCP First Name")]
		[SampleData("Ashay")]
		[MaxLength(100)]
		[Column("prv_pcp_first_name")]
		public string prv_pcp_first_name { get; set; }

		/// <summary>
		/// Primary Care Physician Middle Name
		/// </summary>
		[Description("Primary Care Physician Middle Name")]
		[DisplayName("PCP Middle Name")]
		[SampleData("Kumar")]
		[MaxLength(30)]
		[Column("prv_pcp_middle_name")]
		public string prv_pcp_middle_name { get; set; }

		/// <summary>
		/// Primary Care Physician Last Name
		/// </summary>
		[Description("Primary Care Physician Last Name")]
		[DisplayName("PCP Last Name")]
		[SampleData("Thakur")]
		[MaxLength(30)]
		[Column("prv_pcp_last_name")]
		public string prv_pcp_last_name { get; set; }

		/// <summary>
		/// PCP Location ID
		/// </summary>
		[Description("PCP Location ID")]
		[DisplayName("PCP Location ID")]
		[SampleData("120")]
		[MaxLength(15)]
		[Column("prv_pcp_site_id")]
		public string prv_pcp_site_id { get; set; }

		/// <summary>
		/// User Defined Field 1
		/// </summary>
		[Description("User Defined Field 1")]
		[DisplayName("UDF 1")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf1")]
		public string udf1 { get; set; }

		/// <summary>
		/// User Defined Field 2
		/// </summary>
		[Description("User Defined Field 2")]
		[DisplayName("UDF 2")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf2")]
		public string udf2 { get; set; }

		/// <summary>
		/// User Defined Field 3
		/// </summary>
		[Description("User Defined Field 3")]
		[DisplayName("UDF 3")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf3")]
		public string udf3 { get; set; }

		/// <summary>
		/// User Defined Field 4
		/// </summary>
		[Description("User Defined Field 4")]
		[DisplayName("UDF 4")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf4")]
		public string udf4 { get; set; }

		/// <summary>
		/// User Defined Field 5
		/// </summary>
		[Description("User Defined Field 5")]
		[DisplayName("UDF 5")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf5")]
		public string udf5 { get; set; }

		/// <summary>
		/// User Defined Field 6
		/// </summary>
		[Description("User Defined Field 6")]
		[DisplayName("UDF 6")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf6")]
		public string udf6 { get; set; }

		/// <summary>
		/// User Defined Field 7
		/// </summary>
		[Description("User Defined Field 7")]
		[DisplayName("UDF 7")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf7")]
		public string udf7 { get; set; }

		/// <summary>
		/// User Defined Field 8
		/// </summary>
		[Description("User Defined Field 8")]
		[DisplayName("UDF 8")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf8")]
		public string udf8 { get; set; }

		/// <summary>
		/// User Defined Field 9
		/// </summary>
		[Description("User Defined Field 9")]
		[DisplayName("UDF 9")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf9")]
		public string udf9 { get; set; }

		/// <summary>
		/// User Defined Field 10
		/// </summary>
		[Description("User Defined Field 10")]
		[DisplayName("UDF 10")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf10")]
		public string udf10 { get; set; }

		/// <summary>
		/// User Defined Field 11
		/// </summary>
		[Description("User Defined Field 11")]
		[DisplayName("UDF 11")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf11")]
		public string udf11 { get; set; }

		/// <summary>
		/// User Defined Field 12
		/// </summary>
		[Description("User Defined Field 12")]
		[DisplayName("UDF 12")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf12")]
		public string udf12 { get; set; }

		/// <summary>
		/// User Defined Field 13
		/// </summary>
		[Description("User Defined Field 13")]
		[DisplayName("UDF 13")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf13")]
		public string udf13 { get; set; }

		/// <summary>
		/// User Defined Field 14
		/// </summary>
		[Description("User Defined Field 14")]
		[DisplayName("UDF 14")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf14")]
		public string udf14 { get; set; }

		/// <summary>
		/// User Defined Field 15
		/// </summary>
		[Description("User Defined Field 15")]
		[DisplayName("UDF 15")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf15")]
		public string udf15 { get; set; }

		/// <summary>
		/// User Defined Field 16
		/// </summary>
		[Description("User Defined Field 16")]
		[DisplayName("UDF 16")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf16")]
		public string udf16 { get; set; }

		/// <summary>
		/// User Defined Field 17
		/// </summary>
		[Description("User Defined Field 17")]
		[DisplayName("UDF 17")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf17")]
		public string udf17 { get; set; }

		/// <summary>
		/// User Defined Field 18
		/// </summary>
		[Description("User Defined Field 18")]
		[DisplayName("UDF 18")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf18")]
		public string udf18 { get; set; }

		/// <summary>
		/// User Defined Field 19
		/// </summary>
		[Description("User Defined Field 19")]
		[DisplayName("UDF 19")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf19")]
		public string udf19 { get; set; }

		/// <summary>
		/// User Defined Field 20
		/// </summary>
		[Description("User Defined Field 20")]
		[DisplayName("UDF 20")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf20")]
		public string udf20 { get; set; }

		/// <summary>
		/// Member ID
		/// </summary>
		[Description("Member ID")]
		[DisplayName("Member ID")]
		[SampleData("Hash Encrypted")]
		[MaxLength(50)]
		[Column("dw_member_id")]
		public string dw_member_id { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("Raw Filename")]
		[MaxLength(500)]
		[Column("dw_rawfilename")]
		public string dw_rawfilename { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 21")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf21")]
		public string udf21 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 22")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf22")]
		public string udf22 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 23")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf23")]
		public string udf23 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 24")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf24")]
		public string udf24 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 25")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf25")]
		public string udf25 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 26")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf26")]
		public string udf26 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 27")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf27")]
		public string udf27 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 28")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf28")]
		public string udf28 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 29")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf29")]
		public string udf29 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 30")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf30")]
		public string udf30 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 31")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf31")]
		public string udf31 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 32")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf32")]
		public string udf32 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 33")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf33")]
		public string udf33 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 34")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf34")]
		public string udf34 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 35")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf35")]
		public string udf35 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 36")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf36")]
		public string udf36 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 37")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf37")]
		public string udf37 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 38")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf38")]
		public string udf38 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 39")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf39")]
		public string udf39 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 40")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf40")]
		public string udf40 { get; set; }

		[DisplayName("Mbr Dob Date Dim Id")]
		[Column("MbrDobDateDimId")]
		public int? MbrDobDateDimId { get; set; }

		[ForeignKey("MbrDobDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension MbrDobDateDim { get; set; }

		[DisplayName("Ins Med Eff Date Date Dim Id")]
		[Column("InsMedEffDateDateDimId")]
		public int? InsMedEffDateDateDimId { get; set; }

		[ForeignKey("InsMedEffDateDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension InsMedEffDateDateDim { get; set; }

		[DisplayName("Ins Med Term Date Date Dim Id")]
		[Column("InsMedTermDateDateDimId")]
		public int? InsMedTermDateDateDimId { get; set; }

		[ForeignKey("InsMedTermDateDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension InsMedTermDateDateDim { get; set; }

		[DisplayName("Ins Rx Eff Date Date Dim Id")]
		[Column("InsRxEffDateDateDimId")]
		public int? InsRxEffDateDateDimId { get; set; }

		[ForeignKey("InsRxEffDateDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension InsRxEffDateDateDim { get; set; }

		[DisplayName("Ins Rx Term Date Date Dim Id")]
		[Column("InsRxTermDateDateDimId")]
		public int? InsRxTermDateDateDimId { get; set; }

		[ForeignKey("InsRxTermDateDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension InsRxTermDateDateDim { get; set; }

		[DisplayName("Ins Den Eff Date Date Dim Id")]
		[Column("InsDenEffDateDateDimId")]
		public int? InsDenEffDateDateDimId { get; set; }

		[ForeignKey("InsDenEffDateDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension InsDenEffDateDateDim { get; set; }

		[DisplayName("Ins Den Term Date Date Dim Id")]
		[Column("InsDenTermDateDateDimId")]
		public int? InsDenTermDateDateDimId { get; set; }

		[ForeignKey("InsDenTermDateDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension InsDenTermDateDateDim { get; set; }

		[DisplayName("Ins Vis Eff Date Date Dim Id")]
		[Column("InsVisEffDateDateDimId")]
		public int? InsVisEffDateDateDimId { get; set; }

		[ForeignKey("InsVisEffDateDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension InsVisEffDateDateDim { get; set; }

		[DisplayName("Ins Vis Term Date Date Dim Id")]
		[Column("InsVisTermDateDateDimId")]
		public int? InsVisTermDateDateDimId { get; set; }

		[ForeignKey("InsVisTermDateDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension InsVisTermDateDateDim { get; set; }

		[DisplayName("Ins Ltd Eff Date Date Dim Id")]
		[Column("InsLtdEffDateDateDimId")]
		public int? InsLtdEffDateDateDimId { get; set; }

		[ForeignKey("InsLtdEffDateDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension InsLtdEffDateDateDim { get; set; }

		[DisplayName("Ins Ltd Term Date Date Dim Id")]
		[Column("InsLtdTermDateDateDimId")]
		public int? InsLtdTermDateDateDimId { get; set; }

		[ForeignKey("InsLtdTermDateDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension InsLtdTermDateDateDim { get; set; }

		[DisplayName("Ins Std Eff Date Date Dim Id")]
		[Column("InsStdEffDateDateDimId")]
		public int? InsStdEffDateDateDimId { get; set; }

		[ForeignKey("InsStdEffDateDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension InsStdEffDateDateDim { get; set; }

		[DisplayName("Ins Std Term Date Date Dim Id")]
		[Column("InsStdTermDateDateDimId")]
		public int? InsStdTermDateDateDimId { get; set; }

		[ForeignKey("InsStdTermDateDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension InsStdTermDateDateDim { get; set; }

		[DisplayName("Date Dimensions Linked")]
		[Column("DateDimensionsLinked")]
		public bool DateDimensionsLinked { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} EligibilityId={EligibilityId} {extras}";
		}

		partial void OnConstructed();
	
		public Eligibility()
			: this(null)
		{}

		public Eligibility(Eligibility other)
		{
			if (other!=null)
			{
				TenantId = other.TenantId;
				ContactId = other.ContactId;
				mbr_id = other.mbr_id;
				ins_policy_id = other.ins_policy_id;
				mbr_ssn = other.mbr_ssn;
				mbr_first_name = other.mbr_first_name;
				mbr_middle_name = other.mbr_middle_name;
				mbr_last_name = other.mbr_last_name;
				mbr_current_status = other.mbr_current_status;
				mbr_gender = other.mbr_gender;
				mbr_dob = other.mbr_dob;
				mbr_street_1 = other.mbr_street_1;
				mbr_street_2 = other.mbr_street_2;
				mbr_city = other.mbr_city;
				mbr_county = other.mbr_county;
				mbr_state = other.mbr_state;
				mbr_zip = other.mbr_zip;
				mbr_phone = other.mbr_phone;
				mbr_region_code = other.mbr_region_code;
				mbr_region_name = other.mbr_region_name;
				mbr_relationship_code = other.mbr_relationship_code;
				mbr_relationship_desc = other.mbr_relationship_desc;
				ins_plan_type_code = other.ins_plan_type_code;
				ins_plan_type_desc = other.ins_plan_type_desc;
				ins_carrier_id = other.ins_carrier_id;
				ins_carrier_name = other.ins_carrier_name;
				ins_coverage_type_code = other.ins_coverage_type_code;
				ins_coverage_type_desc = other.ins_coverage_type_desc;
				ins_plan_id = other.ins_plan_id;
				ins_plan_desc = other.ins_plan_desc;
				ins_emp_group_id = other.ins_emp_group_id;
				ins_emp_group_name = other.ins_emp_group_name;
				ins_division_id = other.ins_division_id;
				ins_division_name = other.ins_division_name;
				ins_cobra_code = other.ins_cobra_code;
				ins_cobra_desc = other.ins_cobra_desc;
				ins_med_eff_date = other.ins_med_eff_date;
				ins_med_term_date = other.ins_med_term_date;
				ins_rx_eff_date = other.ins_rx_eff_date;
				ins_rx_term_date = other.ins_rx_term_date;
				ins_den_eff_date = other.ins_den_eff_date;
				ins_den_term_date = other.ins_den_term_date;
				ins_vis_eff_date = other.ins_vis_eff_date;
				ins_vis_term_date = other.ins_vis_term_date;
				ins_ltd_eff_date = other.ins_ltd_eff_date;
				ins_ltd_term_date = other.ins_ltd_term_date;
				ins_std_eff_date = other.ins_std_eff_date;
				ins_std_term_date = other.ins_std_term_date;
				prv_pcp_id = other.prv_pcp_id;
				prv_pcp_first_name = other.prv_pcp_first_name;
				prv_pcp_middle_name = other.prv_pcp_middle_name;
				prv_pcp_last_name = other.prv_pcp_last_name;
				prv_pcp_site_id = other.prv_pcp_site_id;
				udf1 = other.udf1;
				udf2 = other.udf2;
				udf3 = other.udf3;
				udf4 = other.udf4;
				udf5 = other.udf5;
				udf6 = other.udf6;
				udf7 = other.udf7;
				udf8 = other.udf8;
				udf9 = other.udf9;
				udf10 = other.udf10;
				udf11 = other.udf11;
				udf12 = other.udf12;
				udf13 = other.udf13;
				udf14 = other.udf14;
				udf15 = other.udf15;
				udf16 = other.udf16;
				udf17 = other.udf17;
				udf18 = other.udf18;
				udf19 = other.udf19;
				udf20 = other.udf20;
				dw_member_id = other.dw_member_id;
				dw_rawfilename = other.dw_rawfilename;
				udf21 = other.udf21;
				udf22 = other.udf22;
				udf23 = other.udf23;
				udf24 = other.udf24;
				udf25 = other.udf25;
				udf26 = other.udf26;
				udf27 = other.udf27;
				udf28 = other.udf28;
				udf29 = other.udf29;
				udf30 = other.udf30;
				udf31 = other.udf31;
				udf32 = other.udf32;
				udf33 = other.udf33;
				udf34 = other.udf34;
				udf35 = other.udf35;
				udf36 = other.udf36;
				udf37 = other.udf37;
				udf38 = other.udf38;
				udf39 = other.udf39;
				udf40 = other.udf40;
				MbrDobDateDimId = other.MbrDobDateDimId;
				InsMedEffDateDateDimId = other.InsMedEffDateDateDimId;
				InsMedTermDateDateDimId = other.InsMedTermDateDateDimId;
				InsRxEffDateDateDimId = other.InsRxEffDateDateDimId;
				InsRxTermDateDateDimId = other.InsRxTermDateDateDimId;
				InsDenEffDateDateDimId = other.InsDenEffDateDateDimId;
				InsDenTermDateDateDimId = other.InsDenTermDateDateDimId;
				InsVisEffDateDateDimId = other.InsVisEffDateDateDimId;
				InsVisTermDateDateDimId = other.InsVisTermDateDateDimId;
				InsLtdEffDateDateDimId = other.InsLtdEffDateDateDimId;
				InsLtdTermDateDateDimId = other.InsLtdTermDateDateDimId;
				InsStdEffDateDateDimId = other.InsStdEffDateDateDimId;
				InsStdTermDateDateDimId = other.InsStdTermDateDateDimId;
				DateDimensionsLinked = other.DateDimensionsLinked;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(mbr_id, nameof(mbr_id));
			Requires.Text(mbr_id, nameof(mbr_id), true, 0, 50);
			Requires.Text(ins_policy_id, nameof(ins_policy_id), true, 0, 50);
			Requires.Text(mbr_ssn, nameof(mbr_ssn), true, 0, 30);
			Requires.Text(mbr_first_name, nameof(mbr_first_name), true, 0, 30);
			Requires.Text(mbr_middle_name, nameof(mbr_middle_name), true, 0, 30);
			Requires.Text(mbr_last_name, nameof(mbr_last_name), true, 0, 30);
			Requires.Text(mbr_current_status, nameof(mbr_current_status), true, 0, 20);
			Requires.NonNull(mbr_gender, nameof(mbr_gender));
			Requires.Text(mbr_gender, nameof(mbr_gender), true, 0, 2);
			Requires.Text(mbr_street_1, nameof(mbr_street_1), true, 0, 50);
			Requires.Text(mbr_street_2, nameof(mbr_street_2), true, 0, 50);
			Requires.Text(mbr_city, nameof(mbr_city), true, 0, 100);
			Requires.Text(mbr_county, nameof(mbr_county), true, 0, 20);
			Requires.Text(mbr_state, nameof(mbr_state), true, 0, 2);
			Requires.Text(mbr_zip, nameof(mbr_zip), true, 0, 12);
			Requires.Text(mbr_phone, nameof(mbr_phone), true, 0, 15);
			Requires.Text(mbr_region_code, nameof(mbr_region_code), true, 0, 32);
			Requires.Text(mbr_region_name, nameof(mbr_region_name), true, 0, 50);
			Requires.Text(mbr_relationship_code, nameof(mbr_relationship_code), true, 0, 5);
			Requires.Text(mbr_relationship_desc, nameof(mbr_relationship_desc), true, 0, 50);
			Requires.Text(ins_plan_type_code, nameof(ins_plan_type_code), true, 0, 20);
			Requires.Text(ins_plan_type_desc, nameof(ins_plan_type_desc), true, 0, 255);
			Requires.Text(ins_carrier_id, nameof(ins_carrier_id), true, 0, 20);
			Requires.Text(ins_carrier_name, nameof(ins_carrier_name), true, 0, 50);
			Requires.Text(ins_coverage_type_code, nameof(ins_coverage_type_code), true, 0, 20);
			Requires.Text(ins_coverage_type_desc, nameof(ins_coverage_type_desc), true, 0, 50);
			Requires.Text(ins_plan_id, nameof(ins_plan_id), true, 0, 20);
			Requires.Text(ins_plan_desc, nameof(ins_plan_desc), true, 0, 100);
			Requires.Text(ins_emp_group_id, nameof(ins_emp_group_id), true, 0, 20);
			Requires.Text(ins_emp_group_name, nameof(ins_emp_group_name), true, 0, 50);
			Requires.Text(ins_division_id, nameof(ins_division_id), true, 0, 20);
			Requires.Text(ins_division_name, nameof(ins_division_name), true, 0, 100);
			Requires.Text(ins_cobra_code, nameof(ins_cobra_code), true, 0, 2);
			Requires.Text(ins_cobra_desc, nameof(ins_cobra_desc), true, 0, 30);
			Requires.Text(prv_pcp_id, nameof(prv_pcp_id), true, 0, 50);
			Requires.Text(prv_pcp_first_name, nameof(prv_pcp_first_name), true, 0, 100);
			Requires.Text(prv_pcp_middle_name, nameof(prv_pcp_middle_name), true, 0, 30);
			Requires.Text(prv_pcp_last_name, nameof(prv_pcp_last_name), true, 0, 30);
			Requires.Text(prv_pcp_site_id, nameof(prv_pcp_site_id), true, 0, 15);
			Requires.Text(udf1, nameof(udf1), true, 0, 100);
			Requires.Text(udf2, nameof(udf2), true, 0, 100);
			Requires.Text(udf3, nameof(udf3), true, 0, 100);
			Requires.Text(udf4, nameof(udf4), true, 0, 100);
			Requires.Text(udf5, nameof(udf5), true, 0, 100);
			Requires.Text(udf6, nameof(udf6), true, 0, 100);
			Requires.Text(udf7, nameof(udf7), true, 0, 100);
			Requires.Text(udf8, nameof(udf8), true, 0, 100);
			Requires.Text(udf9, nameof(udf9), true, 0, 100);
			Requires.Text(udf10, nameof(udf10), true, 0, 100);
			Requires.Text(udf11, nameof(udf11), true, 0, 100);
			Requires.Text(udf12, nameof(udf12), true, 0, 100);
			Requires.Text(udf13, nameof(udf13), true, 0, 100);
			Requires.Text(udf14, nameof(udf14), true, 0, 100);
			Requires.Text(udf15, nameof(udf15), true, 0, 100);
			Requires.Text(udf16, nameof(udf16), true, 0, 100);
			Requires.Text(udf17, nameof(udf17), true, 0, 100);
			Requires.Text(udf18, nameof(udf18), true, 0, 100);
			Requires.Text(udf19, nameof(udf19), true, 0, 100);
			Requires.Text(udf20, nameof(udf20), true, 0, 100);
			Requires.Text(dw_member_id, nameof(dw_member_id), true, 0, 50);
			Requires.Text(dw_rawfilename, nameof(dw_rawfilename), true, 0, 500);
			Requires.Text(udf21, nameof(udf21), true, 0, 100);
			Requires.Text(udf22, nameof(udf22), true, 0, 100);
			Requires.Text(udf23, nameof(udf23), true, 0, 100);
			Requires.Text(udf24, nameof(udf24), true, 0, 100);
			Requires.Text(udf25, nameof(udf25), true, 0, 100);
			Requires.Text(udf26, nameof(udf26), true, 0, 100);
			Requires.Text(udf27, nameof(udf27), true, 0, 100);
			Requires.Text(udf28, nameof(udf28), true, 0, 100);
			Requires.Text(udf29, nameof(udf29), true, 0, 100);
			Requires.Text(udf30, nameof(udf30), true, 0, 100);
			Requires.Text(udf31, nameof(udf31), true, 0, 100);
			Requires.Text(udf32, nameof(udf32), true, 0, 100);
			Requires.Text(udf33, nameof(udf33), true, 0, 100);
			Requires.Text(udf34, nameof(udf34), true, 0, 100);
			Requires.Text(udf35, nameof(udf35), true, 0, 100);
			Requires.Text(udf36, nameof(udf36), true, 0, 100);
			Requires.Text(udf37, nameof(udf37), true, 0, 100);
			Requires.Text(udf38, nameof(udf38), true, 0, 100);
			Requires.Text(udf39, nameof(udf39), true, 0, 100);
			Requires.Text(udf40, nameof(udf40), true, 0, 100);
			PartialValidate();
        }
	}

	[Table("HighCostDiagnosis", Schema = "deerwalk")]
	public partial class HighCostDiagnosi : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted, IDontCreate
	{
        public static readonly HighCostDiagnosi[] None = new HighCostDiagnosi[0];

		[DisplayName("High Cost Diagnosis Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("HighCostDiagnosisId")]
		public long HighCostDiagnosisId { get; set; }

		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Contact Id")]
		[Column("ContactId")]
		public long? ContactId { get; set; }

		[ForeignKey("ContactId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Contact Contact { get; set; }

		/// <summary>
		/// Auto-increment number-a unique identifier for Makalu engine
		/// </summary>
		[Description("Auto-increment number-a unique identifier for Makalu engine")]
		[DisplayName("High Cost Diagnosis RID")]
		[SampleData("1")]
		[Column("dw_record_id")]
		public int? dw_record_id { get; set; }

		/// <summary>
		/// Account id
		/// </summary>
		[Description("Account id")]
		[DisplayName("Account id")]
		[SampleData("1027")]
		[MaxLength(50)]
		[Column("dw_account_id")]
		public string dw_account_id { get; set; }

		/// <summary>
		/// Clientid
		/// </summary>
		[Description("Clientid")]
		[DisplayName("Client ID")]
		[SampleData("1")]
		[MaxLength(50)]
		[Column("dw_client_id")]
		public string dw_client_id { get; set; }

		/// <summary>
		/// Member ID
		/// </summary>
		[Description("Member ID")]
		[DisplayName("Member ID")]
		[SampleData("Hash Encrypted")]
		[MaxLength(50)]
		[Column("dw_member_id")]
		public string dw_member_id { get; set; }

		/// <summary>
		/// Member ID to display on the application, as sent by client
		/// </summary>
		[Description("Member ID to display on the application, as sent by client")]
		[DisplayName("Member ID")]
		[SampleData("9916897")]
		[MaxLength(50)]
		[Column("mbr_id")]
		public string mbr_id { get; set; }

		/// <summary>
		/// Diagnosis Code
		/// </summary>
		[Description("Diagnosis Code")]
		[DisplayName("Diagnosis Code")]
		[SampleData("123.12")]
		[MaxLength(10)]
		[Column("Diagnosis_code")]
		public string Diagnosis_code { get; set; }

		/// <summary>
		/// Paid Amount
		/// </summary>
		[Description("Paid Amount")]
		[DisplayName("Paid Amount")]
		[SampleData("123456.99")]
		[Column("Paid_Amount")]
		public decimal? Paid_Amount { get; set; }

		/// <summary>
		/// Infections
		/// </summary>
		[Description("Infections")]
		[DisplayName("Super Grouper Description")]
		[SampleData("Infections")]
		[MaxLength(50)]
		[Column("SuperGrouperDescription")]
		public string SuperGrouperDescription { get; set; }

		/// <summary>
		/// Tuberculosis
		/// </summary>
		[Description("Tuberculosis")]
		[DisplayName("Grouper Description")]
		[SampleData("Infectious Diseases")]
		[MaxLength(50)]
		[Column("GrouperDescription")]
		public string GrouperDescription { get; set; }

		[DisplayName("Date Dimensions Linked")]
		[Column("DateDimensionsLinked")]
		public bool DateDimensionsLinked { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} HighCostDiagnosisId={HighCostDiagnosisId} {extras}";
		}

		partial void OnConstructed();
	
		public HighCostDiagnosi()
			: this(null)
		{}

		public HighCostDiagnosi(HighCostDiagnosi other)
		{
			if (other!=null)
			{
				TenantId = other.TenantId;
				ContactId = other.ContactId;
				dw_record_id = other.dw_record_id;
				dw_account_id = other.dw_account_id;
				dw_client_id = other.dw_client_id;
				dw_member_id = other.dw_member_id;
				mbr_id = other.mbr_id;
				Diagnosis_code = other.Diagnosis_code;
				Paid_Amount = other.Paid_Amount;
				SuperGrouperDescription = other.SuperGrouperDescription;
				GrouperDescription = other.GrouperDescription;
				DateDimensionsLinked = other.DateDimensionsLinked;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.Text(dw_account_id, nameof(dw_account_id), true, 0, 50);
			Requires.Text(dw_client_id, nameof(dw_client_id), true, 0, 50);
			Requires.Text(dw_member_id, nameof(dw_member_id), true, 0, 50);
			Requires.Text(mbr_id, nameof(mbr_id), true, 0, 50);
			Requires.Text(Diagnosis_code, nameof(Diagnosis_code), true, 0, 10);
			Requires.Text(SuperGrouperDescription, nameof(SuperGrouperDescription), true, 0, 50);
			Requires.Text(GrouperDescription, nameof(GrouperDescription), true, 0, 50);
			PartialValidate();
        }
	}

	/// <summary>
	/// Milliman Advanced Risk Adjuster Scores
	/// </summary>
	[Table("HistoricalScores", Schema = "deerwalk")]
	public partial class HistoricalScore : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted, IDontCreate
	{
        public static readonly HistoricalScore[] None = new HistoricalScore[0];

		[DisplayName("Historical Score Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("HistoricalScoreId")]
		public long HistoricalScoreId { get; set; }

		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Contact Id")]
		[Column("ContactId")]
		public long? ContactId { get; set; }

		[ForeignKey("ContactId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Contact Contact { get; set; }

		/// <summary>
		/// Auto-increment number-a unique identifier for Makalu engine
		/// </summary>
		[Description("Auto-increment number-a unique identifier for Makalu engine")]
		[DisplayName("Historical Score RID")]
		[SampleData("1")]
		[Column("dw_record_id")]
		public int? dw_record_id { get; set; }

		/// <summary>
		/// Account id
		/// </summary>
		[Description("Account id")]
		[DisplayName("Account id")]
		[SampleData("1027")]
		[MaxLength(50)]
		[Column("dw_account_id")]
		public string dw_account_id { get; set; }

		/// <summary>
		/// Clientid
		/// </summary>
		[Description("Clientid")]
		[DisplayName("Client ID")]
		[SampleData("1")]
		[MaxLength(50)]
		[Column("dw_client_id")]
		public string dw_client_id { get; set; }

		/// <summary>
		/// Member ID
		/// </summary>
		[Description("Member ID")]
		[DisplayName("Member ID")]
		[SampleData("Hash Encrypted")]
		[MaxLength(50)]
		[Column("dw_member_id")]
		public string dw_member_id { get; set; }

		/// <summary>
		/// Member ID to display on the application, as sent by client
		/// </summary>
		[Description("Member ID to display on the application, as sent by client")]
		[DisplayName("Member ID")]
		[SampleData("9916897")]
		[NotNull]
		[Required]
		[MaxLength(50)]
		[Column("mbr_id")]
		public string mbr_id { get; set; }

		/// <summary>
		/// Score scope 
		/// </summary>
		[Description("Score scope ")]
		[DisplayName("Score Scope")]
		[SampleData("Group ID, ALL")]
		[MaxLength(50)]
		[Column("score_type")]
		public string score_type { get; set; }

		/// <summary>
		/// Risk calculation start date
		/// </summary>
		[Description("Risk calculation start date")]
		[DisplayName("Score Start Date")]
		[Column("score_start_date")]
		public DateTime? score_start_date { get; set; }

		/// <summary>
		/// Risk calculation end  date
		/// </summary>
		[Description("Risk calculation end  date")]
		[DisplayName("Score End Date")]
		[Column("score_end_date")]
		public DateTime? score_end_date { get; set; }

		[DisplayName("Ip Score")]
		[Column("ip_score")]
		public double? ip_score { get; set; }

		[DisplayName("Op Score")]
		[Column("op_score")]
		public double? op_score { get; set; }

		[DisplayName("Phy Score")]
		[Column("phy_score")]
		public double? phy_score { get; set; }

		[DisplayName("Rx Score")]
		[Column("rx_score")]
		public double? rx_score { get; set; }

		/// <summary>
		/// IP+OP+PHY
		/// </summary>
		[Description("IP+OP+PHY")]
		[DisplayName("IP+OP")]
		[Column("med_score")]
		public double? med_score { get; set; }

		/// <summary>
		/// Med+Rx
		/// </summary>
		[Description("Med+Rx")]
		[DisplayName("Med+Rx")]
		[Column("total_score")]
		public double? total_score { get; set; }

		[DisplayName("Concurrent Total")]
		[Column("concurrent_total")]
		public double? concurrent_total { get; set; }

		[DisplayName("Er Score")]
		[Column("erScore")]
		public double? erScore { get; set; }

		[DisplayName("Other Score")]
		[Column("otherScore")]
		public double? otherScore { get; set; }

		[DisplayName("Concurrent Inpatient")]
		[Column("concurrentInpatient")]
		public double? concurrentInpatient { get; set; }

		[DisplayName("Concurrent Medical")]
		[Column("concurrentMedical")]
		public double? concurrentMedical { get; set; }

		[DisplayName("Concurrent Outpatient")]
		[Column("concurrentOutpatient")]
		public double? concurrentOutpatient { get; set; }

		[DisplayName("Concurrent Pharmacy")]
		[Column("concurrentPharmacy")]
		public double? concurrentPharmacy { get; set; }

		[DisplayName("Concurrent Physician")]
		[Column("concurrentPhysician")]
		public double? concurrentPhysician { get; set; }

		[DisplayName("Concurrent Ip Normalized To Group")]
		[Column("concurrentIpNormalizedToGroup")]
		public double? concurrentIpNormalizedToGroup { get; set; }

		[DisplayName("Concurrent Op Normalized To Group")]
		[Column("concurrentOpNormalizedToGroup")]
		public double? concurrentOpNormalizedToGroup { get; set; }

		[DisplayName("Concurrent Phy Normalized To Group")]
		[Column("concurrentPhyNormalizedToGroup")]
		public double? concurrentPhyNormalizedToGroup { get; set; }

		[DisplayName("Score Start Date Date Dim Id")]
		[Column("ScoreStartDateDateDimId")]
		public int? ScoreStartDateDateDimId { get; set; }

		[ForeignKey("ScoreStartDateDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension ScoreStartDateDateDim { get; set; }

		[DisplayName("Score End Date Date Dim Id")]
		[Column("ScoreEndDateDateDimId")]
		public int? ScoreEndDateDateDimId { get; set; }

		[ForeignKey("ScoreEndDateDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension ScoreEndDateDateDim { get; set; }

		[DisplayName("Date Dimensions Linked")]
		[Column("DateDimensionsLinked")]
		public bool DateDimensionsLinked { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} HistoricalScoreId={HistoricalScoreId} {extras}";
		}

		partial void OnConstructed();
	
		public HistoricalScore()
			: this(null)
		{}

		public HistoricalScore(HistoricalScore other)
		{
			if (other!=null)
			{
				TenantId = other.TenantId;
				ContactId = other.ContactId;
				dw_record_id = other.dw_record_id;
				dw_account_id = other.dw_account_id;
				dw_client_id = other.dw_client_id;
				dw_member_id = other.dw_member_id;
				mbr_id = other.mbr_id;
				score_type = other.score_type;
				score_start_date = other.score_start_date;
				score_end_date = other.score_end_date;
				ip_score = other.ip_score;
				op_score = other.op_score;
				phy_score = other.phy_score;
				rx_score = other.rx_score;
				med_score = other.med_score;
				total_score = other.total_score;
				concurrent_total = other.concurrent_total;
				erScore = other.erScore;
				otherScore = other.otherScore;
				concurrentInpatient = other.concurrentInpatient;
				concurrentMedical = other.concurrentMedical;
				concurrentOutpatient = other.concurrentOutpatient;
				concurrentPharmacy = other.concurrentPharmacy;
				concurrentPhysician = other.concurrentPhysician;
				concurrentIpNormalizedToGroup = other.concurrentIpNormalizedToGroup;
				concurrentOpNormalizedToGroup = other.concurrentOpNormalizedToGroup;
				concurrentPhyNormalizedToGroup = other.concurrentPhyNormalizedToGroup;
				ScoreStartDateDateDimId = other.ScoreStartDateDateDimId;
				ScoreEndDateDateDimId = other.ScoreEndDateDateDimId;
				DateDimensionsLinked = other.DateDimensionsLinked;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.Text(dw_account_id, nameof(dw_account_id), true, 0, 50);
			Requires.Text(dw_client_id, nameof(dw_client_id), true, 0, 50);
			Requires.Text(dw_member_id, nameof(dw_member_id), true, 0, 50);
			Requires.NonNull(mbr_id, nameof(mbr_id));
			Requires.Text(mbr_id, nameof(mbr_id), true, 0, 50);
			Requires.Text(score_type, nameof(score_type), true, 0, 50);
			PartialValidate();
        }
	}

	[Table("MedicalClaims", Schema = "deerwalk")]
	public partial class MedicalClaim : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted, IDontCreate
	{
        public static readonly MedicalClaim[] None = new MedicalClaim[0];

		[DisplayName("Medical Claim Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("MedicalClaimId")]
		public long MedicalClaimId { get; set; }

		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Contact Id")]
		[Column("ContactId")]
		public long? ContactId { get; set; }

		[ForeignKey("ContactId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Contact Contact { get; set; }

		/// <summary>
		/// Number generated by claim system
		/// </summary>
		[Description("Number generated by claim system")]
		[DisplayName("Claim ID")]
		[SampleData("AAA6819")]
		[NotNull]
		[Required]
		[MaxLength(50)]
		[Column("rev_claim_id")]
		public string rev_claim_id { get; set; }

		/// <summary>
		/// Number of line numbers for this claim
		/// </summary>
		[Description("Number of line numbers for this claim")]
		[DisplayName("Claim Line ID")]
		[SampleData("1")]
		[MaxLength(25)]
		[Column("rev_claim_line_id")]
		public string rev_claim_line_id { get; set; }

		/// <summary>
		/// Should be HCFA 1500 or UB04, Dental, Vision, STD
		/// </summary>
		[Description("Should be HCFA 1500 or UB04, Dental, Vision, STD")]
		[DisplayName("Claim Type")]
		[SampleData(" Prof")]
		[MaxLength(15)]
		[Column("rev_claim_type")]
		public string rev_claim_type { get; set; }

		/// <summary>
		/// Claim type description; 0: professional or 1: institutional
		/// </summary>
		[Description("Claim type description; 0: professional or 1: institutional")]
		[DisplayName("Claim Type")]
		[SampleData("1")]
		[Column("rev_claim_type_flag")]
		public char? rev_claim_type_flag { get; set; }

		/// <summary>
		/// Plan type code
		/// </summary>
		[Description("Plan type code")]
		[DisplayName("Plan Type Code")]
		[SampleData("com")]
		[MaxLength(20)]
		[Column("ins_plan_type_code")]
		public string ins_plan_type_code { get; set; }

		/// <summary>
		/// Plan type description
		/// </summary>
		[Description("Plan type description")]
		[DisplayName("Plan Type")]
		[SampleData("Commercial")]
		[MaxLength(255)]
		[Column("ins_plan_type_desc")]
		public string ins_plan_type_desc { get; set; }

		/// <summary>
		/// TPA/ASO/HMO
		/// </summary>
		[Description("TPA/ASO/HMO")]
		[DisplayName("Carrier ID")]
		[SampleData("1")]
		[MaxLength(20)]
		[Column("ins_carrier_id")]
		public string ins_carrier_id { get; set; }

		/// <summary>
		/// TPA/ASO/HMO name
		/// </summary>
		[Description("TPA/ASO/HMO name")]
		[DisplayName("Carrier")]
		[SampleData("Harry TPA")]
		[MaxLength(50)]
		[Column("ins_carrier_name")]
		public string ins_carrier_name { get; set; }

		/// <summary>
		/// Coverage type
		/// </summary>
		[Description("Coverage type")]
		[DisplayName("Coverage Type Code")]
		[SampleData("1")]
		[MaxLength(10)]
		[Column("ins_coverage_type_code")]
		public string ins_coverage_type_code { get; set; }

		/// <summary>
		/// Coverage type name; infer from code
		/// </summary>
		[Description("Coverage type name; infer from code")]
		[DisplayName("Coverage Type")]
		[SampleData("Family")]
		[MaxLength(50)]
		[Column("ins_coverage_type_desc")]
		public string ins_coverage_type_desc { get; set; }

		/// <summary>
		/// Plan id of insurance
		/// </summary>
		[Description("Plan id of insurance")]
		[DisplayName("Plan ID")]
		[SampleData("M720000-M")]
		[MaxLength(20)]
		[Column("ins_plan_id")]
		public string ins_plan_id { get; set; }

		/// <summary>
		/// Identification of the group the subscriber is employed with
		/// </summary>
		[Description("Identification of the group the subscriber is employed with")]
		[DisplayName("Employer Group ID")]
		[SampleData("3198508")]
		[MaxLength(20)]
		[Column("ins_emp_group_id")]
		public string ins_emp_group_id { get; set; }

		/// <summary>
		/// Name of the group the subscriber is employed with
		/// </summary>
		[Description("Name of the group the subscriber is employed with")]
		[DisplayName("Employer Group")]
		[SampleData("Deerwalk")]
		[MaxLength(50)]
		[Column("ins_emp_group_name")]
		public string ins_emp_group_name { get; set; }

		/// <summary>
		/// Identification of the division the subscriber is employed with
		/// </summary>
		[Description("Identification of the division the subscriber is employed with")]
		[DisplayName("Insurance Division ID")]
		[MaxLength(20)]
		[Column("ins_division_id")]
		public string ins_division_id { get; set; }

		/// <summary>
		/// Name of the group the division  subscriber is employed with
		/// </summary>
		[Description("Name of the group the division  subscriber is employed with")]
		[DisplayName("Insurance Division")]
		[MaxLength(100)]
		[Column("ins_division_name")]
		public string ins_division_name { get; set; }

		/// <summary>
		/// Status Code of the Employee - Not Specified : 00, Working : 01, Terminated : 02
		/// </summary>
		[Description("Status Code of the Employee - Not Specified : 00, Working : 01, Terminated : 02")]
		[DisplayName("Cobra Status Code")]
		[SampleData("1")]
		[MaxLength(2)]
		[Column("ins_cobra_code")]
		public string ins_cobra_code { get; set; }

		/// <summary>
		/// Status of the Employee - Working, Terminated, etc
		/// </summary>
		[Description("Status of the Employee - Working, Terminated, etc")]
		[DisplayName("Cobra Status")]
		[SampleData("Working")]
		[MaxLength(30)]
		[Column("ins_cobra_desc")]
		public string ins_cobra_desc { get; set; }

		/// <summary>
		/// Member identification number
		/// </summary>
		[Description("Member identification number")]
		[DisplayName("Member ID")]
		[SampleData("345677")]
		[NotNull]
		[Required]
		[MaxLength(50)]
		[Column("mbr_id")]
		public string mbr_id { get; set; }

		/// <summary>
		/// Member SSN
		/// </summary>
		[Description("Member SSN")]
		[DisplayName("SSN")]
		[SampleData("811619")]
		[MaxLength(30)]
		[Column("mbr_ssn")]
		public string mbr_ssn { get; set; }

		/// <summary>
		/// Member first name
		/// </summary>
		[Description("Member first name")]
		[DisplayName("First Name")]
		[SampleData("BEVERLY")]
		[MaxLength(30)]
		[Column("mbr_first_name")]
		public string mbr_first_name { get; set; }

		/// <summary>
		/// Member middle name
		/// </summary>
		[Description("Member middle name")]
		[DisplayName("Middle Name")]
		[SampleData("George")]
		[MaxLength(30)]
		[Column("mbr_middle_name")]
		public string mbr_middle_name { get; set; }

		/// <summary>
		/// Member last name
		/// </summary>
		[Description("Member last name")]
		[DisplayName("Last Name")]
		[SampleData("BARRETT")]
		[MaxLength(30)]
		[Column("mbr_last_name")]
		public string mbr_last_name { get; set; }

		/// <summary>
		/// Member gender
		/// </summary>
		[Description("Member gender")]
		[DisplayName("Gender")]
		[SampleData("M")]
		[NotNull]
		[Required]
		[MaxLength(2)]
		[Column("mbr_gender")]
		public string mbr_gender { get; set; }

		/// <summary>
		/// Member date of Birth
		/// </summary>
		[Description("Member date of Birth")]
		[DisplayName("DOB")]
		[SampleData("31597")]
		[Column("mbr_dob")]
		public DateTime mbr_dob { get; set; }

		/// <summary>
		/// Member Street Address 1
		/// </summary>
		[Description("Member Street Address 1")]
		[DisplayName("Street 1")]
		[SampleData("5621 TEAKWOOD ROAD")]
		[MaxLength(50)]
		[Column("mbr_street_1")]
		public string mbr_street_1 { get; set; }

		/// <summary>
		/// Member Street Address 2
		/// </summary>
		[Description("Member Street Address 2")]
		[DisplayName("Street 2")]
		[MaxLength(50)]
		[Column("mbr_street_2")]
		public string mbr_street_2 { get; set; }

		/// <summary>
		/// Member City
		/// </summary>
		[Description("Member City")]
		[DisplayName("City")]
		[SampleData("Lakeworth")]
		[MaxLength(50)]
		[Column("mbr_city")]
		public string mbr_city { get; set; }

		/// <summary>
		/// Member County
		/// </summary>
		[Description("Member County")]
		[DisplayName("County")]
		[SampleData("Lexington")]
		[MaxLength(20)]
		[Column("mbr_county")]
		public string mbr_county { get; set; }

		/// <summary>
		/// Abbreviation of State
		/// </summary>
		[Description("Abbreviation of State")]
		[DisplayName("State")]
		[SampleData("FL")]
		[MaxLength(2)]
		[Column("mbr_state")]
		public string mbr_state { get; set; }

		/// <summary>
		/// Zip code
		/// </summary>
		[Description("Zip code")]
		[DisplayName("Zip")]
		[SampleData("34746")]
		[MaxLength(10)]
		[Column("mbr_zip")]
		public string mbr_zip { get; set; }

		/// <summary>
		/// Member Phone
		/// </summary>
		[Description("Member Phone")]
		[DisplayName("Phone")]
		[SampleData("7802966511")]
		[MaxLength(15)]
		[Column("mbr_phone")]
		public string mbr_phone { get; set; }

		/// <summary>
		/// Member Region code
		/// </summary>
		[Description("Member Region code")]
		[DisplayName("Region Code")]
		[MaxLength(32)]
		[Column("mbr_region_code")]
		public string mbr_region_code { get; set; }

		/// <summary>
		/// Member Region
		/// </summary>
		[Description("Member Region")]
		[DisplayName("Region")]
		[MaxLength(50)]
		[Column("mbr_region_name")]
		public string mbr_region_name { get; set; }

		/// <summary>
		/// Relationship Code to the Subscriber; subscriber(01), spouse (02),child (03), other (04)
		/// </summary>
		[Description("Relationship Code to the Subscriber; subscriber(01), spouse (02),child (03), other (04)")]
		[DisplayName("Relationship Code")]
		[MaxLength(10)]
		[Column("mbr_relationship_code")]
		public string mbr_relationship_code { get; set; }

		/// <summary>
		/// Relationship description
		/// </summary>
		[Description("Relationship description")]
		[DisplayName("Relationship")]
		[MaxLength(50)]
		[Column("mbr_relationship_desc")]
		public string mbr_relationship_desc { get; set; }

		/// <summary>
		/// Provider of services for ClaimType=HIC/PHYSICIANS or DENTAL
		/// </summary>
		[Description("Provider of services for ClaimType=HIC/PHYSICIANS or DENTAL")]
		[DisplayName("Provider of")]
		[SampleData("772698")]
		[MaxLength(30)]
		[Column("prv_service_provider_id")]
		public string prv_service_provider_id { get; set; }

		/// <summary>
		/// National Provider ID
		/// </summary>
		[Description("National Provider ID")]
		[DisplayName("National Provider ID")]
		[SampleData("5687456598")]
		[MaxLength(30)]
		[Column("prv_npi")]
		public string prv_npi { get; set; }

		/// <summary>
		/// Provider Tax ID
		/// </summary>
		[Description("Provider Tax ID")]
		[DisplayName("Provider Tax ID")]
		[SampleData("381882404")]
		[MaxLength(30)]
		[Column("prv_tin")]
		public string prv_tin { get; set; }

		/// <summary>
		/// Provider Type Name; Institutional / Professional / Ancillary
		/// </summary>
		[Description("Provider Type Name; Institutional / Professional / Ancillary")]
		[DisplayName("Provider Type")]
		[SampleData("Institutional")]
		[MaxLength(70)]
		[Column("prv_type_desc")]
		public string prv_type_desc { get; set; }

		/// <summary>
		/// First Name of provider
		/// </summary>
		[Description("First Name of provider")]
		[DisplayName("First Name")]
		[SampleData("Dilli")]
		[MaxLength(100)]
		[Column("prv_first_name")]
		public string prv_first_name { get; set; }

		/// <summary>
		/// Middle name of provider
		/// </summary>
		[Description("Middle name of provider")]
		[DisplayName("Middle Name")]
		[SampleData("Raj ")]
		[MaxLength(30)]
		[Column("prv_middle_name")]
		public string prv_middle_name { get; set; }

		/// <summary>
		/// Last Name of provider
		/// </summary>
		[Description("Last Name of provider")]
		[DisplayName("Last Name")]
		[SampleData("Ghimire")]
		[MaxLength(40)]
		[Column("prv_last_name")]
		public string prv_last_name { get; set; }

		/// <summary>
		/// Gender of provider
		/// </summary>
		[Description("Gender of provider")]
		[DisplayName("Gender")]
		[SampleData("M")]
		[MaxLength(2)]
		[Column("prv_gender")]
		public string prv_gender { get; set; }

		/// <summary>
		/// Provider  Native Language
		/// </summary>
		[Description("Provider  Native Language")]
		[DisplayName("Provider Language")]
		[MaxLength(30)]
		[Column("prv_native_language")]
		public string prv_native_language { get; set; }

		/// <summary>
		/// Network Code Provider Paid Through
		/// </summary>
		[Description("Network Code Provider Paid Through")]
		[DisplayName("Network Code")]
		[SampleData("PPOM")]
		[MaxLength(10)]
		[Column("prv_network_code")]
		public string prv_network_code { get; set; }

		/// <summary>
		/// Network Name Provider Paid through
		/// </summary>
		[Description("Network Name Provider Paid through")]
		[DisplayName("Network Name")]
		[MaxLength(50)]
		[Column("prv_network_name")]
		public string prv_network_name { get; set; }

		/// <summary>
		/// Phone of Provider
		/// </summary>
		[Description("Phone of Provider")]
		[DisplayName("PCP Phone")]
		[SampleData("7802222334")]
		[MaxLength(20)]
		[Column("prv_phone")]
		public string prv_phone { get; set; }

		/// <summary>
		/// First Specialty of provider
		/// </summary>
		[Description("First Specialty of provider")]
		[DisplayName("Provider Specialty #1 Code")]
		[SampleData("1054")]
		[MaxLength(10)]
		[Column("prv_speciality_1_code")]
		public string prv_speciality_1_code { get; set; }

		/// <summary>
		/// First Specialty of provider
		/// </summary>
		[Description("First Specialty of provider")]
		[DisplayName("Provider Specialty #1")]
		[SampleData("Radiology")]
		[MaxLength(100)]
		[Column("prv_Specialty_1_desc")]
		public string prv_Specialty_1_desc { get; set; }

		/// <summary>
		/// Second Specialty of provider
		/// </summary>
		[Description("Second Specialty of provider")]
		[DisplayName("Provider Specialty #2 Code")]
		[MaxLength(10)]
		[Column("prv_speciality_2_code")]
		public string prv_speciality_2_code { get; set; }

		/// <summary>
		/// Second Specialty of provider
		/// </summary>
		[Description("Second Specialty of provider")]
		[DisplayName("Provider Specialty #2")]
		[MaxLength(100)]
		[Column("prv_Specialty_2_desc")]
		public string prv_Specialty_2_desc { get; set; }

		/// <summary>
		/// Third Specialty of provider
		/// </summary>
		[Description("Third Specialty of provider")]
		[DisplayName("Provider Specialty #3 Code")]
		[MaxLength(10)]
		[Column("prv_speciality_3_code")]
		public string prv_speciality_3_code { get; set; }

		/// <summary>
		/// Third Specialty of provider
		/// </summary>
		[Description("Third Specialty of provider")]
		[DisplayName("Provider Specialty #3")]
		[MaxLength(100)]
		[Column("prv_Specialty_3_desc")]
		public string prv_Specialty_3_desc { get; set; }

		/// <summary>
		/// Provider first address line
		/// </summary>
		[Description("Provider first address line")]
		[DisplayName("Provider Street 1")]
		[MaxLength(128)]
		[Column("prv_street_1")]
		public string prv_street_1 { get; set; }

		/// <summary>
		/// Provider second address line
		/// </summary>
		[Description("Provider second address line")]
		[DisplayName("Provider Street 2")]
		[MaxLength(128)]
		[Column("prv_street_2")]
		public string prv_street_2 { get; set; }

		/// <summary>
		/// City of provider
		/// </summary>
		[Description("City of provider")]
		[DisplayName("City")]
		[SampleData("Saginaw")]
		[MaxLength(32)]
		[Column("prv_city")]
		public string prv_city { get; set; }

		/// <summary>
		/// County of provider
		/// </summary>
		[Description("County of provider")]
		[DisplayName("County")]
		[SampleData("Lexington")]
		[MaxLength(32)]
		[Column("prv_county")]
		public string prv_county { get; set; }

		/// <summary>
		/// Provider State
		/// </summary>
		[Description("Provider State")]
		[DisplayName("Provider State")]
		[SampleData("MA")]
		[MaxLength(2)]
		[Column("prv_state")]
		public string prv_state { get; set; }

		/// <summary>
		/// Zip code of provider
		/// </summary>
		[Description("Zip code of provider")]
		[DisplayName("Provider Zip")]
		[SampleData("2420")]
		[MaxLength(10)]
		[Column("prv_zip")]
		public string prv_zip { get; set; }

		/// <summary>
		/// Identifies if Provider is - 0: in Network or 1: out of network
		/// </summary>
		[Description("Identifies if Provider is - 0: in Network or 1: out of network")]
		[DisplayName("Identifies if")]
		[SampleData("0")]
		[Column("prv_in_network_flag")]
		public char? prv_in_network_flag { get; set; }

		/// <summary>
		/// Primary Care Physician identification number
		/// </summary>
		[Description("Primary Care Physician identification number")]
		[DisplayName("PCP ID")]
		[MaxLength(30)]
		[Column("prv_pcp_id")]
		public string prv_pcp_id { get; set; }

		/// <summary>
		/// Primary Care Physician First Name
		/// </summary>
		[Description("Primary Care Physician First Name")]
		[DisplayName("PCP First Name")]
		[SampleData("Meredith")]
		[MaxLength(100)]
		[Column("prv_pcp_first_name")]
		public string prv_pcp_first_name { get; set; }

		/// <summary>
		/// Primary Care Physician Middle Name
		/// </summary>
		[Description("Primary Care Physician Middle Name")]
		[DisplayName("PCP Middle Name")]
		[MaxLength(30)]
		[Column("prv_pcp_middle_name")]
		public string prv_pcp_middle_name { get; set; }

		/// <summary>
		/// Primary Care Physician Last Name
		/// </summary>
		[Description("Primary Care Physician Last Name")]
		[DisplayName("PCP Last Name")]
		[SampleData("Gray")]
		[MaxLength(50)]
		[Column("prv_pcp_last_name")]
		public string prv_pcp_last_name { get; set; }

		/// <summary>
		/// Place of Service code
		/// </summary>
		[Description("Place of Service code")]
		[DisplayName("Place of")]
		[SampleData("21")]
		[NotNull]
		[Required]
		[MaxLength(2)]
		[Column("svc_pos_code")]
		public string svc_pos_code { get; set; }

		/// <summary>
		/// Place of Service description; from Master POS table. 
		/// </summary>
		[Description("Place of Service description; from Master POS table. ")]
		[DisplayName("Place of")]
		[SampleData("Inpatient")]
		[MaxLength(50)]
		[Column("svc_pos_desc")]
		public string svc_pos_desc { get; set; }

		/// <summary>
		/// Primary ICD
		/// </summary>
		[Description("Primary ICD")]
		[DisplayName("ICD #1 Code")]
		[SampleData("272")]
		[NotNull]
		[Required]
		[MaxLength(8)]
		[Column("svc_diag_1_code")]
		public string svc_diag_1_code { get; set; }

		/// <summary>
		/// Diagnosis Description; From master ICD9 table. For home grown codes, use client description.
		/// </summary>
		[Description("Diagnosis Description; From master ICD9 table. For home grown codes, use client description.")]
		[DisplayName("ICD #1")]
		[MaxLength(100)]
		[Column("svc_diag_1_desc")]
		public string svc_diag_1_desc { get; set; }

		/// <summary>
		/// Secondary ICD
		/// </summary>
		[Description("Secondary ICD")]
		[DisplayName("ICD #2 Code")]
		[SampleData("401.1")]
		[MaxLength(30)]
		[Column("svc_diag_2_code")]
		public string svc_diag_2_code { get; set; }

		/// <summary>
		/// Diagnosis Description; From master ICD9 table. For home grown codes, use client description.
		/// </summary>
		[Description("Diagnosis Description; From master ICD9 table. For home grown codes, use client description.")]
		[DisplayName("ICD #2")]
		[MaxLength(100)]
		[Column("svc_diag_2_desc")]
		public string svc_diag_2_desc { get; set; }

		/// <summary>
		/// Tertiary ICD
		/// </summary>
		[Description("Tertiary ICD")]
		[DisplayName("ICD #3 Code")]
		[MaxLength(30)]
		[Column("svc_diag_3_code")]
		public string svc_diag_3_code { get; set; }

		/// <summary>
		/// Diagnosis Description; From master ICD9 table. For home grown codes, use client description.
		/// </summary>
		[Description("Diagnosis Description; From master ICD9 table. For home grown codes, use client description.")]
		[DisplayName("ICD #3")]
		[MaxLength(100)]
		[Column("svc_diag_3_desc")]
		public string svc_diag_3_desc { get; set; }

		/// <summary>
		/// 4th ICD
		/// </summary>
		[Description("4th ICD")]
		[DisplayName("ICD #4 Code")]
		[MaxLength(30)]
		[Column("svc_diag_4_code")]
		public string svc_diag_4_code { get; set; }

		/// <summary>
		/// Diagnosis Description; From master ICD9 table. For home grown codes, use client description.
		/// </summary>
		[Description("Diagnosis Description; From master ICD9 table. For home grown codes, use client description.")]
		[DisplayName("ICD #4")]
		[MaxLength(100)]
		[Column("svc_diag_4_desc")]
		public string svc_diag_4_desc { get; set; }

		/// <summary>
		/// 5th ICD
		/// </summary>
		[Description("5th ICD")]
		[DisplayName("ICD #5 Code")]
		[MaxLength(30)]
		[Column("svc_diag_5_code")]
		public string svc_diag_5_code { get; set; }

		/// <summary>
		/// Diagnosis Description; From master ICD9 table. For home grown codes, use client description.
		/// </summary>
		[Description("Diagnosis Description; From master ICD9 table. For home grown codes, use client description.")]
		[DisplayName("ICD #5")]
		[MaxLength(100)]
		[Column("svc_diag_5_desc")]
		public string svc_diag_5_desc { get; set; }

		/// <summary>
		/// 6th ICD
		/// </summary>
		[Description("6th ICD")]
		[DisplayName("ICD #6 Code")]
		[MaxLength(30)]
		[Column("svc_diag_6_code")]
		public string svc_diag_6_code { get; set; }

		/// <summary>
		/// Diagnosis Description; From master ICD9 table. For home grown codes, use client description.
		/// </summary>
		[Description("Diagnosis Description; From master ICD9 table. For home grown codes, use client description.")]
		[DisplayName("ICD #6")]
		[MaxLength(100)]
		[Column("svc_diag_6_desc")]
		public string svc_diag_6_desc { get; set; }

		/// <summary>
		/// 7th ICD
		/// </summary>
		[Description("7th ICD")]
		[DisplayName("ICD #7 Code")]
		[MaxLength(30)]
		[Column("svc_diag_7_code")]
		public string svc_diag_7_code { get; set; }

		/// <summary>
		/// Diagnosis Description; From master ICD9 table. For home grown codes, use client description.
		/// </summary>
		[Description("Diagnosis Description; From master ICD9 table. For home grown codes, use client description.")]
		[DisplayName("ICD #7")]
		[MaxLength(100)]
		[Column("svc_diag_7_desc")]
		public string svc_diag_7_desc { get; set; }

		/// <summary>
		/// 8th ICD
		/// </summary>
		[Description("8th ICD")]
		[DisplayName("ICD #8 Code")]
		[MaxLength(30)]
		[Column("svc_diag_8_code")]
		public string svc_diag_8_code { get; set; }

		/// <summary>
		/// Diagnosis Description; From master ICD9 table. For home grown codes, use client description.
		/// </summary>
		[Description("Diagnosis Description; From master ICD9 table. For home grown codes, use client description.")]
		[DisplayName("ICD #8")]
		[MaxLength(100)]
		[Column("svc_diag_8_desc")]
		public string svc_diag_8_desc { get; set; }

		/// <summary>
		/// 9th ICD
		/// </summary>
		[Description("9th ICD")]
		[DisplayName("ICD #9 Code")]
		[MaxLength(30)]
		[Column("svc_diag_9_code")]
		public string svc_diag_9_code { get; set; }

		/// <summary>
		/// Diagnosis Description; From master ICD9 table. For home grown codes, use client description.
		/// </summary>
		[Description("Diagnosis Description; From master ICD9 table. For home grown codes, use client description.")]
		[DisplayName("ICD #9")]
		[MaxLength(100)]
		[Column("svc_diag_9_desc")]
		public string svc_diag_9_desc { get; set; }

		/// <summary>
		/// Procedure code type - CPT4, Revenue, HCPCS, DRG, RUG (Resource Utilization Group)
		/// </summary>
		[Description("Procedure code type - CPT4, Revenue, HCPCS, DRG, RUG (Resource Utilization Group)")]
		[DisplayName("Procedure code")]
		[SampleData("HCPCS")]
		[MaxLength(10)]
		[Column("svc_procedure_type")]
		public string svc_procedure_type { get; set; }

		/// <summary>
		/// Procedure code; CPT, HCPCS, ICD, REV, DRG in order
		/// </summary>
		[Description("Procedure code; CPT, HCPCS, ICD, REV, DRG in order")]
		[DisplayName("Procedure code")]
		[SampleData("G0107")]
		[NotNull]
		[Required]
		[MaxLength(10)]
		[Column("svc_procedure_code")]
		public string svc_procedure_code { get; set; }

		/// <summary>
		/// Procedure description; From master Procedure table
		/// </summary>
		[Description("Procedure description; From master Procedure table")]
		[DisplayName("Procedure description")]
		[SampleData("Fecal-Occult Blood Test")]
		[MaxLength(200)]
		[Column("svc_procedure_desc")]
		public string svc_procedure_desc { get; set; }

		/// <summary>
		/// Revenue code 
		/// </summary>
		[Description("Revenue code ")]
		[DisplayName("Revenue Code")]
		[SampleData("R002")]
		[MaxLength(5)]
		[Column("svc_rev_code")]
		public string svc_rev_code { get; set; }

		/// <summary>
		/// Revenue code description; From master procedure table
		/// </summary>
		[Description("Revenue code description; From master procedure table")]
		[DisplayName("Revenue Code")]
		[SampleData("Total Charge")]
		[MaxLength(100)]
		[Column("svc_rev_desc")]
		public string svc_rev_desc { get; set; }

		/// <summary>
		/// CPT code
		/// </summary>
		[Description("CPT code")]
		[DisplayName("CPT code")]
		[SampleData("100")]
		[MaxLength(5)]
		[Column("svc_cpt_code")]
		public string svc_cpt_code { get; set; }

		/// <summary>
		/// CPT code description; From master procedure table
		/// </summary>
		[Description("CPT code description; From master procedure table")]
		[DisplayName("CPT code")]
		[SampleData("Anes-Salivary Glands InclBx")]
		[MaxLength(100)]
		[Column("svc_cpt_desc")]
		public string svc_cpt_desc { get; set; }

		/// <summary>
		/// First ICD procedure code
		/// </summary>
		[Description("First ICD procedure code")]
		[DisplayName("ICD #1 Code")]
		[SampleData("9432")]
		[MaxLength(10)]
		[Column("svc_icd_proc_1_code")]
		public string svc_icd_proc_1_code { get; set; }

		/// <summary>
		/// First ICD procedure description
		/// </summary>
		[Description("First ICD procedure description")]
		[DisplayName("ICD #1")]
		[SampleData("Hypnotherapy")]
		[MaxLength(100)]
		[Column("svc_icd_proc_1_desc")]
		public string svc_icd_proc_1_desc { get; set; }

		/// <summary>
		/// Second ICD procedure code
		/// </summary>
		[Description("Second ICD procedure code")]
		[DisplayName("ICD #2 Code")]
		[MaxLength(5)]
		[Column("svc_icd_proc_2_code")]
		public string svc_icd_proc_2_code { get; set; }

		/// <summary>
		/// Second ICD procedure description
		/// </summary>
		[Description("Second ICD procedure description")]
		[DisplayName("ICD #2")]
		[MaxLength(100)]
		[Column("svc_icd_proc_2_desc")]
		public string svc_icd_proc_2_desc { get; set; }

		/// <summary>
		/// DRG Type Code
		/// </summary>
		[Description("DRG Type Code")]
		[DisplayName("Drug Type Code")]
		[SampleData("1")]
		[MaxLength(10)]
		[Column("svc_drg_type_code")]
		public string svc_drg_type_code { get; set; }

		/// <summary>
		/// DRG Type Description
		/// </summary>
		[Description("DRG Type Description")]
		[DisplayName("Drug Type")]
		[SampleData("MS-DRG, DRG")]
		[MaxLength(100)]
		[Column("svc_drg_type_Desc")]
		public string svc_drg_type_Desc { get; set; }

		/// <summary>
		/// Diagnosis related group code
		/// </summary>
		[Description("Diagnosis related group code")]
		[DisplayName("Diagnosis Related Code")]
		[SampleData("1")]
		[MaxLength(7)]
		[Column("svc_drg_code")]
		public string svc_drg_code { get; set; }

		/// <summary>
		/// Diagnosis related group description
		/// </summary>
		[Description("Diagnosis related group description")]
		[DisplayName("Diagnosis Related")]
		[SampleData("HEART TRANSPLANT OR IMPLANT OF HEART ASSIST SYSTEM W MCC")]
		[MaxLength(100)]
		[Column("svc_drg_desc")]
		public string svc_drg_desc { get; set; }

		/// <summary>
		/// HCPCS code
		/// </summary>
		[Description("HCPCS code")]
		[DisplayName("HCPCS code")]
		[SampleData("G0107")]
		[MaxLength(5)]
		[Column("svc_hcpcs_code")]
		public string svc_hcpcs_code { get; set; }

		/// <summary>
		/// HCPCS description
		/// </summary>
		[Description("HCPCS description")]
		[DisplayName("HCPCS description")]
		[SampleData("Fecal-Occult Blood Test")]
		[MaxLength(100)]
		[Column("svc_hcpcs_desc")]
		public string svc_hcpcs_desc { get; set; }

		/// <summary>
		/// CPT4 modifier code
		/// </summary>
		[Description("CPT4 modifier code")]
		[DisplayName("CPT4 modifier")]
		[SampleData("90")]
		[MaxLength(8)]
		[Column("svc_modifier_code")]
		public string svc_modifier_code { get; set; }

		/// <summary>
		/// CPT4 description
		/// </summary>
		[Description("CPT4 description")]
		[DisplayName("CPT4 description")]
		[SampleData("Lab send out")]
		[MaxLength(100)]
		[Column("svc_modifier_desc")]
		public string svc_modifier_desc { get; set; }

		/// <summary>
		/// modifier code
		/// </summary>
		[Description("modifier code")]
		[DisplayName("modifier code")]
		[MaxLength(8)]
		[Column("svc_modifier_2_code")]
		public string svc_modifier_2_code { get; set; }

		/// <summary>
		/// modifier description
		/// </summary>
		[Description("modifier description")]
		[DisplayName("modifier description")]
		[MaxLength(100)]
		[Column("svc_modifier_2_desc")]
		public string svc_modifier_2_desc { get; set; }

		/// <summary>
		/// modifier code
		/// </summary>
		[Description("modifier code")]
		[DisplayName("modifier code")]
		[MaxLength(8)]
		[Column("svc_modifier_3_code")]
		public string svc_modifier_3_code { get; set; }

		/// <summary>
		/// modifier description
		/// </summary>
		[Description("modifier description")]
		[DisplayName("modifier description")]
		[MaxLength(100)]
		[Column("svc_modifier_3_desc")]
		public string svc_modifier_3_desc { get; set; }

		/// <summary>
		/// Type of service code
		/// </summary>
		[Description("Type of service code")]
		[DisplayName("Service Code")]
		[SampleData("85")]
		[MaxLength(5)]
		[Column("svc_tos_code")]
		public string svc_tos_code { get; set; }

		/// <summary>
		/// Type of service description
		/// </summary>
		[Description("Type of service description")]
		[DisplayName("Service")]
		[MaxLength(100)]
		[Column("svc_tos_desc")]
		public string svc_tos_desc { get; set; }

		/// <summary>
		/// Type of discharge code
		/// </summary>
		[Description("Type of discharge code")]
		[DisplayName("Discharge Code")]
		[MaxLength(20)]
		[Column("svc_discharge_code")]
		public string svc_discharge_code { get; set; }

		/// <summary>
		/// Type of discharge description
		/// </summary>
		[Description("Type of discharge description")]
		[DisplayName("Discharge")]
		[MaxLength(100)]
		[Column("svc_discharge_desc")]
		public string svc_discharge_desc { get; set; }

		/// <summary>
		/// Service quantity
		/// </summary>
		[Description("Service quantity")]
		[DisplayName("Service quantity")]
		[Column("svc_service_qty")]
		public int? svc_service_qty { get; set; }

		/// <summary>
		/// Inpatient stay days
		/// </summary>
		[Description("Inpatient stay days")]
		[DisplayName("Inpatient Stay Days")]
		[SampleData("12")]
		[Column("svc_ip_days")]
		public int? svc_ip_days { get; set; }

		/// <summary>
		/// IP days covered by the insurance
		/// </summary>
		[Description("IP days covered by the insurance")]
		[DisplayName("IP days")]
		[SampleData("3")]
		[Column("svc_covered_days")]
		public int? svc_covered_days { get; set; }

		/// <summary>
		/// Internal codes
		/// </summary>
		[Description("Internal codes")]
		[DisplayName("Internal codes")]
		[MaxLength(6)]
		[Column("svc_admit_type")]
		public string svc_admit_type { get; set; }

		/// <summary>
		/// From date
		/// </summary>
		[Description("From date")]
		[DisplayName("From date")]
		[SampleData("39823")]
		[Column("svc_service_frm_date")]
		public DateTime svc_service_frm_date { get; set; }

		/// <summary>
		/// To date / Thru date
		/// </summary>
		[Description("To date / Thru date")]
		[DisplayName("To date")]
		[SampleData("40128")]
		[Column("svc_service_to_date")]
		public DateTime? svc_service_to_date { get; set; }

		/// <summary>
		/// date the claim was adjudicated
		/// </summary>
		[Description("date the claim was adjudicated")]
		[DisplayName("date the")]
		[SampleData("40211")]
		[Column("rev_adjudication_date")]
		public DateTime? rev_adjudication_date { get; set; }

		/// <summary>
		/// date of payment
		/// </summary>
		[Description("date of payment")]
		[DisplayName("Date Paid")]
		[SampleData("40239")]
		[Column("rev_paid_date")]
		public DateTime? rev_paid_date { get; set; }

		/// <summary>
		/// Benefit Code
		/// </summary>
		[Description("Benefit Code")]
		[DisplayName("Benefit Code")]
		[SampleData("105")]
		[MaxLength(10)]
		[Column("svc_benefit_code")]
		public string svc_benefit_code { get; set; }

		/// <summary>
		/// Benefit Code description
		/// </summary>
		[Description("Benefit Code description")]
		[DisplayName("Benefit Code")]
		[SampleData("Emergency and Urgent Care Services")]
		[MaxLength(100)]
		[Column("svc_benefit_desc")]
		public string svc_benefit_desc { get; set; }

		/// <summary>
		/// Amount allowed under contract
		/// </summary>
		[Description("Amount allowed under contract")]
		[DisplayName("Amount Allowed")]
		[SampleData("180")]
		[Column("rev_allowed_amt")]
		public decimal? rev_allowed_amt { get; set; }

		/// <summary>
		/// Gross charges
		/// </summary>
		[Description("Gross charges")]
		[DisplayName("Gross Charges")]
		[SampleData("100")]
		[Column("rev_billed_amt")]
		public decimal? rev_billed_amt { get; set; }

		/// <summary>
		/// Coordination of benefits on the medical plan
		/// </summary>
		[Description("Coordination of benefits on the medical plan")]
		[DisplayName("Coordination of")]
		[SampleData("10")]
		[Column("rev_cob_paid_amt")]
		public decimal? rev_cob_paid_amt { get; set; }

		/// <summary>
		/// Coinsurance due from patient
		/// </summary>
		[Description("Coinsurance due from patient")]
		[DisplayName("Coinsurance Amount Due")]
		[SampleData("5")]
		[Column("rev_coinsurance_amt")]
		public decimal? rev_coinsurance_amt { get; set; }

		/// <summary>
		/// Amount collected from the patient as a co-payment.
		/// </summary>
		[Description("Amount collected from the patient as a co-payment.")]
		[DisplayName("Copay Amount Collected")]
		[SampleData("5")]
		[Column("rev_copay_amt")]
		public decimal? rev_copay_amt { get; set; }

		/// <summary>
		/// Network usage charge
		/// </summary>
		[Description("Network usage charge")]
		[DisplayName("Network usage")]
		[SampleData("30")]
		[Column("rev_coverage_charge_amt")]
		public decimal? rev_coverage_charge_amt { get; set; }

		/// <summary>
		/// Deductible Portion of the Allowed Amount 
		/// </summary>
		[Description("Deductible Portion of the Allowed Amount ")]
		[DisplayName("Deductable Amount")]
		[SampleData("5")]
		[Column("rev_deductible_amt")]
		public decimal? rev_deductible_amt { get; set; }

		/// <summary>
		/// Billed Charges not covered under the Member policy
		/// </summary>
		[Description("Billed Charges not covered under the Member policy")]
		[DisplayName("Billed Charges")]
		[SampleData("30")]
		[Column("rev_not_covered_amt")]
		public decimal? rev_not_covered_amt { get; set; }

		/// <summary>
		/// Other Savings generated
		/// </summary>
		[Description("Other Savings generated")]
		[DisplayName("Other Savings")]
		[SampleData("10")]
		[Column("rev_other_savings")]
		public decimal? rev_other_savings { get; set; }

		/// <summary>
		/// PPO Savings
		/// </summary>
		[Description("PPO Savings")]
		[DisplayName("PPO Savings")]
		[SampleData("10")]
		[Column("rev_ppo_savings")]
		public decimal? rev_ppo_savings { get; set; }

		/// <summary>
		/// Amount paid
		/// </summary>
		[Description("Amount paid")]
		[DisplayName("Amount Paid")]
		[SampleData("300")]
		[Column("rev_paid_amt")]
		public decimal rev_paid_amt { get; set; }

		/// <summary>
		/// Fee for service vs Capitated (FFS or CAP)
		/// </summary>
		[Description("Fee for service vs Capitated (FFS or CAP)")]
		[DisplayName("Fee for")]
		[MaxLength(4)]
		[Column("rev_pay_type")]
		public string rev_pay_type { get; set; }

		/// <summary>
		/// Insurance check number
		/// </summary>
		[Description("Insurance check number")]
		[DisplayName("Insurance Check Num")]
		[MaxLength(20)]
		[Column("rev_check_num")]
		public string rev_check_num { get; set; }

		/// <summary>
		/// Authorization Number from Insurance Company
		/// </summary>
		[Description("Authorization Number from Insurance Company")]
		[DisplayName("Authorization Number")]
		[MaxLength(50)]
		[Column("svc_pre_authorization")]
		public string svc_pre_authorization { get; set; }

		/// <summary>
		/// Adjudication code
		/// </summary>
		[Description("Adjudication code")]
		[DisplayName("Adjudication Code")]
		[SampleData("P")]
		[MaxLength(8)]
		[Column("rev_adjudication_code")]
		public string rev_adjudication_code { get; set; }

		/// <summary>
		/// Adjudication description
		/// </summary>
		[Description("Adjudication description")]
		[DisplayName("Adjudication")]
		[SampleData("Paid")]
		[MaxLength(50)]
		[Column("rev_adjudication_desc")]
		public string rev_adjudication_desc { get; set; }

		/// <summary>
		/// Patient Number issued by Provider
		/// </summary>
		[Description("Patient Number issued by Provider")]
		[DisplayName("Patient Number")]
		[MaxLength(30)]
		[Column("mbr_mrn")]
		public string mbr_mrn { get; set; }

		/// <summary>
		/// Health Insurance Claim Number to identify Medicare Patients
		/// </summary>
		[Description("Health Insurance Claim Number to identify Medicare Patients")]
		[DisplayName("Health Insurance")]
		[MaxLength(11)]
		[Column("mbr_hicn")]
		public string mbr_hicn { get; set; }

		/// <summary>
		/// Type of Bill.
		/// </summary>
		[Description("Type of Bill.")]
		[DisplayName("Bill Type Code")]
		[SampleData("110")]
		[MaxLength(3)]
		[Column("rev_bill_type_code")]
		public string rev_bill_type_code { get; set; }

		/// <summary>
		/// Description out of master table for Bill type
		/// </summary>
		[Description("Description out of master table for Bill type")]
		[DisplayName("Bill Type")]
		[MaxLength(100)]
		[Column("rev_bill_type_desc")]
		public string rev_bill_type_desc { get; set; }

		/// <summary>
		/// User Defined Field 1
		/// </summary>
		[Description("User Defined Field 1")]
		[DisplayName("UDF 1")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf1")]
		public string udf1 { get; set; }

		/// <summary>
		/// User Defined Field 2
		/// </summary>
		[Description("User Defined Field 2")]
		[DisplayName("UDF 2")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf2")]
		public string udf2 { get; set; }

		/// <summary>
		/// User Defined Field 3
		/// </summary>
		[Description("User Defined Field 3")]
		[DisplayName("UDF 3")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf3")]
		public string udf3 { get; set; }

		/// <summary>
		/// User Defined Field 4
		/// </summary>
		[Description("User Defined Field 4")]
		[DisplayName("UDF 4")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf4")]
		public string udf4 { get; set; }

		/// <summary>
		/// User Defined Field 5
		/// </summary>
		[Description("User Defined Field 5")]
		[DisplayName("UDF 5")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf5")]
		public string udf5 { get; set; }

		/// <summary>
		/// User Defined Field 6
		/// </summary>
		[Description("User Defined Field 6")]
		[DisplayName("UDF 6")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf6")]
		public string udf6 { get; set; }

		/// <summary>
		/// User Defined Field 7
		/// </summary>
		[Description("User Defined Field 7")]
		[DisplayName("UDF 7")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf7")]
		public string udf7 { get; set; }

		/// <summary>
		/// User Defined Field 8
		/// </summary>
		[Description("User Defined Field 8")]
		[DisplayName("UDF 8")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf8")]
		public string udf8 { get; set; }

		/// <summary>
		/// User Defined Field 9
		/// </summary>
		[Description("User Defined Field 9")]
		[DisplayName("UDF 9")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf9")]
		public string udf9 { get; set; }

		/// <summary>
		/// User Defined Field 10
		/// </summary>
		[Description("User Defined Field 10")]
		[DisplayName("UDF 10")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf10")]
		public string udf10 { get; set; }

		/// <summary>
		/// User Defined Field 11
		/// </summary>
		[Description("User Defined Field 11")]
		[DisplayName("UDF 11")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf11")]
		public string udf11 { get; set; }

		/// <summary>
		/// User Defined Field 12
		/// </summary>
		[Description("User Defined Field 12")]
		[DisplayName("UDF 12")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf12")]
		public string udf12 { get; set; }

		/// <summary>
		/// User Defined Field 13
		/// </summary>
		[Description("User Defined Field 13")]
		[DisplayName("UDF 13")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf13")]
		public string udf13 { get; set; }

		/// <summary>
		/// User Defined Field 14
		/// </summary>
		[Description("User Defined Field 14")]
		[DisplayName("UDF 14")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf14")]
		public string udf14 { get; set; }

		/// <summary>
		/// User Defined Field 15
		/// </summary>
		[Description("User Defined Field 15")]
		[DisplayName("UDF 15")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf15")]
		public string udf15 { get; set; }

		/// <summary>
		/// User Defined Field 16
		/// </summary>
		[Description("User Defined Field 16")]
		[DisplayName("UDF 16")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf16")]
		public string udf16 { get; set; }

		/// <summary>
		/// User Defined Field 17
		/// </summary>
		[Description("User Defined Field 17")]
		[DisplayName("UDF 17")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf17")]
		public string udf17 { get; set; }

		/// <summary>
		/// User Defined Field 18
		/// </summary>
		[Description("User Defined Field 18")]
		[DisplayName("UDF 18")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf18")]
		public string udf18 { get; set; }

		/// <summary>
		/// User Defined Field 19
		/// </summary>
		[Description("User Defined Field 19")]
		[DisplayName("UDF 19")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf19")]
		public string udf19 { get; set; }

		/// <summary>
		/// User Defined Field 20
		/// </summary>
		[Description("User Defined Field 20")]
		[DisplayName("UDF 20")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf20")]
		public string udf20 { get; set; }

		[DisplayName("Dw Vendor Name")]
		[MaxLength(20)]
		[Column("dw_vendor_name")]
		public string dw_vendor_name { get; set; }

		[DisplayName("Dw Admrule")]
		[MaxLength(6)]
		[Column("dw_admrule")]
		public string dw_admrule { get; set; }

		[DisplayName("Proc1 Grouper Id")]
		[MaxLength(100)]
		[Column("proc1_grouper_id")]
		public string proc1_grouper_id { get; set; }

		[DisplayName("Proc1 Grouper Desc")]
		[MaxLength(100)]
		[Column("proc1_grouper_desc")]
		public string proc1_grouper_desc { get; set; }

		[DisplayName("Proc1  Subgrouper Id")]
		[MaxLength(100)]
		[Column("proc1_Subgrouper_id")]
		public string proc1_Subgrouper_id { get; set; }

		[DisplayName("Proc1  Subgrouper Desc")]
		[MaxLength(100)]
		[Column("proc1_Subgrouper_desc")]
		public string proc1_Subgrouper_desc { get; set; }

		[DisplayName("Rev Grouper Id")]
		[MaxLength(100)]
		[Column("rev_grouper_id")]
		public string rev_grouper_id { get; set; }

		[DisplayName("Rev Grouper Desc")]
		[MaxLength(100)]
		[Column("rev_grouper_desc")]
		public string rev_grouper_desc { get; set; }

		[DisplayName("Rev Subgrouper Id")]
		[MaxLength(100)]
		[Column("rev_subgrouper_id")]
		public string rev_subgrouper_id { get; set; }

		[DisplayName("Rev Subgrouper Desc")]
		[MaxLength(100)]
		[Column("rev_subgrouper_desc")]
		public string rev_subgrouper_desc { get; set; }

		[DisplayName("Cpt Grouper Id")]
		[MaxLength(100)]
		[Column("cpt_grouper_id")]
		public string cpt_grouper_id { get; set; }

		[DisplayName("Cpt Grouper Desc")]
		[MaxLength(100)]
		[Column("cpt_grouper_desc")]
		public string cpt_grouper_desc { get; set; }

		[DisplayName("Cpt Subgrouper Id")]
		[MaxLength(100)]
		[Column("cpt_subgrouper_id")]
		public string cpt_subgrouper_id { get; set; }

		[DisplayName("Cpt Subgrouper Desc")]
		[MaxLength(100)]
		[Column("cpt_subgrouper_desc")]
		public string cpt_subgrouper_desc { get; set; }

		[DisplayName("Icd1 Grouper Id")]
		[MaxLength(100)]
		[Column("icd1_grouper_id")]
		public string icd1_grouper_id { get; set; }

		[DisplayName("Icd1 Grouper Desc")]
		[MaxLength(100)]
		[Column("icd1_grouper_desc")]
		public string icd1_grouper_desc { get; set; }

		[DisplayName("Icd1 Subgrouper Id")]
		[MaxLength(100)]
		[Column("icd1_subgrouper_id")]
		public string icd1_subgrouper_id { get; set; }

		[DisplayName("Icd1 Subgrouper Desc")]
		[MaxLength(100)]
		[Column("icd1_subgrouper_desc")]
		public string icd1_subgrouper_desc { get; set; }

		[DisplayName("Icd2 Grouper Id")]
		[MaxLength(100)]
		[Column("icd2_grouper_id")]
		public string icd2_grouper_id { get; set; }

		[DisplayName("Icd2 Grouper Desc")]
		[MaxLength(100)]
		[Column("icd2_grouper_desc")]
		public string icd2_grouper_desc { get; set; }

		[DisplayName("Icd2 Subgrouper Id")]
		[MaxLength(100)]
		[Column("icd2_subgrouper_id")]
		public string icd2_subgrouper_id { get; set; }

		[DisplayName("Icd2 Subgrouper Desc")]
		[MaxLength(100)]
		[Column("icd2_subgrouper_desc")]
		public string icd2_subgrouper_desc { get; set; }

		[DisplayName("Drg Grouper Id")]
		[MaxLength(100)]
		[Column("drg_grouper_id")]
		public string drg_grouper_id { get; set; }

		[DisplayName("Drg Grouper Desc")]
		[MaxLength(100)]
		[Column("drg_grouper_desc")]
		public string drg_grouper_desc { get; set; }

		[DisplayName("Drg Subgrouper Id")]
		[MaxLength(100)]
		[Column("drg_subgrouper_id")]
		public string drg_subgrouper_id { get; set; }

		[DisplayName("Drg Subgrouper Desc")]
		[MaxLength(100)]
		[Column("drg_subgrouper_desc")]
		public string drg_subgrouper_desc { get; set; }

		[DisplayName("Hcpcs Grouper Id")]
		[MaxLength(100)]
		[Column("hcpcs_grouper_id")]
		public string hcpcs_grouper_id { get; set; }

		[DisplayName("Hcpcs Grouper Desc")]
		[MaxLength(100)]
		[Column("hcpcs_grouper_desc")]
		public string hcpcs_grouper_desc { get; set; }

		[DisplayName("Hcpcs Subgrouper Id")]
		[MaxLength(100)]
		[Column("hcpcs_subgrouper_id")]
		public string hcpcs_subgrouper_id { get; set; }

		[DisplayName("Hcpcs Subgrouper Desc")]
		[MaxLength(100)]
		[Column("hcpcs_subgrouper_desc")]
		public string hcpcs_subgrouper_desc { get; set; }

		[DisplayName("Diagnosis Grouper #1 ID")]
		[MaxLength(100)]
		[Column("diag1_grouper_id")]
		public string diag1_grouper_id { get; set; }

		[DisplayName("Diagnosis Grouper #1")]
		[MaxLength(100)]
		[Column("diag1_grouper_desc")]
		public string diag1_grouper_desc { get; set; }

		[DisplayName("Diagnosis Super Grouper #1 ID")]
		[MaxLength(100)]
		[Column("diag1_supergrouper_id")]
		public string diag1_supergrouper_id { get; set; }

		[DisplayName("Diagnosis Super Grouper #1")]
		[MaxLength(100)]
		[Column("diag1_supergrouper_desc")]
		public string diag1_supergrouper_desc { get; set; }

		[DisplayName("Diagnosis Grouper #2 ID")]
		[MaxLength(100)]
		[Column("diag2_grouper_id")]
		public string diag2_grouper_id { get; set; }

		[DisplayName("Diagnosis Grouper #2")]
		[MaxLength(100)]
		[Column("diag2_grouper_desc")]
		public string diag2_grouper_desc { get; set; }

		[DisplayName("Diagnosis Super Grouper #2 ID")]
		[MaxLength(100)]
		[Column("diag2_supergrouper_id")]
		public string diag2_supergrouper_id { get; set; }

		[DisplayName("Diagnosis Super Grouper #2")]
		[MaxLength(100)]
		[Column("diag2_supergrouper_desc")]
		public string diag2_supergrouper_desc { get; set; }

		[DisplayName("Diagnosis Grouper #3 ID")]
		[MaxLength(100)]
		[Column("diag3_grouper_id")]
		public string diag3_grouper_id { get; set; }

		[DisplayName("Diagnosis Grouper #3")]
		[MaxLength(100)]
		[Column("diag3_grouper_desc")]
		public string diag3_grouper_desc { get; set; }

		[DisplayName("Diagnosis Super Grouper #3 ID")]
		[MaxLength(100)]
		[Column("diag3_supergrouper_id")]
		public string diag3_supergrouper_id { get; set; }

		[DisplayName("Diagnosis Super Grouper #3")]
		[MaxLength(100)]
		[Column("diag3_supergrouper_desc")]
		public string diag3_supergrouper_desc { get; set; }

		[DisplayName("Diagnosis Grouper #4 ID")]
		[MaxLength(100)]
		[Column("diag4_grouper_id")]
		public string diag4_grouper_id { get; set; }

		[DisplayName("Diagnosis Grouper #4")]
		[MaxLength(100)]
		[Column("diag4_grouper_desc")]
		public string diag4_grouper_desc { get; set; }

		[DisplayName("Diagnosis Super Grouper #4 ID")]
		[MaxLength(100)]
		[Column("diag4_supergrouper_id")]
		public string diag4_supergrouper_id { get; set; }

		[DisplayName("Diagnosis Super Grouper #4")]
		[MaxLength(100)]
		[Column("diag4_supergrouper_desc")]
		public string diag4_supergrouper_desc { get; set; }

		[DisplayName("Diagnosis Grouper #5 ID")]
		[MaxLength(100)]
		[Column("diag5_grouper_id")]
		public string diag5_grouper_id { get; set; }

		[DisplayName("Diagnosis Grouper #5")]
		[MaxLength(100)]
		[Column("diag5_grouper_desc")]
		public string diag5_grouper_desc { get; set; }

		[DisplayName("Diagnosis Super Grouper #5 ID")]
		[MaxLength(100)]
		[Column("diag5_supergrouper_id")]
		public string diag5_supergrouper_id { get; set; }

		[DisplayName("Diagnosis Super Grouper #5")]
		[MaxLength(100)]
		[Column("diag5_supergrouper_desc")]
		public string diag5_supergrouper_desc { get; set; }

		[DisplayName("Diagnosis Grouper #6 ID")]
		[MaxLength(100)]
		[Column("diag6_grouper_id")]
		public string diag6_grouper_id { get; set; }

		[DisplayName("Diagnosis Grouper #6")]
		[MaxLength(100)]
		[Column("diag6_grouper_desc")]
		public string diag6_grouper_desc { get; set; }

		[DisplayName("Diagnosis Super Grouper #6 ID")]
		[MaxLength(100)]
		[Column("diag6_supergrouper_id")]
		public string diag6_supergrouper_id { get; set; }

		[DisplayName("Diagnosis Super Grouper #6")]
		[MaxLength(100)]
		[Column("diag6_supergrouper_desc")]
		public string diag6_supergrouper_desc { get; set; }

		[DisplayName("Diagnosis Grouper #7 ID")]
		[MaxLength(100)]
		[Column("diag7_grouper_id")]
		public string diag7_grouper_id { get; set; }

		[DisplayName("Diagnosis Grouper #7")]
		[MaxLength(100)]
		[Column("diag7_grouper_desc")]
		public string diag7_grouper_desc { get; set; }

		[DisplayName("Diagnosis Super Grouper #7 ID")]
		[MaxLength(100)]
		[Column("diag7_supergrouper_id")]
		public string diag7_supergrouper_id { get; set; }

		[DisplayName("Diagnosis Super Grouper #7")]
		[MaxLength(100)]
		[Column("diag7_supergrouper_desc")]
		public string diag7_supergrouper_desc { get; set; }

		[DisplayName("Diagnosis Grouper #8 ID")]
		[MaxLength(100)]
		[Column("diag8_grouper_id")]
		public string diag8_grouper_id { get; set; }

		[DisplayName("Diagnosis Grouper #8")]
		[MaxLength(100)]
		[Column("diag8_grouper_desc")]
		public string diag8_grouper_desc { get; set; }

		[DisplayName("Diagnosis Super Grouper #8 ID")]
		[MaxLength(100)]
		[Column("diag8_supergrouper_id")]
		public string diag8_supergrouper_id { get; set; }

		[DisplayName("Diagnosis Super Grouper #8")]
		[MaxLength(100)]
		[Column("diag8_supergrouper_desc")]
		public string diag8_supergrouper_desc { get; set; }

		[DisplayName("Diagnosis Grouper #9 ID")]
		[MaxLength(100)]
		[Column("diag9_grouper_id")]
		public string diag9_grouper_id { get; set; }

		[DisplayName("Diagnosis Grouper #9")]
		[MaxLength(100)]
		[Column("diag9_grouper_desc")]
		public string diag9_grouper_desc { get; set; }

		[DisplayName("Diagnosis Super Grouper #9 ID")]
		[MaxLength(100)]
		[Column("diag9_supergrouper_id")]
		public string diag9_supergrouper_id { get; set; }

		[DisplayName("Diagnosis Super Grouper #9")]
		[MaxLength(100)]
		[Column("diag9_supergrouper_desc")]
		public string diag9_supergrouper_desc { get; set; }

		[DisplayName("Cpt Betos")]
		[MaxLength(20)]
		[Column("cpt_betos")]
		public string cpt_betos { get; set; }

		[DisplayName("Cpt Betos Grouper")]
		[MaxLength(100)]
		[Column("cpt_betos_grouper")]
		public string cpt_betos_grouper { get; set; }

		[DisplayName("Cpt Betos Sub Grouper")]
		[MaxLength(100)]
		[Column("cpt_betos_sub_grouper")]
		public string cpt_betos_sub_grouper { get; set; }

		[DisplayName("Hcpcs Betos")]
		[MaxLength(100)]
		[Column("hcpcs_betos")]
		public string hcpcs_betos { get; set; }

		[DisplayName("Hcpcs Betos Grouper")]
		[MaxLength(100)]
		[Column("hcpcs_betos_grouper")]
		public string hcpcs_betos_grouper { get; set; }

		[DisplayName("Hcpcs Betos Sub Grouper")]
		[MaxLength(100)]
		[Column("hcpcs_betos_sub_grouper")]
		public string hcpcs_betos_sub_grouper { get; set; }

		[DisplayName("Rev Betos")]
		[MaxLength(100)]
		[Column("rev_betos")]
		public string rev_betos { get; set; }

		[DisplayName("Rev Betos Grouper")]
		[MaxLength(100)]
		[Column("rev_betos_grouper")]
		public string rev_betos_grouper { get; set; }

		[DisplayName("Rev Betos Sub Grouper")]
		[MaxLength(100)]
		[Column("rev_betos_sub_grouper")]
		public string rev_betos_sub_grouper { get; set; }

		[DisplayName("Icd1 Betos")]
		[MaxLength(100)]
		[Column("icd1_betos")]
		public string icd1_betos { get; set; }

		[DisplayName("Icd1 Betos Grouper")]
		[MaxLength(100)]
		[Column("icd1_betos_grouper")]
		public string icd1_betos_grouper { get; set; }

		[DisplayName("Icd1 Betos Sub Grouper")]
		[MaxLength(100)]
		[Column("icd1_betos_sub_grouper")]
		public string icd1_betos_sub_grouper { get; set; }

		[DisplayName("Icd2 Betos")]
		[MaxLength(100)]
		[Column("icd2_betos")]
		public string icd2_betos { get; set; }

		[DisplayName("Icd2 Betos Grouper")]
		[MaxLength(100)]
		[Column("icd2_betos_grouper")]
		public string icd2_betos_grouper { get; set; }

		[DisplayName("Icd2 Betos Sub Grouper")]
		[MaxLength(100)]
		[Column("icd2_betos_sub_grouper")]
		public string icd2_betos_sub_grouper { get; set; }

		[DisplayName("Drg Betos")]
		[MaxLength(100)]
		[Column("drg_betos")]
		public string drg_betos { get; set; }

		[DisplayName("Drg Betos Grouper")]
		[MaxLength(100)]
		[Column("drg_betos_grouper")]
		public string drg_betos_grouper { get; set; }

		[DisplayName("Drg Betos Sub Grouper")]
		[MaxLength(100)]
		[Column("drg_betos_sub_grouper")]
		public string drg_betos_sub_grouper { get; set; }

		[DisplayName("Proc7 Betos")]
		[MaxLength(100)]
		[Column("proc7_betos")]
		public string proc7_betos { get; set; }

		[DisplayName("Proc7 Betos Grouper")]
		[MaxLength(100)]
		[Column("proc7_betos_grouper")]
		public string proc7_betos_grouper { get; set; }

		[DisplayName("Proc7 Betos Sub Grouper")]
		[MaxLength(100)]
		[Column("proc7_betos_sub_grouper")]
		public string proc7_betos_sub_grouper { get; set; }

		[DisplayName("Dw Creation Date")]
		[Column("dw_creation_date")]
		public DateTime? dw_creation_date { get; set; }

		[DisplayName("Dw Update Date")]
		[Column("dw_update_date")]
		public DateTime? dw_update_date { get; set; }

		[DisplayName("Dw Rawfilename")]
		[MaxLength(255)]
		[Column("dw_rawfilename")]
		public string dw_rawfilename { get; set; }

		[DisplayName("Dw Recievedmonth")]
		[MaxLength(10)]
		[Column("dw_recievedmonth")]
		public string dw_recievedmonth { get; set; }

		/// <summary>
		/// To map with visit table (dw_record_id)
		/// </summary>
		[Description("To map with visit table (dw_record_id)")]
		[DisplayName("To map")]
		[SampleData("17")]
		[Column("visit_id")]
		public int? visit_id { get; set; }

		/// <summary>
		/// Member ID
		/// </summary>
		[Description("Member ID")]
		[DisplayName("Member ID")]
		[SampleData("Hash Encrypted")]
		[MaxLength(50)]
		[Column("dw_member_id")]
		public string dw_member_id { get; set; }

		/// <summary>
		/// Boolean Field
		/// </summary>
		[Description("Boolean Field")]
		[DisplayName("Boolean Field")]
		[SampleData("True for Non-EM members  and False for EM members")]
		[MaxLength(20)]
		[Column("is_makalu_used")]
		public string is_makalu_used { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 21")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf21")]
		public string udf21 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 22")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf22")]
		public string udf22 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 23")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf23")]
		public string udf23 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 24")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf24")]
		public string udf24 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 25")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf25")]
		public string udf25 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 26")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf26")]
		public string udf26 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 27")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf27")]
		public string udf27 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 28")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf28")]
		public string udf28 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 29")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf29")]
		public string udf29 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 30")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf30")]
		public string udf30 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 31")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf31")]
		public string udf31 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 32")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf32")]
		public string udf32 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 33")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf33")]
		public string udf33 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 34")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf34")]
		public string udf34 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 35")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf35")]
		public string udf35 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 36")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf36")]
		public string udf36 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 37")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf37")]
		public string udf37 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 38")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf38")]
		public string udf38 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 39")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf39")]
		public string udf39 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 40")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf40")]
		public string udf40 { get; set; }

		[DisplayName("Mbr Dob Date Dim Id")]
		[Column("MbrDobDateDimId")]
		public int? MbrDobDateDimId { get; set; }

		[ForeignKey("MbrDobDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension MbrDobDateDim { get; set; }

		[DisplayName("Svc Service Frm Date Date Dim Id")]
		[Column("SvcServiceFrmDateDateDimId")]
		public int? SvcServiceFrmDateDateDimId { get; set; }

		[ForeignKey("SvcServiceFrmDateDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension SvcServiceFrmDateDateDim { get; set; }

		[DisplayName("Svc Service To Date Date Dim Id")]
		[Column("SvcServiceToDateDateDimId")]
		public int? SvcServiceToDateDateDimId { get; set; }

		[ForeignKey("SvcServiceToDateDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension SvcServiceToDateDateDim { get; set; }

		[DisplayName("Rev Adjudication Date Date Dim Id")]
		[Column("RevAdjudicationDateDateDimId")]
		public int? RevAdjudicationDateDateDimId { get; set; }

		[ForeignKey("RevAdjudicationDateDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension RevAdjudicationDateDateDim { get; set; }

		[DisplayName("Rev Paid Date Date Dim Id")]
		[Column("RevPaidDateDateDimId")]
		public int? RevPaidDateDateDimId { get; set; }

		[ForeignKey("RevPaidDateDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension RevPaidDateDateDim { get; set; }

		[DisplayName("Dw Creation Date Date Dim Id")]
		[Column("DwCreationDateDateDimId")]
		public int? DwCreationDateDateDimId { get; set; }

		[ForeignKey("DwCreationDateDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension DwCreationDateDateDim { get; set; }

		[DisplayName("Dw Update Date Date Dim Id")]
		[Column("DwUpdateDateDateDimId")]
		public int? DwUpdateDateDateDimId { get; set; }

		[ForeignKey("DwUpdateDateDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension DwUpdateDateDateDim { get; set; }

		[DisplayName("Date Dimensions Linked")]
		[Column("DateDimensionsLinked")]
		public bool DateDimensionsLinked { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} MedicalClaimId={MedicalClaimId} {extras}";
		}

		partial void OnConstructed();
	
		public MedicalClaim()
			: this(null)
		{}

		public MedicalClaim(MedicalClaim other)
		{
			if (other!=null)
			{
				TenantId = other.TenantId;
				ContactId = other.ContactId;
				rev_claim_id = other.rev_claim_id;
				rev_claim_line_id = other.rev_claim_line_id;
				rev_claim_type = other.rev_claim_type;
				rev_claim_type_flag = other.rev_claim_type_flag;
				ins_plan_type_code = other.ins_plan_type_code;
				ins_plan_type_desc = other.ins_plan_type_desc;
				ins_carrier_id = other.ins_carrier_id;
				ins_carrier_name = other.ins_carrier_name;
				ins_coverage_type_code = other.ins_coverage_type_code;
				ins_coverage_type_desc = other.ins_coverage_type_desc;
				ins_plan_id = other.ins_plan_id;
				ins_emp_group_id = other.ins_emp_group_id;
				ins_emp_group_name = other.ins_emp_group_name;
				ins_division_id = other.ins_division_id;
				ins_division_name = other.ins_division_name;
				ins_cobra_code = other.ins_cobra_code;
				ins_cobra_desc = other.ins_cobra_desc;
				mbr_id = other.mbr_id;
				mbr_ssn = other.mbr_ssn;
				mbr_first_name = other.mbr_first_name;
				mbr_middle_name = other.mbr_middle_name;
				mbr_last_name = other.mbr_last_name;
				mbr_gender = other.mbr_gender;
				mbr_dob = other.mbr_dob;
				mbr_street_1 = other.mbr_street_1;
				mbr_street_2 = other.mbr_street_2;
				mbr_city = other.mbr_city;
				mbr_county = other.mbr_county;
				mbr_state = other.mbr_state;
				mbr_zip = other.mbr_zip;
				mbr_phone = other.mbr_phone;
				mbr_region_code = other.mbr_region_code;
				mbr_region_name = other.mbr_region_name;
				mbr_relationship_code = other.mbr_relationship_code;
				mbr_relationship_desc = other.mbr_relationship_desc;
				prv_service_provider_id = other.prv_service_provider_id;
				prv_npi = other.prv_npi;
				prv_tin = other.prv_tin;
				prv_type_desc = other.prv_type_desc;
				prv_first_name = other.prv_first_name;
				prv_middle_name = other.prv_middle_name;
				prv_last_name = other.prv_last_name;
				prv_gender = other.prv_gender;
				prv_native_language = other.prv_native_language;
				prv_network_code = other.prv_network_code;
				prv_network_name = other.prv_network_name;
				prv_phone = other.prv_phone;
				prv_speciality_1_code = other.prv_speciality_1_code;
				prv_Specialty_1_desc = other.prv_Specialty_1_desc;
				prv_speciality_2_code = other.prv_speciality_2_code;
				prv_Specialty_2_desc = other.prv_Specialty_2_desc;
				prv_speciality_3_code = other.prv_speciality_3_code;
				prv_Specialty_3_desc = other.prv_Specialty_3_desc;
				prv_street_1 = other.prv_street_1;
				prv_street_2 = other.prv_street_2;
				prv_city = other.prv_city;
				prv_county = other.prv_county;
				prv_state = other.prv_state;
				prv_zip = other.prv_zip;
				prv_in_network_flag = other.prv_in_network_flag;
				prv_pcp_id = other.prv_pcp_id;
				prv_pcp_first_name = other.prv_pcp_first_name;
				prv_pcp_middle_name = other.prv_pcp_middle_name;
				prv_pcp_last_name = other.prv_pcp_last_name;
				svc_pos_code = other.svc_pos_code;
				svc_pos_desc = other.svc_pos_desc;
				svc_diag_1_code = other.svc_diag_1_code;
				svc_diag_1_desc = other.svc_diag_1_desc;
				svc_diag_2_code = other.svc_diag_2_code;
				svc_diag_2_desc = other.svc_diag_2_desc;
				svc_diag_3_code = other.svc_diag_3_code;
				svc_diag_3_desc = other.svc_diag_3_desc;
				svc_diag_4_code = other.svc_diag_4_code;
				svc_diag_4_desc = other.svc_diag_4_desc;
				svc_diag_5_code = other.svc_diag_5_code;
				svc_diag_5_desc = other.svc_diag_5_desc;
				svc_diag_6_code = other.svc_diag_6_code;
				svc_diag_6_desc = other.svc_diag_6_desc;
				svc_diag_7_code = other.svc_diag_7_code;
				svc_diag_7_desc = other.svc_diag_7_desc;
				svc_diag_8_code = other.svc_diag_8_code;
				svc_diag_8_desc = other.svc_diag_8_desc;
				svc_diag_9_code = other.svc_diag_9_code;
				svc_diag_9_desc = other.svc_diag_9_desc;
				svc_procedure_type = other.svc_procedure_type;
				svc_procedure_code = other.svc_procedure_code;
				svc_procedure_desc = other.svc_procedure_desc;
				svc_rev_code = other.svc_rev_code;
				svc_rev_desc = other.svc_rev_desc;
				svc_cpt_code = other.svc_cpt_code;
				svc_cpt_desc = other.svc_cpt_desc;
				svc_icd_proc_1_code = other.svc_icd_proc_1_code;
				svc_icd_proc_1_desc = other.svc_icd_proc_1_desc;
				svc_icd_proc_2_code = other.svc_icd_proc_2_code;
				svc_icd_proc_2_desc = other.svc_icd_proc_2_desc;
				svc_drg_type_code = other.svc_drg_type_code;
				svc_drg_type_Desc = other.svc_drg_type_Desc;
				svc_drg_code = other.svc_drg_code;
				svc_drg_desc = other.svc_drg_desc;
				svc_hcpcs_code = other.svc_hcpcs_code;
				svc_hcpcs_desc = other.svc_hcpcs_desc;
				svc_modifier_code = other.svc_modifier_code;
				svc_modifier_desc = other.svc_modifier_desc;
				svc_modifier_2_code = other.svc_modifier_2_code;
				svc_modifier_2_desc = other.svc_modifier_2_desc;
				svc_modifier_3_code = other.svc_modifier_3_code;
				svc_modifier_3_desc = other.svc_modifier_3_desc;
				svc_tos_code = other.svc_tos_code;
				svc_tos_desc = other.svc_tos_desc;
				svc_discharge_code = other.svc_discharge_code;
				svc_discharge_desc = other.svc_discharge_desc;
				svc_service_qty = other.svc_service_qty;
				svc_ip_days = other.svc_ip_days;
				svc_covered_days = other.svc_covered_days;
				svc_admit_type = other.svc_admit_type;
				svc_service_frm_date = other.svc_service_frm_date;
				svc_service_to_date = other.svc_service_to_date;
				rev_adjudication_date = other.rev_adjudication_date;
				rev_paid_date = other.rev_paid_date;
				svc_benefit_code = other.svc_benefit_code;
				svc_benefit_desc = other.svc_benefit_desc;
				rev_allowed_amt = other.rev_allowed_amt;
				rev_billed_amt = other.rev_billed_amt;
				rev_cob_paid_amt = other.rev_cob_paid_amt;
				rev_coinsurance_amt = other.rev_coinsurance_amt;
				rev_copay_amt = other.rev_copay_amt;
				rev_coverage_charge_amt = other.rev_coverage_charge_amt;
				rev_deductible_amt = other.rev_deductible_amt;
				rev_not_covered_amt = other.rev_not_covered_amt;
				rev_other_savings = other.rev_other_savings;
				rev_ppo_savings = other.rev_ppo_savings;
				rev_paid_amt = other.rev_paid_amt;
				rev_pay_type = other.rev_pay_type;
				rev_check_num = other.rev_check_num;
				svc_pre_authorization = other.svc_pre_authorization;
				rev_adjudication_code = other.rev_adjudication_code;
				rev_adjudication_desc = other.rev_adjudication_desc;
				mbr_mrn = other.mbr_mrn;
				mbr_hicn = other.mbr_hicn;
				rev_bill_type_code = other.rev_bill_type_code;
				rev_bill_type_desc = other.rev_bill_type_desc;
				udf1 = other.udf1;
				udf2 = other.udf2;
				udf3 = other.udf3;
				udf4 = other.udf4;
				udf5 = other.udf5;
				udf6 = other.udf6;
				udf7 = other.udf7;
				udf8 = other.udf8;
				udf9 = other.udf9;
				udf10 = other.udf10;
				udf11 = other.udf11;
				udf12 = other.udf12;
				udf13 = other.udf13;
				udf14 = other.udf14;
				udf15 = other.udf15;
				udf16 = other.udf16;
				udf17 = other.udf17;
				udf18 = other.udf18;
				udf19 = other.udf19;
				udf20 = other.udf20;
				dw_vendor_name = other.dw_vendor_name;
				dw_admrule = other.dw_admrule;
				proc1_grouper_id = other.proc1_grouper_id;
				proc1_grouper_desc = other.proc1_grouper_desc;
				proc1_Subgrouper_id = other.proc1_Subgrouper_id;
				proc1_Subgrouper_desc = other.proc1_Subgrouper_desc;
				rev_grouper_id = other.rev_grouper_id;
				rev_grouper_desc = other.rev_grouper_desc;
				rev_subgrouper_id = other.rev_subgrouper_id;
				rev_subgrouper_desc = other.rev_subgrouper_desc;
				cpt_grouper_id = other.cpt_grouper_id;
				cpt_grouper_desc = other.cpt_grouper_desc;
				cpt_subgrouper_id = other.cpt_subgrouper_id;
				cpt_subgrouper_desc = other.cpt_subgrouper_desc;
				icd1_grouper_id = other.icd1_grouper_id;
				icd1_grouper_desc = other.icd1_grouper_desc;
				icd1_subgrouper_id = other.icd1_subgrouper_id;
				icd1_subgrouper_desc = other.icd1_subgrouper_desc;
				icd2_grouper_id = other.icd2_grouper_id;
				icd2_grouper_desc = other.icd2_grouper_desc;
				icd2_subgrouper_id = other.icd2_subgrouper_id;
				icd2_subgrouper_desc = other.icd2_subgrouper_desc;
				drg_grouper_id = other.drg_grouper_id;
				drg_grouper_desc = other.drg_grouper_desc;
				drg_subgrouper_id = other.drg_subgrouper_id;
				drg_subgrouper_desc = other.drg_subgrouper_desc;
				hcpcs_grouper_id = other.hcpcs_grouper_id;
				hcpcs_grouper_desc = other.hcpcs_grouper_desc;
				hcpcs_subgrouper_id = other.hcpcs_subgrouper_id;
				hcpcs_subgrouper_desc = other.hcpcs_subgrouper_desc;
				diag1_grouper_id = other.diag1_grouper_id;
				diag1_grouper_desc = other.diag1_grouper_desc;
				diag1_supergrouper_id = other.diag1_supergrouper_id;
				diag1_supergrouper_desc = other.diag1_supergrouper_desc;
				diag2_grouper_id = other.diag2_grouper_id;
				diag2_grouper_desc = other.diag2_grouper_desc;
				diag2_supergrouper_id = other.diag2_supergrouper_id;
				diag2_supergrouper_desc = other.diag2_supergrouper_desc;
				diag3_grouper_id = other.diag3_grouper_id;
				diag3_grouper_desc = other.diag3_grouper_desc;
				diag3_supergrouper_id = other.diag3_supergrouper_id;
				diag3_supergrouper_desc = other.diag3_supergrouper_desc;
				diag4_grouper_id = other.diag4_grouper_id;
				diag4_grouper_desc = other.diag4_grouper_desc;
				diag4_supergrouper_id = other.diag4_supergrouper_id;
				diag4_supergrouper_desc = other.diag4_supergrouper_desc;
				diag5_grouper_id = other.diag5_grouper_id;
				diag5_grouper_desc = other.diag5_grouper_desc;
				diag5_supergrouper_id = other.diag5_supergrouper_id;
				diag5_supergrouper_desc = other.diag5_supergrouper_desc;
				diag6_grouper_id = other.diag6_grouper_id;
				diag6_grouper_desc = other.diag6_grouper_desc;
				diag6_supergrouper_id = other.diag6_supergrouper_id;
				diag6_supergrouper_desc = other.diag6_supergrouper_desc;
				diag7_grouper_id = other.diag7_grouper_id;
				diag7_grouper_desc = other.diag7_grouper_desc;
				diag7_supergrouper_id = other.diag7_supergrouper_id;
				diag7_supergrouper_desc = other.diag7_supergrouper_desc;
				diag8_grouper_id = other.diag8_grouper_id;
				diag8_grouper_desc = other.diag8_grouper_desc;
				diag8_supergrouper_id = other.diag8_supergrouper_id;
				diag8_supergrouper_desc = other.diag8_supergrouper_desc;
				diag9_grouper_id = other.diag9_grouper_id;
				diag9_grouper_desc = other.diag9_grouper_desc;
				diag9_supergrouper_id = other.diag9_supergrouper_id;
				diag9_supergrouper_desc = other.diag9_supergrouper_desc;
				cpt_betos = other.cpt_betos;
				cpt_betos_grouper = other.cpt_betos_grouper;
				cpt_betos_sub_grouper = other.cpt_betos_sub_grouper;
				hcpcs_betos = other.hcpcs_betos;
				hcpcs_betos_grouper = other.hcpcs_betos_grouper;
				hcpcs_betos_sub_grouper = other.hcpcs_betos_sub_grouper;
				rev_betos = other.rev_betos;
				rev_betos_grouper = other.rev_betos_grouper;
				rev_betos_sub_grouper = other.rev_betos_sub_grouper;
				icd1_betos = other.icd1_betos;
				icd1_betos_grouper = other.icd1_betos_grouper;
				icd1_betos_sub_grouper = other.icd1_betos_sub_grouper;
				icd2_betos = other.icd2_betos;
				icd2_betos_grouper = other.icd2_betos_grouper;
				icd2_betos_sub_grouper = other.icd2_betos_sub_grouper;
				drg_betos = other.drg_betos;
				drg_betos_grouper = other.drg_betos_grouper;
				drg_betos_sub_grouper = other.drg_betos_sub_grouper;
				proc7_betos = other.proc7_betos;
				proc7_betos_grouper = other.proc7_betos_grouper;
				proc7_betos_sub_grouper = other.proc7_betos_sub_grouper;
				dw_creation_date = other.dw_creation_date;
				dw_update_date = other.dw_update_date;
				dw_rawfilename = other.dw_rawfilename;
				dw_recievedmonth = other.dw_recievedmonth;
				visit_id = other.visit_id;
				dw_member_id = other.dw_member_id;
				is_makalu_used = other.is_makalu_used;
				udf21 = other.udf21;
				udf22 = other.udf22;
				udf23 = other.udf23;
				udf24 = other.udf24;
				udf25 = other.udf25;
				udf26 = other.udf26;
				udf27 = other.udf27;
				udf28 = other.udf28;
				udf29 = other.udf29;
				udf30 = other.udf30;
				udf31 = other.udf31;
				udf32 = other.udf32;
				udf33 = other.udf33;
				udf34 = other.udf34;
				udf35 = other.udf35;
				udf36 = other.udf36;
				udf37 = other.udf37;
				udf38 = other.udf38;
				udf39 = other.udf39;
				udf40 = other.udf40;
				MbrDobDateDimId = other.MbrDobDateDimId;
				SvcServiceFrmDateDateDimId = other.SvcServiceFrmDateDateDimId;
				SvcServiceToDateDateDimId = other.SvcServiceToDateDateDimId;
				RevAdjudicationDateDateDimId = other.RevAdjudicationDateDateDimId;
				RevPaidDateDateDimId = other.RevPaidDateDateDimId;
				DwCreationDateDateDimId = other.DwCreationDateDateDimId;
				DwUpdateDateDateDimId = other.DwUpdateDateDateDimId;
				DateDimensionsLinked = other.DateDimensionsLinked;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(rev_claim_id, nameof(rev_claim_id));
			Requires.Text(rev_claim_id, nameof(rev_claim_id), true, 0, 50);
			Requires.Text(rev_claim_line_id, nameof(rev_claim_line_id), true, 0, 25);
			Requires.Text(rev_claim_type, nameof(rev_claim_type), true, 0, 15);
			Requires.Text(ins_plan_type_code, nameof(ins_plan_type_code), true, 0, 20);
			Requires.Text(ins_plan_type_desc, nameof(ins_plan_type_desc), true, 0, 255);
			Requires.Text(ins_carrier_id, nameof(ins_carrier_id), true, 0, 20);
			Requires.Text(ins_carrier_name, nameof(ins_carrier_name), true, 0, 50);
			Requires.Text(ins_coverage_type_code, nameof(ins_coverage_type_code), true, 0, 10);
			Requires.Text(ins_coverage_type_desc, nameof(ins_coverage_type_desc), true, 0, 50);
			Requires.Text(ins_plan_id, nameof(ins_plan_id), true, 0, 20);
			Requires.Text(ins_emp_group_id, nameof(ins_emp_group_id), true, 0, 20);
			Requires.Text(ins_emp_group_name, nameof(ins_emp_group_name), true, 0, 50);
			Requires.Text(ins_division_id, nameof(ins_division_id), true, 0, 20);
			Requires.Text(ins_division_name, nameof(ins_division_name), true, 0, 100);
			Requires.Text(ins_cobra_code, nameof(ins_cobra_code), true, 0, 2);
			Requires.Text(ins_cobra_desc, nameof(ins_cobra_desc), true, 0, 30);
			Requires.NonNull(mbr_id, nameof(mbr_id));
			Requires.Text(mbr_id, nameof(mbr_id), true, 0, 50);
			Requires.Text(mbr_ssn, nameof(mbr_ssn), true, 0, 30);
			Requires.Text(mbr_first_name, nameof(mbr_first_name), true, 0, 30);
			Requires.Text(mbr_middle_name, nameof(mbr_middle_name), true, 0, 30);
			Requires.Text(mbr_last_name, nameof(mbr_last_name), true, 0, 30);
			Requires.NonNull(mbr_gender, nameof(mbr_gender));
			Requires.Text(mbr_gender, nameof(mbr_gender), true, 0, 2);
			Requires.Text(mbr_street_1, nameof(mbr_street_1), true, 0, 50);
			Requires.Text(mbr_street_2, nameof(mbr_street_2), true, 0, 50);
			Requires.Text(mbr_city, nameof(mbr_city), true, 0, 50);
			Requires.Text(mbr_county, nameof(mbr_county), true, 0, 20);
			Requires.Text(mbr_state, nameof(mbr_state), true, 0, 2);
			Requires.Text(mbr_zip, nameof(mbr_zip), true, 0, 10);
			Requires.Text(mbr_phone, nameof(mbr_phone), true, 0, 15);
			Requires.Text(mbr_region_code, nameof(mbr_region_code), true, 0, 32);
			Requires.Text(mbr_region_name, nameof(mbr_region_name), true, 0, 50);
			Requires.Text(mbr_relationship_code, nameof(mbr_relationship_code), true, 0, 10);
			Requires.Text(mbr_relationship_desc, nameof(mbr_relationship_desc), true, 0, 50);
			Requires.Text(prv_service_provider_id, nameof(prv_service_provider_id), true, 0, 30);
			Requires.Text(prv_npi, nameof(prv_npi), true, 0, 30);
			Requires.Text(prv_tin, nameof(prv_tin), true, 0, 30);
			Requires.Text(prv_type_desc, nameof(prv_type_desc), true, 0, 70);
			Requires.Text(prv_first_name, nameof(prv_first_name), true, 0, 100);
			Requires.Text(prv_middle_name, nameof(prv_middle_name), true, 0, 30);
			Requires.Text(prv_last_name, nameof(prv_last_name), true, 0, 40);
			Requires.Text(prv_gender, nameof(prv_gender), true, 0, 2);
			Requires.Text(prv_native_language, nameof(prv_native_language), true, 0, 30);
			Requires.Text(prv_network_code, nameof(prv_network_code), true, 0, 10);
			Requires.Text(prv_network_name, nameof(prv_network_name), true, 0, 50);
			Requires.Text(prv_phone, nameof(prv_phone), true, 0, 20);
			Requires.Text(prv_speciality_1_code, nameof(prv_speciality_1_code), true, 0, 10);
			Requires.Text(prv_Specialty_1_desc, nameof(prv_Specialty_1_desc), true, 0, 100);
			Requires.Text(prv_speciality_2_code, nameof(prv_speciality_2_code), true, 0, 10);
			Requires.Text(prv_Specialty_2_desc, nameof(prv_Specialty_2_desc), true, 0, 100);
			Requires.Text(prv_speciality_3_code, nameof(prv_speciality_3_code), true, 0, 10);
			Requires.Text(prv_Specialty_3_desc, nameof(prv_Specialty_3_desc), true, 0, 100);
			Requires.Text(prv_street_1, nameof(prv_street_1), true, 0, 128);
			Requires.Text(prv_street_2, nameof(prv_street_2), true, 0, 128);
			Requires.Text(prv_city, nameof(prv_city), true, 0, 32);
			Requires.Text(prv_county, nameof(prv_county), true, 0, 32);
			Requires.Text(prv_state, nameof(prv_state), true, 0, 2);
			Requires.Text(prv_zip, nameof(prv_zip), true, 0, 10);
			Requires.Text(prv_pcp_id, nameof(prv_pcp_id), true, 0, 30);
			Requires.Text(prv_pcp_first_name, nameof(prv_pcp_first_name), true, 0, 100);
			Requires.Text(prv_pcp_middle_name, nameof(prv_pcp_middle_name), true, 0, 30);
			Requires.Text(prv_pcp_last_name, nameof(prv_pcp_last_name), true, 0, 50);
			Requires.NonNull(svc_pos_code, nameof(svc_pos_code));
			Requires.Text(svc_pos_code, nameof(svc_pos_code), true, 0, 2);
			Requires.Text(svc_pos_desc, nameof(svc_pos_desc), true, 0, 50);
			Requires.NonNull(svc_diag_1_code, nameof(svc_diag_1_code));
			Requires.Text(svc_diag_1_code, nameof(svc_diag_1_code), true, 0, 8);
			Requires.Text(svc_diag_1_desc, nameof(svc_diag_1_desc), true, 0, 100);
			Requires.Text(svc_diag_2_code, nameof(svc_diag_2_code), true, 0, 30);
			Requires.Text(svc_diag_2_desc, nameof(svc_diag_2_desc), true, 0, 100);
			Requires.Text(svc_diag_3_code, nameof(svc_diag_3_code), true, 0, 30);
			Requires.Text(svc_diag_3_desc, nameof(svc_diag_3_desc), true, 0, 100);
			Requires.Text(svc_diag_4_code, nameof(svc_diag_4_code), true, 0, 30);
			Requires.Text(svc_diag_4_desc, nameof(svc_diag_4_desc), true, 0, 100);
			Requires.Text(svc_diag_5_code, nameof(svc_diag_5_code), true, 0, 30);
			Requires.Text(svc_diag_5_desc, nameof(svc_diag_5_desc), true, 0, 100);
			Requires.Text(svc_diag_6_code, nameof(svc_diag_6_code), true, 0, 30);
			Requires.Text(svc_diag_6_desc, nameof(svc_diag_6_desc), true, 0, 100);
			Requires.Text(svc_diag_7_code, nameof(svc_diag_7_code), true, 0, 30);
			Requires.Text(svc_diag_7_desc, nameof(svc_diag_7_desc), true, 0, 100);
			Requires.Text(svc_diag_8_code, nameof(svc_diag_8_code), true, 0, 30);
			Requires.Text(svc_diag_8_desc, nameof(svc_diag_8_desc), true, 0, 100);
			Requires.Text(svc_diag_9_code, nameof(svc_diag_9_code), true, 0, 30);
			Requires.Text(svc_diag_9_desc, nameof(svc_diag_9_desc), true, 0, 100);
			Requires.Text(svc_procedure_type, nameof(svc_procedure_type), true, 0, 10);
			Requires.NonNull(svc_procedure_code, nameof(svc_procedure_code));
			Requires.Text(svc_procedure_code, nameof(svc_procedure_code), true, 0, 10);
			Requires.Text(svc_procedure_desc, nameof(svc_procedure_desc), true, 0, 200);
			Requires.Text(svc_rev_code, nameof(svc_rev_code), true, 0, 5);
			Requires.Text(svc_rev_desc, nameof(svc_rev_desc), true, 0, 100);
			Requires.Text(svc_cpt_code, nameof(svc_cpt_code), true, 0, 5);
			Requires.Text(svc_cpt_desc, nameof(svc_cpt_desc), true, 0, 100);
			Requires.Text(svc_icd_proc_1_code, nameof(svc_icd_proc_1_code), true, 0, 10);
			Requires.Text(svc_icd_proc_1_desc, nameof(svc_icd_proc_1_desc), true, 0, 100);
			Requires.Text(svc_icd_proc_2_code, nameof(svc_icd_proc_2_code), true, 0, 5);
			Requires.Text(svc_icd_proc_2_desc, nameof(svc_icd_proc_2_desc), true, 0, 100);
			Requires.Text(svc_drg_type_code, nameof(svc_drg_type_code), true, 0, 10);
			Requires.Text(svc_drg_type_Desc, nameof(svc_drg_type_Desc), true, 0, 100);
			Requires.Text(svc_drg_code, nameof(svc_drg_code), true, 0, 7);
			Requires.Text(svc_drg_desc, nameof(svc_drg_desc), true, 0, 100);
			Requires.Text(svc_hcpcs_code, nameof(svc_hcpcs_code), true, 0, 5);
			Requires.Text(svc_hcpcs_desc, nameof(svc_hcpcs_desc), true, 0, 100);
			Requires.Text(svc_modifier_code, nameof(svc_modifier_code), true, 0, 8);
			Requires.Text(svc_modifier_desc, nameof(svc_modifier_desc), true, 0, 100);
			Requires.Text(svc_modifier_2_code, nameof(svc_modifier_2_code), true, 0, 8);
			Requires.Text(svc_modifier_2_desc, nameof(svc_modifier_2_desc), true, 0, 100);
			Requires.Text(svc_modifier_3_code, nameof(svc_modifier_3_code), true, 0, 8);
			Requires.Text(svc_modifier_3_desc, nameof(svc_modifier_3_desc), true, 0, 100);
			Requires.Text(svc_tos_code, nameof(svc_tos_code), true, 0, 5);
			Requires.Text(svc_tos_desc, nameof(svc_tos_desc), true, 0, 100);
			Requires.Text(svc_discharge_code, nameof(svc_discharge_code), true, 0, 20);
			Requires.Text(svc_discharge_desc, nameof(svc_discharge_desc), true, 0, 100);
			Requires.Text(svc_admit_type, nameof(svc_admit_type), true, 0, 6);
			Requires.Text(svc_benefit_code, nameof(svc_benefit_code), true, 0, 10);
			Requires.Text(svc_benefit_desc, nameof(svc_benefit_desc), true, 0, 100);
			Requires.Text(rev_pay_type, nameof(rev_pay_type), true, 0, 4);
			Requires.Text(rev_check_num, nameof(rev_check_num), true, 0, 20);
			Requires.Text(svc_pre_authorization, nameof(svc_pre_authorization), true, 0, 50);
			Requires.Text(rev_adjudication_code, nameof(rev_adjudication_code), true, 0, 8);
			Requires.Text(rev_adjudication_desc, nameof(rev_adjudication_desc), true, 0, 50);
			Requires.Text(mbr_mrn, nameof(mbr_mrn), true, 0, 30);
			Requires.Text(mbr_hicn, nameof(mbr_hicn), true, 0, 11);
			Requires.Text(rev_bill_type_code, nameof(rev_bill_type_code), true, 0, 3);
			Requires.Text(rev_bill_type_desc, nameof(rev_bill_type_desc), true, 0, 100);
			Requires.Text(udf1, nameof(udf1), true, 0, 100);
			Requires.Text(udf2, nameof(udf2), true, 0, 100);
			Requires.Text(udf3, nameof(udf3), true, 0, 100);
			Requires.Text(udf4, nameof(udf4), true, 0, 100);
			Requires.Text(udf5, nameof(udf5), true, 0, 100);
			Requires.Text(udf6, nameof(udf6), true, 0, 100);
			Requires.Text(udf7, nameof(udf7), true, 0, 100);
			Requires.Text(udf8, nameof(udf8), true, 0, 100);
			Requires.Text(udf9, nameof(udf9), true, 0, 100);
			Requires.Text(udf10, nameof(udf10), true, 0, 100);
			Requires.Text(udf11, nameof(udf11), true, 0, 100);
			Requires.Text(udf12, nameof(udf12), true, 0, 100);
			Requires.Text(udf13, nameof(udf13), true, 0, 100);
			Requires.Text(udf14, nameof(udf14), true, 0, 100);
			Requires.Text(udf15, nameof(udf15), true, 0, 100);
			Requires.Text(udf16, nameof(udf16), true, 0, 100);
			Requires.Text(udf17, nameof(udf17), true, 0, 100);
			Requires.Text(udf18, nameof(udf18), true, 0, 100);
			Requires.Text(udf19, nameof(udf19), true, 0, 100);
			Requires.Text(udf20, nameof(udf20), true, 0, 100);
			Requires.Text(dw_vendor_name, nameof(dw_vendor_name), true, 0, 20);
			Requires.Text(dw_admrule, nameof(dw_admrule), true, 0, 6);
			Requires.Text(proc1_grouper_id, nameof(proc1_grouper_id), true, 0, 100);
			Requires.Text(proc1_grouper_desc, nameof(proc1_grouper_desc), true, 0, 100);
			Requires.Text(proc1_Subgrouper_id, nameof(proc1_Subgrouper_id), true, 0, 100);
			Requires.Text(proc1_Subgrouper_desc, nameof(proc1_Subgrouper_desc), true, 0, 100);
			Requires.Text(rev_grouper_id, nameof(rev_grouper_id), true, 0, 100);
			Requires.Text(rev_grouper_desc, nameof(rev_grouper_desc), true, 0, 100);
			Requires.Text(rev_subgrouper_id, nameof(rev_subgrouper_id), true, 0, 100);
			Requires.Text(rev_subgrouper_desc, nameof(rev_subgrouper_desc), true, 0, 100);
			Requires.Text(cpt_grouper_id, nameof(cpt_grouper_id), true, 0, 100);
			Requires.Text(cpt_grouper_desc, nameof(cpt_grouper_desc), true, 0, 100);
			Requires.Text(cpt_subgrouper_id, nameof(cpt_subgrouper_id), true, 0, 100);
			Requires.Text(cpt_subgrouper_desc, nameof(cpt_subgrouper_desc), true, 0, 100);
			Requires.Text(icd1_grouper_id, nameof(icd1_grouper_id), true, 0, 100);
			Requires.Text(icd1_grouper_desc, nameof(icd1_grouper_desc), true, 0, 100);
			Requires.Text(icd1_subgrouper_id, nameof(icd1_subgrouper_id), true, 0, 100);
			Requires.Text(icd1_subgrouper_desc, nameof(icd1_subgrouper_desc), true, 0, 100);
			Requires.Text(icd2_grouper_id, nameof(icd2_grouper_id), true, 0, 100);
			Requires.Text(icd2_grouper_desc, nameof(icd2_grouper_desc), true, 0, 100);
			Requires.Text(icd2_subgrouper_id, nameof(icd2_subgrouper_id), true, 0, 100);
			Requires.Text(icd2_subgrouper_desc, nameof(icd2_subgrouper_desc), true, 0, 100);
			Requires.Text(drg_grouper_id, nameof(drg_grouper_id), true, 0, 100);
			Requires.Text(drg_grouper_desc, nameof(drg_grouper_desc), true, 0, 100);
			Requires.Text(drg_subgrouper_id, nameof(drg_subgrouper_id), true, 0, 100);
			Requires.Text(drg_subgrouper_desc, nameof(drg_subgrouper_desc), true, 0, 100);
			Requires.Text(hcpcs_grouper_id, nameof(hcpcs_grouper_id), true, 0, 100);
			Requires.Text(hcpcs_grouper_desc, nameof(hcpcs_grouper_desc), true, 0, 100);
			Requires.Text(hcpcs_subgrouper_id, nameof(hcpcs_subgrouper_id), true, 0, 100);
			Requires.Text(hcpcs_subgrouper_desc, nameof(hcpcs_subgrouper_desc), true, 0, 100);
			Requires.Text(diag1_grouper_id, nameof(diag1_grouper_id), true, 0, 100);
			Requires.Text(diag1_grouper_desc, nameof(diag1_grouper_desc), true, 0, 100);
			Requires.Text(diag1_supergrouper_id, nameof(diag1_supergrouper_id), true, 0, 100);
			Requires.Text(diag1_supergrouper_desc, nameof(diag1_supergrouper_desc), true, 0, 100);
			Requires.Text(diag2_grouper_id, nameof(diag2_grouper_id), true, 0, 100);
			Requires.Text(diag2_grouper_desc, nameof(diag2_grouper_desc), true, 0, 100);
			Requires.Text(diag2_supergrouper_id, nameof(diag2_supergrouper_id), true, 0, 100);
			Requires.Text(diag2_supergrouper_desc, nameof(diag2_supergrouper_desc), true, 0, 100);
			Requires.Text(diag3_grouper_id, nameof(diag3_grouper_id), true, 0, 100);
			Requires.Text(diag3_grouper_desc, nameof(diag3_grouper_desc), true, 0, 100);
			Requires.Text(diag3_supergrouper_id, nameof(diag3_supergrouper_id), true, 0, 100);
			Requires.Text(diag3_supergrouper_desc, nameof(diag3_supergrouper_desc), true, 0, 100);
			Requires.Text(diag4_grouper_id, nameof(diag4_grouper_id), true, 0, 100);
			Requires.Text(diag4_grouper_desc, nameof(diag4_grouper_desc), true, 0, 100);
			Requires.Text(diag4_supergrouper_id, nameof(diag4_supergrouper_id), true, 0, 100);
			Requires.Text(diag4_supergrouper_desc, nameof(diag4_supergrouper_desc), true, 0, 100);
			Requires.Text(diag5_grouper_id, nameof(diag5_grouper_id), true, 0, 100);
			Requires.Text(diag5_grouper_desc, nameof(diag5_grouper_desc), true, 0, 100);
			Requires.Text(diag5_supergrouper_id, nameof(diag5_supergrouper_id), true, 0, 100);
			Requires.Text(diag5_supergrouper_desc, nameof(diag5_supergrouper_desc), true, 0, 100);
			Requires.Text(diag6_grouper_id, nameof(diag6_grouper_id), true, 0, 100);
			Requires.Text(diag6_grouper_desc, nameof(diag6_grouper_desc), true, 0, 100);
			Requires.Text(diag6_supergrouper_id, nameof(diag6_supergrouper_id), true, 0, 100);
			Requires.Text(diag6_supergrouper_desc, nameof(diag6_supergrouper_desc), true, 0, 100);
			Requires.Text(diag7_grouper_id, nameof(diag7_grouper_id), true, 0, 100);
			Requires.Text(diag7_grouper_desc, nameof(diag7_grouper_desc), true, 0, 100);
			Requires.Text(diag7_supergrouper_id, nameof(diag7_supergrouper_id), true, 0, 100);
			Requires.Text(diag7_supergrouper_desc, nameof(diag7_supergrouper_desc), true, 0, 100);
			Requires.Text(diag8_grouper_id, nameof(diag8_grouper_id), true, 0, 100);
			Requires.Text(diag8_grouper_desc, nameof(diag8_grouper_desc), true, 0, 100);
			Requires.Text(diag8_supergrouper_id, nameof(diag8_supergrouper_id), true, 0, 100);
			Requires.Text(diag8_supergrouper_desc, nameof(diag8_supergrouper_desc), true, 0, 100);
			Requires.Text(diag9_grouper_id, nameof(diag9_grouper_id), true, 0, 100);
			Requires.Text(diag9_grouper_desc, nameof(diag9_grouper_desc), true, 0, 100);
			Requires.Text(diag9_supergrouper_id, nameof(diag9_supergrouper_id), true, 0, 100);
			Requires.Text(diag9_supergrouper_desc, nameof(diag9_supergrouper_desc), true, 0, 100);
			Requires.Text(cpt_betos, nameof(cpt_betos), true, 0, 20);
			Requires.Text(cpt_betos_grouper, nameof(cpt_betos_grouper), true, 0, 100);
			Requires.Text(cpt_betos_sub_grouper, nameof(cpt_betos_sub_grouper), true, 0, 100);
			Requires.Text(hcpcs_betos, nameof(hcpcs_betos), true, 0, 100);
			Requires.Text(hcpcs_betos_grouper, nameof(hcpcs_betos_grouper), true, 0, 100);
			Requires.Text(hcpcs_betos_sub_grouper, nameof(hcpcs_betos_sub_grouper), true, 0, 100);
			Requires.Text(rev_betos, nameof(rev_betos), true, 0, 100);
			Requires.Text(rev_betos_grouper, nameof(rev_betos_grouper), true, 0, 100);
			Requires.Text(rev_betos_sub_grouper, nameof(rev_betos_sub_grouper), true, 0, 100);
			Requires.Text(icd1_betos, nameof(icd1_betos), true, 0, 100);
			Requires.Text(icd1_betos_grouper, nameof(icd1_betos_grouper), true, 0, 100);
			Requires.Text(icd1_betos_sub_grouper, nameof(icd1_betos_sub_grouper), true, 0, 100);
			Requires.Text(icd2_betos, nameof(icd2_betos), true, 0, 100);
			Requires.Text(icd2_betos_grouper, nameof(icd2_betos_grouper), true, 0, 100);
			Requires.Text(icd2_betos_sub_grouper, nameof(icd2_betos_sub_grouper), true, 0, 100);
			Requires.Text(drg_betos, nameof(drg_betos), true, 0, 100);
			Requires.Text(drg_betos_grouper, nameof(drg_betos_grouper), true, 0, 100);
			Requires.Text(drg_betos_sub_grouper, nameof(drg_betos_sub_grouper), true, 0, 100);
			Requires.Text(proc7_betos, nameof(proc7_betos), true, 0, 100);
			Requires.Text(proc7_betos_grouper, nameof(proc7_betos_grouper), true, 0, 100);
			Requires.Text(proc7_betos_sub_grouper, nameof(proc7_betos_sub_grouper), true, 0, 100);
			Requires.Text(dw_rawfilename, nameof(dw_rawfilename), true, 0, 255);
			Requires.Text(dw_recievedmonth, nameof(dw_recievedmonth), true, 0, 10);
			Requires.Text(dw_member_id, nameof(dw_member_id), true, 0, 50);
			Requires.Text(is_makalu_used, nameof(is_makalu_used), true, 0, 20);
			Requires.Text(udf21, nameof(udf21), true, 0, 100);
			Requires.Text(udf22, nameof(udf22), true, 0, 100);
			Requires.Text(udf23, nameof(udf23), true, 0, 100);
			Requires.Text(udf24, nameof(udf24), true, 0, 100);
			Requires.Text(udf25, nameof(udf25), true, 0, 100);
			Requires.Text(udf26, nameof(udf26), true, 0, 100);
			Requires.Text(udf27, nameof(udf27), true, 0, 100);
			Requires.Text(udf28, nameof(udf28), true, 0, 100);
			Requires.Text(udf29, nameof(udf29), true, 0, 100);
			Requires.Text(udf30, nameof(udf30), true, 0, 100);
			Requires.Text(udf31, nameof(udf31), true, 0, 100);
			Requires.Text(udf32, nameof(udf32), true, 0, 100);
			Requires.Text(udf33, nameof(udf33), true, 0, 100);
			Requires.Text(udf34, nameof(udf34), true, 0, 100);
			Requires.Text(udf35, nameof(udf35), true, 0, 100);
			Requires.Text(udf36, nameof(udf36), true, 0, 100);
			Requires.Text(udf37, nameof(udf37), true, 0, 100);
			Requires.Text(udf38, nameof(udf38), true, 0, 100);
			Requires.Text(udf39, nameof(udf39), true, 0, 100);
			Requires.Text(udf40, nameof(udf40), true, 0, 100);
			PartialValidate();
        }
	}

	/// <summary>
	/// Beneficiary Provider --- Switching of a member from one provider to next and the next in different point of time. Also need to apply patient attribution logic.
	/// </summary>
	[Table("MemberPCP", Schema = "deerwalk")]
	public partial class MemberPCP : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted, IDontCreate
	{
        public static readonly MemberPCP[] None = new MemberPCP[0];

		[DisplayName("Member Pcp Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("MemberPcpId")]
		public long MemberPcpId { get; set; }

		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Contact Id")]
		[Column("ContactId")]
		public long? ContactId { get; set; }

		[ForeignKey("ContactId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Contact Contact { get; set; }

		/// <summary>
		/// Auto-increment number-a unique identifier for Makalu engine
		/// </summary>
		[Description("Auto-increment number-a unique identifier for Makalu engine")]
		[DisplayName("Member PCP RID")]
		[SampleData("1")]
		[Column("dw_record_id")]
		public int? dw_record_id { get; set; }

		/// <summary>
		/// Account id
		/// </summary>
		[Description("Account id")]
		[DisplayName("Account id")]
		[SampleData("1027")]
		[MaxLength(50)]
		[Column("dw_account_id")]
		public string dw_account_id { get; set; }

		/// <summary>
		/// Clientid
		/// </summary>
		[Description("Clientid")]
		[DisplayName("Client ID")]
		[SampleData("1")]
		[MaxLength(10)]
		[Column("dw_client_id")]
		public string dw_client_id { get; set; }

		/// <summary>
		/// Member ID
		/// </summary>
		[Description("Member ID")]
		[DisplayName("Member ID")]
		[SampleData("Hash Encrypted")]
		[MaxLength(50)]
		[Column("dw_member_id")]
		public string dw_member_id { get; set; }

		/// <summary>
		/// Member ID to display on the application, as sent by client
		/// </summary>
		[Description("Member ID to display on the application, as sent by client")]
		[DisplayName("Member ID")]
		[SampleData("9916897")]
		[NotNull]
		[Required]
		[MaxLength(50)]
		[Column("mbr_id")]
		public string mbr_id { get; set; }

		[DisplayName("PCP Name")]
		[MaxLength(100)]
		[Column("pcp_name")]
		public string pcp_name { get; set; }

		/// <summary>
		/// May be null
		/// </summary>
		[Description("May be null")]
		[DisplayName("May be")]
		[MaxLength(100)]
		[Column("pcp_npi")]
		public string pcp_npi { get; set; }

		/// <summary>
		/// May be null
		/// </summary>
		[Description("May be null")]
		[DisplayName("May be")]
		[Column("start_date")]
		public DateTime? start_date { get; set; }

		/// <summary>
		/// May be null
		/// </summary>
		[Description("May be null")]
		[DisplayName("May be")]
		[Column("end_date")]
		public DateTime? end_date { get; set; }

		[DisplayName("Start Date Date Dim Id")]
		[Column("StartDateDateDimId")]
		public int? StartDateDateDimId { get; set; }

		[ForeignKey("StartDateDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension StartDateDateDim { get; set; }

		[DisplayName("End Date Date Dim Id")]
		[Column("EndDateDateDimId")]
		public int? EndDateDateDimId { get; set; }

		[ForeignKey("EndDateDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension EndDateDateDim { get; set; }

		[DisplayName("Date Dimensions Linked")]
		[Column("DateDimensionsLinked")]
		public bool DateDimensionsLinked { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} MemberPcpId={MemberPcpId} {extras}";
		}

		partial void OnConstructed();
	
		public MemberPCP()
			: this(null)
		{}

		public MemberPCP(MemberPCP other)
		{
			if (other!=null)
			{
				TenantId = other.TenantId;
				ContactId = other.ContactId;
				dw_record_id = other.dw_record_id;
				dw_account_id = other.dw_account_id;
				dw_client_id = other.dw_client_id;
				dw_member_id = other.dw_member_id;
				mbr_id = other.mbr_id;
				pcp_name = other.pcp_name;
				pcp_npi = other.pcp_npi;
				start_date = other.start_date;
				end_date = other.end_date;
				StartDateDateDimId = other.StartDateDateDimId;
				EndDateDateDimId = other.EndDateDateDimId;
				DateDimensionsLinked = other.DateDimensionsLinked;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.Text(dw_account_id, nameof(dw_account_id), true, 0, 50);
			Requires.Text(dw_client_id, nameof(dw_client_id), true, 0, 10);
			Requires.Text(dw_member_id, nameof(dw_member_id), true, 0, 50);
			Requires.NonNull(mbr_id, nameof(mbr_id));
			Requires.Text(mbr_id, nameof(mbr_id), true, 0, 50);
			Requires.Text(pcp_name, nameof(pcp_name), true, 0, 100);
			Requires.Text(pcp_npi, nameof(pcp_npi), true, 0, 100);
			PartialValidate();
        }
	}

	[Table("Participation", Schema = "deerwalk")]
	public partial class Participation : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted, IDontCreate
	{
        public static readonly Participation[] None = new Participation[0];

		[DisplayName("Participation Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("ParticipationId")]
		public long ParticipationId { get; set; }

		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Contact Id")]
		[Column("ContactId")]
		public long? ContactId { get; set; }

		[ForeignKey("ContactId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Contact Contact { get; set; }

		/// <summary>
		/// Auto-increment number-a unique identifier for Makalu engine
		/// </summary>
		[Description("Auto-increment number-a unique identifier for Makalu engine")]
		[DisplayName("Participation RID")]
		[SampleData("1")]
		[Column("dw_record_id")]
		public int? dw_record_id { get; set; }

		/// <summary>
		/// Account id
		/// </summary>
		[Description("Account id")]
		[DisplayName("Account id")]
		[SampleData("1027")]
		[MaxLength(50)]
		[Column("dw_account_id")]
		public string dw_account_id { get; set; }

		/// <summary>
		/// Clientid
		/// </summary>
		[Description("Clientid")]
		[DisplayName("Client ID")]
		[SampleData("1")]
		[MaxLength(50)]
		[Column("dw_client_id")]
		public string dw_client_id { get; set; }

		/// <summary>
		/// Member ID
		/// </summary>
		[Description("Member ID")]
		[DisplayName("Member ID")]
		[SampleData("Hash Encrypted")]
		[MaxLength(50)]
		[Column("dw_member_id")]
		public string dw_member_id { get; set; }

		/// <summary>
		/// Member ID to display on the application, as sent by client
		/// </summary>
		[Description("Member ID to display on the application, as sent by client")]
		[DisplayName("Member ID")]
		[SampleData("9916897")]
		[NotNull]
		[Required]
		[MaxLength(50)]
		[Column("mbr_id")]
		public string mbr_id { get; set; }

		/// <summary>
		/// Type of Program for participation
		/// </summary>
		[Description("Type of Program for participation")]
		[DisplayName("Type of")]
		[SampleData("Disease Management, Wellness ")]
		[MaxLength(50)]
		[Column("program_type")]
		public string program_type { get; set; }

		/// <summary>
		/// Code to identify program
		/// </summary>
		[Description("Code to identify program")]
		[DisplayName("Code to")]
		[SampleData("C , A, PC")]
		[NotNull]
		[Required]
		[MaxLength(20)]
		[Column("program_code")]
		public string program_code { get; set; }

		/// <summary>
		/// Name of the program
		/// </summary>
		[Description("Name of the program")]
		[DisplayName("Name of")]
		[SampleData("CAD, ASTHMA, Preventive Care")]
		[MaxLength(50)]
		[Column("program_name")]
		public string program_name { get; set; }

		/// <summary>
		/// Current status of the program
		/// </summary>
		[Description("Current status of the program")]
		[DisplayName("Current status")]
		[SampleData("Open, Ongoing, Closed")]
		[MaxLength(20)]
		[Column("program_status")]
		public string program_status { get; set; }

		/// <summary>
		/// Program start date
		/// </summary>
		[Description("Program start date")]
		[DisplayName("Program start")]
		[Column("program_start_date")]
		public DateTime? program_start_date { get; set; }

		/// <summary>
		/// Program end  date
		/// </summary>
		[Description("Program end  date")]
		[DisplayName("Program end")]
		[Column("program_end_date")]
		public DateTime? program_end_date { get; set; }

		[DisplayName("Program Start Date Date Dim Id")]
		[Column("ProgramStartDateDateDimId")]
		public int? ProgramStartDateDateDimId { get; set; }

		[ForeignKey("ProgramStartDateDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension ProgramStartDateDateDim { get; set; }

		[DisplayName("Program End Date Date Dim Id")]
		[Column("ProgramEndDateDateDimId")]
		public int? ProgramEndDateDateDimId { get; set; }

		[ForeignKey("ProgramEndDateDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension ProgramEndDateDateDim { get; set; }

		[DisplayName("Date Dimensions Linked")]
		[Column("DateDimensionsLinked")]
		public bool DateDimensionsLinked { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} ParticipationId={ParticipationId} {extras}";
		}

		partial void OnConstructed();
	
		public Participation()
			: this(null)
		{}

		public Participation(Participation other)
		{
			if (other!=null)
			{
				TenantId = other.TenantId;
				ContactId = other.ContactId;
				dw_record_id = other.dw_record_id;
				dw_account_id = other.dw_account_id;
				dw_client_id = other.dw_client_id;
				dw_member_id = other.dw_member_id;
				mbr_id = other.mbr_id;
				program_type = other.program_type;
				program_code = other.program_code;
				program_name = other.program_name;
				program_status = other.program_status;
				program_start_date = other.program_start_date;
				program_end_date = other.program_end_date;
				ProgramStartDateDateDimId = other.ProgramStartDateDateDimId;
				ProgramEndDateDateDimId = other.ProgramEndDateDateDimId;
				DateDimensionsLinked = other.DateDimensionsLinked;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.Text(dw_account_id, nameof(dw_account_id), true, 0, 50);
			Requires.Text(dw_client_id, nameof(dw_client_id), true, 0, 50);
			Requires.Text(dw_member_id, nameof(dw_member_id), true, 0, 50);
			Requires.NonNull(mbr_id, nameof(mbr_id));
			Requires.Text(mbr_id, nameof(mbr_id), true, 0, 50);
			Requires.Text(program_type, nameof(program_type), true, 0, 50);
			Requires.NonNull(program_code, nameof(program_code));
			Requires.Text(program_code, nameof(program_code), true, 0, 20);
			Requires.Text(program_name, nameof(program_name), true, 0, 50);
			Requires.Text(program_status, nameof(program_status), true, 0, 20);
			PartialValidate();
        }
	}

	[Table("Pharmacy", Schema = "deerwalk")]
	public partial class Pharmacy : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted, IDontCreate
	{
        public static readonly Pharmacy[] None = new Pharmacy[0];

		[DisplayName("Pharmacy Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("PharmacyId")]
		public long PharmacyId { get; set; }

		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Contact Id")]
		[Column("ContactId")]
		public long? ContactId { get; set; }

		[ForeignKey("ContactId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Contact Contact { get; set; }

		/// <summary>
		/// Number generated by claim syst1)em
		/// </summary>
		[Description("Number generated by claim syst1)em")]
		[DisplayName("Number generated")]
		[SampleData("90272068301")]
		[NotNull]
		[Required]
		[MaxLength(80)]
		[Column("rev_transaction_num")]
		public string rev_transaction_num { get; set; }

		/// <summary>
		/// Plan type code
		/// </summary>
		[Description("Plan type code")]
		[DisplayName("Plan Type Code")]
		[SampleData("Commercial")]
		[MaxLength(20)]
		[Column("ins_plan_type_code")]
		public string ins_plan_type_code { get; set; }

		/// <summary>
		/// Plan type desciption
		/// </summary>
		[Description("Plan type desciption")]
		[DisplayName("Plan Type")]
		[MaxLength(255)]
		[Column("ins_plan_type_desc")]
		public string ins_plan_type_desc { get; set; }

		/// <summary>
		/// Member identification number
		/// </summary>
		[Description("Member identification number")]
		[DisplayName("Member ID")]
		[SampleData("345677")]
		[NotNull]
		[Required]
		[MaxLength(50)]
		[Column("mbr_id")]
		public string mbr_id { get; set; }

		/// <summary>
		/// Member first name
		/// </summary>
		[Description("Member first name")]
		[DisplayName("First Name")]
		[SampleData("BEVERLY")]
		[MaxLength(30)]
		[Column("mbr_first_name")]
		public string mbr_first_name { get; set; }

		/// <summary>
		/// Member middle name
		/// </summary>
		[Description("Member middle name")]
		[DisplayName("Middle Name")]
		[SampleData("George")]
		[MaxLength(30)]
		[Column("mbr_middle_name")]
		public string mbr_middle_name { get; set; }

		/// <summary>
		/// Member last name
		/// </summary>
		[Description("Member last name")]
		[DisplayName("Last Name")]
		[SampleData("BARRETT")]
		[MaxLength(30)]
		[Column("mbr_last_name")]
		public string mbr_last_name { get; set; }

		/// <summary>
		/// Member gender
		/// </summary>
		[Description("Member gender")]
		[DisplayName("Gender")]
		[SampleData("M")]
		[NotNull]
		[Required]
		[MaxLength(2)]
		[Column("mbr_gender")]
		public string mbr_gender { get; set; }

		/// <summary>
		/// Member date of Birth
		/// </summary>
		[Description("Member date of Birth")]
		[DisplayName("DOB")]
		[SampleData("31597")]
		[Column("mbr_dob")]
		public DateTime mbr_dob { get; set; }

		/// <summary>
		/// Member City
		/// </summary>
		[Description("Member City")]
		[DisplayName("City")]
		[SampleData("Lakeworth")]
		[MaxLength(20)]
		[Column("mbr_city")]
		public string mbr_city { get; set; }

		/// <summary>
		/// Member County
		/// </summary>
		[Description("Member County")]
		[DisplayName("County")]
		[SampleData("Lexington")]
		[MaxLength(20)]
		[Column("mbr_county")]
		public string mbr_county { get; set; }

		/// <summary>
		/// Zip code
		/// </summary>
		[Description("Zip code")]
		[DisplayName("Zip")]
		[SampleData("34746")]
		[MaxLength(10)]
		[Column("mbr_zip")]
		public string mbr_zip { get; set; }

		/// <summary>
		/// Relationship Code to the Subscriber; subscriber(01), spouse (02),child (03), other (04)
		/// </summary>
		[Description("Relationship Code to the Subscriber; subscriber(01), spouse (02),child (03), other (04)")]
		[DisplayName("Relationship Code")]
		[MaxLength(5)]
		[Column("mbr_relationship_code")]
		public string mbr_relationship_code { get; set; }

		/// <summary>
		/// Relationship Description to the Subscriber, Dependent, Spouse
		/// </summary>
		[Description("Relationship Description to the Subscriber, Dependent, Spouse")]
		[DisplayName("Relationship")]
		[SampleData("Dependent")]
		[MaxLength(50)]
		[Column("mbr_relationship_desc")]
		public string mbr_relationship_desc { get; set; }

		/// <summary>
		/// PBM
		/// </summary>
		[Description("PBM")]
		[DisplayName("Carrier ID")]
		[MaxLength(20)]
		[Column("ins_carrier_id")]
		public string ins_carrier_id { get; set; }

		/// <summary>
		/// PBM name
		/// </summary>
		[Description("PBM name")]
		[DisplayName("Carrier")]
		[SampleData("Walgreens")]
		[MaxLength(50)]
		[Column("ins_carrier_name")]
		public string ins_carrier_name { get; set; }

		/// <summary>
		/// Coverage type
		/// </summary>
		[Description("Coverage type")]
		[DisplayName("Coverage Type Code")]
		[SampleData("1")]
		[MaxLength(20)]
		[Column("ins_coverage_type_code")]
		public string ins_coverage_type_code { get; set; }

		/// <summary>
		/// Coverage type name; infer from code
		/// </summary>
		[Description("Coverage type name; infer from code")]
		[DisplayName("Coverage Type")]
		[SampleData("Family")]
		[MaxLength(50)]
		[Column("ins_coverage_type_desc")]
		public string ins_coverage_type_desc { get; set; }

		/// <summary>
		/// Identification of the group the subscriber is employed with
		/// </summary>
		[Description("Identification of the group the subscriber is employed with")]
		[DisplayName("Employer Group ID")]
		[SampleData("3198508")]
		[MaxLength(20)]
		[Column("ins_emp_group_id")]
		public string ins_emp_group_id { get; set; }

		/// <summary>
		/// Name of the group the subscriber is employed with
		/// </summary>
		[Description("Name of the group the subscriber is employed with")]
		[DisplayName("Employer Group")]
		[SampleData("Deerwalk")]
		[MaxLength(100)]
		[Column("ins_emp_group_name")]
		public string ins_emp_group_name { get; set; }

		/// <summary>
		/// Identification of the division the subscriber is employed with
		/// </summary>
		[Description("Identification of the division the subscriber is employed with")]
		[DisplayName("Insurance Division ID")]
		[MaxLength(20)]
		[Column("ins_division_id")]
		public string ins_division_id { get; set; }

		/// <summary>
		/// Name of the group the division  subscriber is employed with
		/// </summary>
		[Description("Name of the group the division  subscriber is employed with")]
		[DisplayName("Insurance Division")]
		[MaxLength(100)]
		[Column("ins_division_name")]
		public string ins_division_name { get; set; }

		/// <summary>
		/// Status Code of Employee - Not Specified : 00, Working : 01, Terminated : 02
		/// </summary>
		[Description("Status Code of Employee - Not Specified : 00, Working : 01, Terminated : 02")]
		[DisplayName("Cobra Status Code")]
		[SampleData("1")]
		[MaxLength(2)]
		[Column("ins_cobra_code")]
		public string ins_cobra_code { get; set; }

		/// <summary>
		/// Status of the Employee - Working, Terminated, etc
		/// </summary>
		[Description("Status of the Employee - Working, Terminated, etc")]
		[DisplayName("Cobra Status")]
		[SampleData("Working")]
		[MaxLength(30)]
		[Column("ins_cobra_desc")]
		public string ins_cobra_desc { get; set; }

		/// <summary>
		/// Member prescriber
		/// </summary>
		[Description("Member prescriber")]
		[DisplayName("Prescriber ID")]
		[SampleData("381882404-014")]
		[MaxLength(20)]
		[Column("prv_prescriber_id")]
		public string prv_prescriber_id { get; set; }

		/// <summary>
		/// Prescriber First Name
		/// </summary>
		[Description("Prescriber First Name")]
		[DisplayName("Prescriber First Name")]
		[SampleData("Sanket")]
		[MaxLength(70)]
		[Column("prv_prescriber_first_name")]
		public string prv_prescriber_first_name { get; set; }

		/// <summary>
		/// Prescriber Middle Name
		/// </summary>
		[Description("Prescriber Middle Name")]
		[DisplayName("Prescriber Middle Name")]
		[SampleData("Lal")]
		[MaxLength(30)]
		[Column("prv_prescriber_middle_name")]
		public string prv_prescriber_middle_name { get; set; }

		/// <summary>
		/// Prescriber Last Name
		/// </summary>
		[Description("Prescriber Last Name")]
		[DisplayName("Prescriber Last Name")]
		[SampleData("Shrestha")]
		[MaxLength(40)]
		[Column("prv_prescriber_last_name")]
		public string prv_prescriber_last_name { get; set; }

		/// <summary>
		/// Prescriber Provider Type if present.
		/// </summary>
		[Description("Prescriber Provider Type if present.")]
		[DisplayName("Prescriber Provider Type Code")]
		[MaxLength(10)]
		[Column("prv_prescriber_type_Code")]
		public string prv_prescriber_type_Code { get; set; }

		/// <summary>
		/// Prescriber Provider Type Description.
		/// </summary>
		[Description("Prescriber Provider Type Description.")]
		[DisplayName("Prescriber Provider Type")]
		[MaxLength(50)]
		[Column("prv_prescriber_type_desc")]
		public string prv_prescriber_type_desc { get; set; }

		/// <summary>
		/// Provider dea number
		/// </summary>
		[Description("Provider dea number")]
		[DisplayName("Provider DEA #")]
		[SampleData("CC15772")]
		[MaxLength(30)]
		[Column("prv_dea")]
		public string prv_dea { get; set; }

		/// <summary>
		/// National Provider ID
		/// </summary>
		[Description("National Provider ID")]
		[DisplayName("National Provider ID")]
		[SampleData("5687456598")]
		[MaxLength(30)]
		[Column("prv_npi")]
		public string prv_npi { get; set; }

		/// <summary>
		/// Provider nabp number
		/// </summary>
		[Description("Provider nabp number")]
		[DisplayName("Provider NABP #")]
		[MaxLength(30)]
		[Column("prv_nabp")]
		public string prv_nabp { get; set; }

		/// <summary>
		/// Provider Type Code; I/P/A
		/// </summary>
		[Description("Provider Type Code; I/P/A")]
		[DisplayName("Provider Type Code")]
		[SampleData("I")]
		[MaxLength(10)]
		[Column("prv_type_code")]
		public string prv_type_code { get; set; }

		/// <summary>
		/// date prescription was written
		/// </summary>
		[Description("date prescription was written")]
		[DisplayName("date prescription")]
		[SampleData("20/01/2011")]
		[Column("svc_written_date")]
		public DateTime? svc_written_date { get; set; }

		/// <summary>
		/// date prescription was filled
		/// </summary>
		[Description("date prescription was filled")]
		[DisplayName("date prescription")]
		[SampleData("40696")]
		[Column("svc_filled_date")]
		public DateTime svc_filled_date { get; set; }

		/// <summary>
		/// date of service
		/// </summary>
		[Description("date of service")]
		[DisplayName("date of")]
		[SampleData("40699")]
		[Column("svc_service_date")]
		public DateTime? svc_service_date { get; set; }

		/// <summary>
		/// date of payment
		/// </summary>
		[Description("date of payment")]
		[DisplayName("Date Paid")]
		[SampleData("40700")]
		[Column("rev_paid_date")]
		public DateTime? rev_paid_date { get; set; }

		/// <summary>
		/// National Drug Code
		/// </summary>
		[Description("National Drug Code")]
		[DisplayName("National Drug")]
		[SampleData("2416502")]
		[MaxLength(11)]
		[Column("svc_ndc_code")]
		public string svc_ndc_code { get; set; }

		/// <summary>
		/// National Drug Code description
		/// </summary>
		[Description("National Drug Code description")]
		[DisplayName("National Drug")]
		[SampleData("Evista 60 Mg Tablet")]
		[MaxLength(256)]
		[Column("svc_ndc_desc")]
		public string svc_ndc_desc { get; set; }

		/// <summary>
		/// Pharmacy class code
		/// </summary>
		[Description("Pharmacy class code")]
		[DisplayName("Pharmacy Class Code")]
		[SampleData("77")]
		[MaxLength(12)]
		[Column("svc_rx_class_code")]
		public string svc_rx_class_code { get; set; }

		/// <summary>
		/// Pharmacy class code descirption
		/// </summary>
		[Description("Pharmacy class code descirption")]
		[DisplayName("Pharmacy Class")]
		[SampleData("Anticoagulants")]
		[MaxLength(200)]
		[Column("svc_rx_class_desc")]
		public string svc_rx_class_desc { get; set; }

		/// <summary>
		/// Drug name
		/// </summary>
		[Description("Drug name")]
		[DisplayName("Drug Name")]
		[SampleData("Warfarin Sodium")]
		[MaxLength(200)]
		[Column("svc_drug_name")]
		public string svc_drug_name { get; set; }

		/// <summary>
		/// Drug dose
		/// </summary>
		[Description("Drug dose")]
		[DisplayName("Drug Dose")]
		[MaxLength(10)]
		[Column("svc_dosage")]
		public string svc_dosage { get; set; }

		/// <summary>
		/// Drug Strength
		/// </summary>
		[Description("Drug Strength")]
		[DisplayName("Drug Strength")]
		[SampleData("60 mg")]
		[MaxLength(100)]
		[Column("svc_drug_strength")]
		public string svc_drug_strength { get; set; }

		/// <summary>
		/// Quanitiy of physical unit
		/// </summary>
		[Description("Quanitiy of physical unit")]
		[DisplayName("Quanitiy of")]
		[SampleData("5")]
		[Column("svc_unit_qty")]
		public int? svc_unit_qty { get; set; }

		/// <summary>
		/// Prescription supply based in Days
		/// </summary>
		[Description("Prescription supply based in Days")]
		[DisplayName("Prescription supply")]
		[SampleData("10")]
		[Column("svc_days_of_supply")]
		public int? svc_days_of_supply { get; set; }

		/// <summary>
		/// Label Name of Prescription
		/// </summary>
		[Description("Label Name of Prescription")]
		[DisplayName("Label Name")]
		[MaxLength(200)]
		[Column("svc_label_name")]
		public string svc_label_name { get; set; }

		/// <summary>
		/// Formulary Plan Code
		/// </summary>
		[Description("Formulary Plan Code")]
		[DisplayName("Formulary Plan")]
		[MaxLength(10)]
		[Column("svc_formulary_plan_code")]
		public string svc_formulary_plan_code { get; set; }

		/// <summary>
		/// Formulary flag
		/// </summary>
		[Description("Formulary flag")]
		[DisplayName("Formulary Flag")]
		[SampleData("Y")]
		[MaxLength(1)]
		[Column("svc_formulary_flag")]
		public string svc_formulary_flag { get; set; }

		/// <summary>
		/// Brand / Generic Indicator
		/// </summary>
		[Description("Brand / Generic Indicator")]
		[DisplayName("Brand / Generic")]
		[SampleData("N")]
		[MaxLength(1)]
		[Column("svc_generic_flag")]
		public string svc_generic_flag { get; set; }

		/// <summary>
		/// Mail Order Flag
		/// </summary>
		[Description("Mail Order Flag")]
		[DisplayName("Mail Order")]
		[SampleData("Y")]
		[MaxLength(1)]
		[Column("svc_mail_order_flag")]
		public string svc_mail_order_flag { get; set; }

		/// <summary>
		/// Per refill quantity
		/// </summary>
		[Description("Per refill quantity")]
		[DisplayName("Per refill")]
		[Column("svc_refill_qty")]
		public int? svc_refill_qty { get; set; }

		/// <summary>
		/// Number of Refills allowed
		/// </summary>
		[Description("Number of Refills allowed")]
		[DisplayName("Number of")]
		[Column("svc_refill_allowed")]
		public int? svc_refill_allowed { get; set; }

		/// <summary>
		/// Allowance Provided at the Pharmacy Sales Counter
		/// </summary>
		[Description("Allowance Provided at the Pharmacy Sales Counter")]
		[DisplayName("Allowance Provided")]
		[Column("svc_counter_allow")]
		public int? svc_counter_allow { get; set; }

		/// <summary>
		/// Dispensed as Written Instructions
		/// </summary>
		[Description("Dispensed as Written Instructions")]
		[DisplayName("Dispensed As Code")]
		[MaxLength(10)]
		[Column("svc_daw_code")]
		public string svc_daw_code { get; set; }

		/// <summary>
		/// Dispensed as Written Instructions Description
		/// </summary>
		[Description("Dispensed as Written Instructions Description")]
		[DisplayName("Dispensed As")]
		[MaxLength(50)]
		[Column("svc_daw_desc")]
		public string svc_daw_desc { get; set; }

		/// <summary>
		/// Amount allowed under contract
		/// </summary>
		[Description("Amount allowed under contract")]
		[DisplayName("Amount Allowed")]
		[SampleData("800")]
		[Column("rev_allowed_amt")]
		public decimal? rev_allowed_amt { get; set; }

		/// <summary>
		/// Gross charges
		/// </summary>
		[Description("Gross charges")]
		[DisplayName("Gross Charges")]
		[SampleData("500")]
		[Column("rev_billed_amt")]
		public decimal? rev_billed_amt { get; set; }

		/// <summary>
		/// Coinsurance due from patient
		/// </summary>
		[Description("Coinsurance due from patient")]
		[DisplayName("Coinsurance Amount Due")]
		[SampleData("10")]
		[Column("rev_coinsurance_amt")]
		public decimal? rev_coinsurance_amt { get; set; }

		/// <summary>
		/// Amount collected from the patient as a co-payment.
		/// </summary>
		[Description("Amount collected from the patient as a co-payment.")]
		[DisplayName("Copay Amount Collected")]
		[SampleData("5")]
		[Column("rev_copay_amt")]
		public decimal? rev_copay_amt { get; set; }

		/// <summary>
		/// Deductible Portion of the Allowed Amount 
		/// </summary>
		[Description("Deductible Portion of the Allowed Amount ")]
		[DisplayName("Deductable Amount")]
		[SampleData("5")]
		[Column("rev_deductible_amt")]
		public decimal? rev_deductible_amt { get; set; }

		/// <summary>
		/// Dispensing Fee textged by the Pharmacy to the PBM
		/// </summary>
		[Description("Dispensing Fee textged by the Pharmacy to the PBM")]
		[DisplayName("Dispensing Fee")]
		[SampleData("6")]
		[Column("rev_disp_fee_amt")]
		public decimal? rev_disp_fee_amt { get; set; }

		/// <summary>
		/// Cost of ingredients
		/// </summary>
		[Description("Cost of ingredients")]
		[DisplayName("Cost of")]
		[SampleData("10")]
		[Column("rev_ingred_cost_amt")]
		public decimal? rev_ingred_cost_amt { get; set; }

		/// <summary>
		/// State Tax Paid
		/// </summary>
		[Description("State Tax Paid")]
		[DisplayName("State Tax")]
		[SampleData("20")]
		[Column("rev_stax_amt")]
		public decimal? rev_stax_amt { get; set; }

		/// <summary>
		/// Usual and Customary Fee
		/// </summary>
		[Description("Usual and Customary Fee")]
		[DisplayName("Usual and")]
		[SampleData("30")]
		[Column("rev_usual_cust_amt")]
		public decimal? rev_usual_cust_amt { get; set; }

		/// <summary>
		/// Amount paid
		/// </summary>
		[Description("Amount paid")]
		[DisplayName("Amount Paid")]
		[SampleData("400")]
		[Column("rev_paid_amt")]
		public decimal rev_paid_amt { get; set; }

		/// <summary>
		/// Adjudication code
		/// </summary>
		[Description("Adjudication code")]
		[DisplayName("Adjudication Code")]
		[SampleData("P")]
		[MaxLength(8)]
		[Column("rev_adjudication_code")]
		public string rev_adjudication_code { get; set; }

		/// <summary>
		/// Adjudication description
		/// </summary>
		[Description("Adjudication description")]
		[DisplayName("Adjudication")]
		[SampleData("Paid")]
		[MaxLength(50)]
		[Column("rev_adjudication_desc")]
		public string rev_adjudication_desc { get; set; }

		/// <summary>
		/// User Defined Field 1
		/// </summary>
		[Description("User Defined Field 1")]
		[DisplayName("UDF 1")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf1")]
		public string udf1 { get; set; }

		/// <summary>
		/// User Defined Field 2
		/// </summary>
		[Description("User Defined Field 2")]
		[DisplayName("UDF 2")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf2")]
		public string udf2 { get; set; }

		/// <summary>
		/// User Defined Field 3
		/// </summary>
		[Description("User Defined Field 3")]
		[DisplayName("UDF 3")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf3")]
		public string udf3 { get; set; }

		/// <summary>
		/// User Defined Field 4
		/// </summary>
		[Description("User Defined Field 4")]
		[DisplayName("UDF 4")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf4")]
		public string udf4 { get; set; }

		/// <summary>
		/// User Defined Field 5
		/// </summary>
		[Description("User Defined Field 5")]
		[DisplayName("UDF 5")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf5")]
		public string udf5 { get; set; }

		/// <summary>
		/// User Defined Field 6
		/// </summary>
		[Description("User Defined Field 6")]
		[DisplayName("UDF 6")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf6")]
		public string udf6 { get; set; }

		/// <summary>
		/// User Defined Field 7
		/// </summary>
		[Description("User Defined Field 7")]
		[DisplayName("UDF 7")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf7")]
		public string udf7 { get; set; }

		/// <summary>
		/// User Defined Field 8
		/// </summary>
		[Description("User Defined Field 8")]
		[DisplayName("UDF 8")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf8")]
		public string udf8 { get; set; }

		/// <summary>
		/// User Defined Field 9
		/// </summary>
		[Description("User Defined Field 9")]
		[DisplayName("UDF 9")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf9")]
		public string udf9 { get; set; }

		/// <summary>
		/// User Defined Field 10
		/// </summary>
		[Description("User Defined Field 10")]
		[DisplayName("UDF 10")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf10")]
		public string udf10 { get; set; }

		/// <summary>
		/// User Defined Field 11
		/// </summary>
		[Description("User Defined Field 11")]
		[DisplayName("UDF 11")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf11")]
		public string udf11 { get; set; }

		/// <summary>
		/// User Defined Field 12
		/// </summary>
		[Description("User Defined Field 12")]
		[DisplayName("UDF 12")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf12")]
		public string udf12 { get; set; }

		/// <summary>
		/// User Defined Field 13
		/// </summary>
		[Description("User Defined Field 13")]
		[DisplayName("UDF 13")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf13")]
		public string udf13 { get; set; }

		/// <summary>
		/// User Defined Field 14
		/// </summary>
		[Description("User Defined Field 14")]
		[DisplayName("UDF 14")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf14")]
		public string udf14 { get; set; }

		/// <summary>
		/// User Defined Field 15
		/// </summary>
		[Description("User Defined Field 15")]
		[DisplayName("UDF 15")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf15")]
		public string udf15 { get; set; }

		/// <summary>
		/// User Defined Field 16
		/// </summary>
		[Description("User Defined Field 16")]
		[DisplayName("UDF 16")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf16")]
		public string udf16 { get; set; }

		/// <summary>
		/// User Defined Field 17
		/// </summary>
		[Description("User Defined Field 17")]
		[DisplayName("UDF 17")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf17")]
		public string udf17 { get; set; }

		/// <summary>
		/// User Defined Field 18
		/// </summary>
		[Description("User Defined Field 18")]
		[DisplayName("UDF 18")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf18")]
		public string udf18 { get; set; }

		/// <summary>
		/// User Defined Field 19
		/// </summary>
		[Description("User Defined Field 19")]
		[DisplayName("UDF 19")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf19")]
		public string udf19 { get; set; }

		/// <summary>
		/// User Defined Field 20
		/// </summary>
		[Description("User Defined Field 20")]
		[DisplayName("UDF 20")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf20")]
		public string udf20 { get; set; }

		/// <summary>
		/// Member ID
		/// </summary>
		[Description("Member ID")]
		[DisplayName("Member ID")]
		[SampleData("Hash Encrypted")]
		[MaxLength(50)]
		[Column("dw_member_id")]
		public string dw_member_id { get; set; }

		/// <summary>
		/// Boolean Field
		/// </summary>
		[Description("Boolean Field")]
		[DisplayName("Boolean Field")]
		[SampleData("True for Non-EM members  and False for EM members")]
		[MaxLength(20)]
		[Column("is_makalu_used")]
		public string is_makalu_used { get; set; }

		/// <summary>
		/// Source Filename
		/// </summary>
		[Description("Source Filename")]
		[DisplayName("Source Filename")]
		[MaxLength(500)]
		[Column("dw_rawfilename")]
		public string dw_rawfilename { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 21")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf21")]
		public string udf21 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 22")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf22")]
		public string udf22 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 23")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf23")]
		public string udf23 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 24")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf24")]
		public string udf24 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 25")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf25")]
		public string udf25 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 26")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf26")]
		public string udf26 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 27")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf27")]
		public string udf27 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 28")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf28")]
		public string udf28 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 29")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf29")]
		public string udf29 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 30")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf30")]
		public string udf30 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 31")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf31")]
		public string udf31 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 32")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf32")]
		public string udf32 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 33")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf33")]
		public string udf33 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 34")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf34")]
		public string udf34 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 35")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf35")]
		public string udf35 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 36")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf36")]
		public string udf36 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 37")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf37")]
		public string udf37 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 38")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf38")]
		public string udf38 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 39")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf39")]
		public string udf39 { get; set; }

		/// <summary>
		/// User Defined Field
		/// </summary>
		[Description("User Defined Field")]
		[DisplayName("UDF 40")]
		[UserDefinedData]
		[MaxLength(100)]
		[Column("udf40")]
		public string udf40 { get; set; }

		[DisplayName("Mbr Dob Date Dim Id")]
		[Column("MbrDobDateDimId")]
		public int? MbrDobDateDimId { get; set; }

		[ForeignKey("MbrDobDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension MbrDobDateDim { get; set; }

		[DisplayName("Svc Written Date Date Dim Id")]
		[Column("SvcWrittenDateDateDimId")]
		public int? SvcWrittenDateDateDimId { get; set; }

		[ForeignKey("SvcWrittenDateDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension SvcWrittenDateDateDim { get; set; }

		[DisplayName("Svc Filled Date Date Dim Id")]
		[Column("SvcFilledDateDateDimId")]
		public int? SvcFilledDateDateDimId { get; set; }

		[ForeignKey("SvcFilledDateDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension SvcFilledDateDateDim { get; set; }

		[DisplayName("Svc Service Date Date Dim Id")]
		[Column("SvcServiceDateDateDimId")]
		public int? SvcServiceDateDateDimId { get; set; }

		[ForeignKey("SvcServiceDateDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension SvcServiceDateDateDim { get; set; }

		[DisplayName("Rev Paid Date Date Dim Id")]
		[Column("RevPaidDateDateDimId")]
		public int? RevPaidDateDateDimId { get; set; }

		[ForeignKey("RevPaidDateDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension RevPaidDateDateDim { get; set; }

		[DisplayName("Date Dimensions Linked")]
		[Column("DateDimensionsLinked")]
		public bool DateDimensionsLinked { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} PharmacyId={PharmacyId} {extras}";
		}

		partial void OnConstructed();
	
		public Pharmacy()
			: this(null)
		{}

		public Pharmacy(Pharmacy other)
		{
			if (other!=null)
			{
				TenantId = other.TenantId;
				ContactId = other.ContactId;
				rev_transaction_num = other.rev_transaction_num;
				ins_plan_type_code = other.ins_plan_type_code;
				ins_plan_type_desc = other.ins_plan_type_desc;
				mbr_id = other.mbr_id;
				mbr_first_name = other.mbr_first_name;
				mbr_middle_name = other.mbr_middle_name;
				mbr_last_name = other.mbr_last_name;
				mbr_gender = other.mbr_gender;
				mbr_dob = other.mbr_dob;
				mbr_city = other.mbr_city;
				mbr_county = other.mbr_county;
				mbr_zip = other.mbr_zip;
				mbr_relationship_code = other.mbr_relationship_code;
				mbr_relationship_desc = other.mbr_relationship_desc;
				ins_carrier_id = other.ins_carrier_id;
				ins_carrier_name = other.ins_carrier_name;
				ins_coverage_type_code = other.ins_coverage_type_code;
				ins_coverage_type_desc = other.ins_coverage_type_desc;
				ins_emp_group_id = other.ins_emp_group_id;
				ins_emp_group_name = other.ins_emp_group_name;
				ins_division_id = other.ins_division_id;
				ins_division_name = other.ins_division_name;
				ins_cobra_code = other.ins_cobra_code;
				ins_cobra_desc = other.ins_cobra_desc;
				prv_prescriber_id = other.prv_prescriber_id;
				prv_prescriber_first_name = other.prv_prescriber_first_name;
				prv_prescriber_middle_name = other.prv_prescriber_middle_name;
				prv_prescriber_last_name = other.prv_prescriber_last_name;
				prv_prescriber_type_Code = other.prv_prescriber_type_Code;
				prv_prescriber_type_desc = other.prv_prescriber_type_desc;
				prv_dea = other.prv_dea;
				prv_npi = other.prv_npi;
				prv_nabp = other.prv_nabp;
				prv_type_code = other.prv_type_code;
				svc_written_date = other.svc_written_date;
				svc_filled_date = other.svc_filled_date;
				svc_service_date = other.svc_service_date;
				rev_paid_date = other.rev_paid_date;
				svc_ndc_code = other.svc_ndc_code;
				svc_ndc_desc = other.svc_ndc_desc;
				svc_rx_class_code = other.svc_rx_class_code;
				svc_rx_class_desc = other.svc_rx_class_desc;
				svc_drug_name = other.svc_drug_name;
				svc_dosage = other.svc_dosage;
				svc_drug_strength = other.svc_drug_strength;
				svc_unit_qty = other.svc_unit_qty;
				svc_days_of_supply = other.svc_days_of_supply;
				svc_label_name = other.svc_label_name;
				svc_formulary_plan_code = other.svc_formulary_plan_code;
				svc_formulary_flag = other.svc_formulary_flag;
				svc_generic_flag = other.svc_generic_flag;
				svc_mail_order_flag = other.svc_mail_order_flag;
				svc_refill_qty = other.svc_refill_qty;
				svc_refill_allowed = other.svc_refill_allowed;
				svc_counter_allow = other.svc_counter_allow;
				svc_daw_code = other.svc_daw_code;
				svc_daw_desc = other.svc_daw_desc;
				rev_allowed_amt = other.rev_allowed_amt;
				rev_billed_amt = other.rev_billed_amt;
				rev_coinsurance_amt = other.rev_coinsurance_amt;
				rev_copay_amt = other.rev_copay_amt;
				rev_deductible_amt = other.rev_deductible_amt;
				rev_disp_fee_amt = other.rev_disp_fee_amt;
				rev_ingred_cost_amt = other.rev_ingred_cost_amt;
				rev_stax_amt = other.rev_stax_amt;
				rev_usual_cust_amt = other.rev_usual_cust_amt;
				rev_paid_amt = other.rev_paid_amt;
				rev_adjudication_code = other.rev_adjudication_code;
				rev_adjudication_desc = other.rev_adjudication_desc;
				udf1 = other.udf1;
				udf2 = other.udf2;
				udf3 = other.udf3;
				udf4 = other.udf4;
				udf5 = other.udf5;
				udf6 = other.udf6;
				udf7 = other.udf7;
				udf8 = other.udf8;
				udf9 = other.udf9;
				udf10 = other.udf10;
				udf11 = other.udf11;
				udf12 = other.udf12;
				udf13 = other.udf13;
				udf14 = other.udf14;
				udf15 = other.udf15;
				udf16 = other.udf16;
				udf17 = other.udf17;
				udf18 = other.udf18;
				udf19 = other.udf19;
				udf20 = other.udf20;
				dw_member_id = other.dw_member_id;
				is_makalu_used = other.is_makalu_used;
				dw_rawfilename = other.dw_rawfilename;
				udf21 = other.udf21;
				udf22 = other.udf22;
				udf23 = other.udf23;
				udf24 = other.udf24;
				udf25 = other.udf25;
				udf26 = other.udf26;
				udf27 = other.udf27;
				udf28 = other.udf28;
				udf29 = other.udf29;
				udf30 = other.udf30;
				udf31 = other.udf31;
				udf32 = other.udf32;
				udf33 = other.udf33;
				udf34 = other.udf34;
				udf35 = other.udf35;
				udf36 = other.udf36;
				udf37 = other.udf37;
				udf38 = other.udf38;
				udf39 = other.udf39;
				udf40 = other.udf40;
				MbrDobDateDimId = other.MbrDobDateDimId;
				SvcWrittenDateDateDimId = other.SvcWrittenDateDateDimId;
				SvcFilledDateDateDimId = other.SvcFilledDateDateDimId;
				SvcServiceDateDateDimId = other.SvcServiceDateDateDimId;
				RevPaidDateDateDimId = other.RevPaidDateDateDimId;
				DateDimensionsLinked = other.DateDimensionsLinked;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(rev_transaction_num, nameof(rev_transaction_num));
			Requires.Text(rev_transaction_num, nameof(rev_transaction_num), true, 0, 80);
			Requires.Text(ins_plan_type_code, nameof(ins_plan_type_code), true, 0, 20);
			Requires.Text(ins_plan_type_desc, nameof(ins_plan_type_desc), true, 0, 255);
			Requires.NonNull(mbr_id, nameof(mbr_id));
			Requires.Text(mbr_id, nameof(mbr_id), true, 0, 50);
			Requires.Text(mbr_first_name, nameof(mbr_first_name), true, 0, 30);
			Requires.Text(mbr_middle_name, nameof(mbr_middle_name), true, 0, 30);
			Requires.Text(mbr_last_name, nameof(mbr_last_name), true, 0, 30);
			Requires.NonNull(mbr_gender, nameof(mbr_gender));
			Requires.Text(mbr_gender, nameof(mbr_gender), true, 0, 2);
			Requires.Text(mbr_city, nameof(mbr_city), true, 0, 20);
			Requires.Text(mbr_county, nameof(mbr_county), true, 0, 20);
			Requires.Text(mbr_zip, nameof(mbr_zip), true, 0, 10);
			Requires.Text(mbr_relationship_code, nameof(mbr_relationship_code), true, 0, 5);
			Requires.Text(mbr_relationship_desc, nameof(mbr_relationship_desc), true, 0, 50);
			Requires.Text(ins_carrier_id, nameof(ins_carrier_id), true, 0, 20);
			Requires.Text(ins_carrier_name, nameof(ins_carrier_name), true, 0, 50);
			Requires.Text(ins_coverage_type_code, nameof(ins_coverage_type_code), true, 0, 20);
			Requires.Text(ins_coverage_type_desc, nameof(ins_coverage_type_desc), true, 0, 50);
			Requires.Text(ins_emp_group_id, nameof(ins_emp_group_id), true, 0, 20);
			Requires.Text(ins_emp_group_name, nameof(ins_emp_group_name), true, 0, 100);
			Requires.Text(ins_division_id, nameof(ins_division_id), true, 0, 20);
			Requires.Text(ins_division_name, nameof(ins_division_name), true, 0, 100);
			Requires.Text(ins_cobra_code, nameof(ins_cobra_code), true, 0, 2);
			Requires.Text(ins_cobra_desc, nameof(ins_cobra_desc), true, 0, 30);
			Requires.Text(prv_prescriber_id, nameof(prv_prescriber_id), true, 0, 20);
			Requires.Text(prv_prescriber_first_name, nameof(prv_prescriber_first_name), true, 0, 70);
			Requires.Text(prv_prescriber_middle_name, nameof(prv_prescriber_middle_name), true, 0, 30);
			Requires.Text(prv_prescriber_last_name, nameof(prv_prescriber_last_name), true, 0, 40);
			Requires.Text(prv_prescriber_type_Code, nameof(prv_prescriber_type_Code), true, 0, 10);
			Requires.Text(prv_prescriber_type_desc, nameof(prv_prescriber_type_desc), true, 0, 50);
			Requires.Text(prv_dea, nameof(prv_dea), true, 0, 30);
			Requires.Text(prv_npi, nameof(prv_npi), true, 0, 30);
			Requires.Text(prv_nabp, nameof(prv_nabp), true, 0, 30);
			Requires.Text(prv_type_code, nameof(prv_type_code), true, 0, 10);
			Requires.Text(svc_ndc_code, nameof(svc_ndc_code), true, 0, 11);
			Requires.Text(svc_ndc_desc, nameof(svc_ndc_desc), true, 0, 256);
			Requires.Text(svc_rx_class_code, nameof(svc_rx_class_code), true, 0, 12);
			Requires.Text(svc_rx_class_desc, nameof(svc_rx_class_desc), true, 0, 200);
			Requires.Text(svc_drug_name, nameof(svc_drug_name), true, 0, 200);
			Requires.Text(svc_dosage, nameof(svc_dosage), true, 0, 10);
			Requires.Text(svc_drug_strength, nameof(svc_drug_strength), true, 0, 100);
			Requires.Text(svc_label_name, nameof(svc_label_name), true, 0, 200);
			Requires.Text(svc_formulary_plan_code, nameof(svc_formulary_plan_code), true, 0, 10);
			Requires.Text(svc_formulary_flag, nameof(svc_formulary_flag), true, 0, 1);
			Requires.Text(svc_generic_flag, nameof(svc_generic_flag), true, 0, 1);
			Requires.Text(svc_mail_order_flag, nameof(svc_mail_order_flag), true, 0, 1);
			Requires.Text(svc_daw_code, nameof(svc_daw_code), true, 0, 10);
			Requires.Text(svc_daw_desc, nameof(svc_daw_desc), true, 0, 50);
			Requires.Text(rev_adjudication_code, nameof(rev_adjudication_code), true, 0, 8);
			Requires.Text(rev_adjudication_desc, nameof(rev_adjudication_desc), true, 0, 50);
			Requires.Text(udf1, nameof(udf1), true, 0, 100);
			Requires.Text(udf2, nameof(udf2), true, 0, 100);
			Requires.Text(udf3, nameof(udf3), true, 0, 100);
			Requires.Text(udf4, nameof(udf4), true, 0, 100);
			Requires.Text(udf5, nameof(udf5), true, 0, 100);
			Requires.Text(udf6, nameof(udf6), true, 0, 100);
			Requires.Text(udf7, nameof(udf7), true, 0, 100);
			Requires.Text(udf8, nameof(udf8), true, 0, 100);
			Requires.Text(udf9, nameof(udf9), true, 0, 100);
			Requires.Text(udf10, nameof(udf10), true, 0, 100);
			Requires.Text(udf11, nameof(udf11), true, 0, 100);
			Requires.Text(udf12, nameof(udf12), true, 0, 100);
			Requires.Text(udf13, nameof(udf13), true, 0, 100);
			Requires.Text(udf14, nameof(udf14), true, 0, 100);
			Requires.Text(udf15, nameof(udf15), true, 0, 100);
			Requires.Text(udf16, nameof(udf16), true, 0, 100);
			Requires.Text(udf17, nameof(udf17), true, 0, 100);
			Requires.Text(udf18, nameof(udf18), true, 0, 100);
			Requires.Text(udf19, nameof(udf19), true, 0, 100);
			Requires.Text(udf20, nameof(udf20), true, 0, 100);
			Requires.Text(dw_member_id, nameof(dw_member_id), true, 0, 50);
			Requires.Text(is_makalu_used, nameof(is_makalu_used), true, 0, 20);
			Requires.Text(dw_rawfilename, nameof(dw_rawfilename), true, 0, 500);
			Requires.Text(udf21, nameof(udf21), true, 0, 100);
			Requires.Text(udf22, nameof(udf22), true, 0, 100);
			Requires.Text(udf23, nameof(udf23), true, 0, 100);
			Requires.Text(udf24, nameof(udf24), true, 0, 100);
			Requires.Text(udf25, nameof(udf25), true, 0, 100);
			Requires.Text(udf26, nameof(udf26), true, 0, 100);
			Requires.Text(udf27, nameof(udf27), true, 0, 100);
			Requires.Text(udf28, nameof(udf28), true, 0, 100);
			Requires.Text(udf29, nameof(udf29), true, 0, 100);
			Requires.Text(udf30, nameof(udf30), true, 0, 100);
			Requires.Text(udf31, nameof(udf31), true, 0, 100);
			Requires.Text(udf32, nameof(udf32), true, 0, 100);
			Requires.Text(udf33, nameof(udf33), true, 0, 100);
			Requires.Text(udf34, nameof(udf34), true, 0, 100);
			Requires.Text(udf35, nameof(udf35), true, 0, 100);
			Requires.Text(udf36, nameof(udf36), true, 0, 100);
			Requires.Text(udf37, nameof(udf37), true, 0, 100);
			Requires.Text(udf38, nameof(udf38), true, 0, 100);
			Requires.Text(udf39, nameof(udf39), true, 0, 100);
			Requires.Text(udf40, nameof(udf40), true, 0, 100);
			PartialValidate();
        }
	}

	[Table("QualityMetrics", Schema = "deerwalk")]
	public partial class QualityMetric : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted, IDontCreate
	{
        public static readonly QualityMetric[] None = new QualityMetric[0];

		[DisplayName("Quality Metric Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("QualityMetricId")]
		public long QualityMetricId { get; set; }

		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Contact Id")]
		[Column("ContactId")]
		public long? ContactId { get; set; }

		[ForeignKey("ContactId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Contact Contact { get; set; }

		/// <summary>
		/// Auto-increment number-a unique identifier for Makalu engine
		/// </summary>
		[Description("Auto-increment number-a unique identifier for Makalu engine")]
		[DisplayName("Quality Metric RID")]
		[SampleData("1")]
		[Column("dw_record_id")]
		public int dw_record_id { get; set; }

		/// <summary>
		/// Member ID
		/// </summary>
		[Description("Member ID")]
		[DisplayName("Member ID")]
		[SampleData("Hash Encrypted")]
		[NotNull]
		[Required]
		[MaxLength(50)]
		[Column("dw_member_id")]
		public string dw_member_id { get; set; }

		[DisplayName("Member First Name")]
		[SampleData("Mark")]
		[MaxLength(30)]
		[Column("memberFirstName")]
		public string memberFirstName { get; set; }

		[DisplayName("Member Last Name")]
		[SampleData("Hinds")]
		[MaxLength(30)]
		[Column("memberLastName")]
		public string memberLastName { get; set; }

		[DisplayName("Member Gender")]
		[SampleData("F")]
		[MaxLength(5)]
		[Column("memberGender")]
		public string memberGender { get; set; }

		[DisplayName("Member DOB")]
		[SampleData("YYYY-MM-DD")]
		[Column("memberDOB")]
		public DateTime? memberDOB { get; set; }

		[DisplayName("Measure Id")]
		[SampleData("123")]
		[MaxLength(50)]
		[Column("measureId")]
		public string measureId { get; set; }

		[DisplayName("Measure Desc")]
		[SampleData("3 or more ER Visits in the last 6 months   ")]
		[MaxLength(200)]
		[Column("measureDesc")]
		public string measureDesc { get; set; }

		[DisplayName("Positive Negative")]
		[SampleData("0=Negative metric; 1=Positive metric")]
		[MaxLength(50)]
		[Column("PositiveNegative")]
		public string PositiveNegative { get; set; }

		[DisplayName("Measure Name")]
		[SampleData("Utilization")]
		[MaxLength(200)]
		[Column("measureName")]
		public string measureName { get; set; }

		[DisplayName("Start Date")]
		[SampleData("YYYY-MM-DD")]
		[Column("startDate")]
		public DateTime? startDate { get; set; }

		[DisplayName("End Date")]
		[SampleData("YYYY-MM-DD")]
		[Column("EndDate")]
		public DateTime? EndDate { get; set; }

		[DisplayName("Numerator")]
		[SampleData("0")]
		[MaxLength(1)]
		[Column("numerator")]
		public string numerator { get; set; }

		[DisplayName("Denominator")]
		[SampleData("1")]
		[MaxLength(1)]
		[Column("denomenator")]
		public string denomenator { get; set; }

		[DisplayName("Memberdob Date Dim Id")]
		[Column("MemberdobDateDimId")]
		public int? MemberdobDateDimId { get; set; }

		[ForeignKey("MemberdobDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension MemberdobDateDim { get; set; }

		[DisplayName("Startdate Date Dim Id")]
		[Column("StartdateDateDimId")]
		public int? StartdateDateDimId { get; set; }

		[ForeignKey("StartdateDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension StartdateDateDim { get; set; }

		[DisplayName("Enddate Date Dim Id")]
		[Column("EnddateDateDimId")]
		public int? EnddateDateDimId { get; set; }

		[ForeignKey("EnddateDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension EnddateDateDim { get; set; }

		[DisplayName("Date Dimensions Linked")]
		[Column("DateDimensionsLinked")]
		public bool DateDimensionsLinked { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} QualityMetricId={QualityMetricId} {extras}";
		}

		partial void OnConstructed();
	
		public QualityMetric()
			: this(null)
		{}

		public QualityMetric(QualityMetric other)
		{
			if (other!=null)
			{
				TenantId = other.TenantId;
				ContactId = other.ContactId;
				dw_record_id = other.dw_record_id;
				dw_member_id = other.dw_member_id;
				memberFirstName = other.memberFirstName;
				memberLastName = other.memberLastName;
				memberGender = other.memberGender;
				memberDOB = other.memberDOB;
				measureId = other.measureId;
				measureDesc = other.measureDesc;
				PositiveNegative = other.PositiveNegative;
				measureName = other.measureName;
				startDate = other.startDate;
				EndDate = other.EndDate;
				numerator = other.numerator;
				denomenator = other.denomenator;
				MemberdobDateDimId = other.MemberdobDateDimId;
				StartdateDateDimId = other.StartdateDateDimId;
				EnddateDateDimId = other.EnddateDateDimId;
				DateDimensionsLinked = other.DateDimensionsLinked;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(dw_member_id, nameof(dw_member_id));
			Requires.Text(dw_member_id, nameof(dw_member_id), true, 0, 50);
			Requires.Text(memberFirstName, nameof(memberFirstName), true, 0, 30);
			Requires.Text(memberLastName, nameof(memberLastName), true, 0, 30);
			Requires.Text(memberGender, nameof(memberGender), true, 0, 5);
			Requires.Text(measureId, nameof(measureId), true, 0, 50);
			Requires.Text(measureDesc, nameof(measureDesc), true, 0, 200);
			Requires.Text(PositiveNegative, nameof(PositiveNegative), true, 0, 50);
			Requires.Text(measureName, nameof(measureName), true, 0, 200);
			Requires.Text(numerator, nameof(numerator), true, 0, 1);
			Requires.Text(denomenator, nameof(denomenator), true, 0, 1);
			PartialValidate();
        }
	}

	/// <summary>
	/// Milliman Advanced Risk Adjuster Scores
	/// </summary>
	[Table("Scores", Schema = "deerwalk")]
	public partial class Score : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted, IDontCreate
	{
        public static readonly Score[] None = new Score[0];

		[DisplayName("Score Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("ScoreId")]
		public long ScoreId { get; set; }

		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Contact Id")]
		[Column("ContactId")]
		public long? ContactId { get; set; }

		[ForeignKey("ContactId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Contact Contact { get; set; }

		/// <summary>
		/// Auto-increment number-a unique identifier for Makalu engine
		/// </summary>
		[Description("Auto-increment number-a unique identifier for Makalu engine")]
		[DisplayName("Score RID")]
		[SampleData("1")]
		[Column("dw_record_id")]
		public int? dw_record_id { get; set; }

		/// <summary>
		/// Account id
		/// </summary>
		[Description("Account id")]
		[DisplayName("Account id")]
		[SampleData("1027")]
		[MaxLength(50)]
		[Column("dw_account_id")]
		public string dw_account_id { get; set; }

		/// <summary>
		/// Clientid
		/// </summary>
		[Description("Clientid")]
		[DisplayName("Client ID")]
		[SampleData("1")]
		[MaxLength(50)]
		[Column("dw_client_id")]
		public string dw_client_id { get; set; }

		/// <summary>
		/// Member ID
		/// </summary>
		[Description("Member ID")]
		[DisplayName("Member ID")]
		[SampleData("Hash Encrypted")]
		[MaxLength(50)]
		[Column("dw_member_id")]
		public string dw_member_id { get; set; }

		/// <summary>
		/// Member ID to display on the application, as sent by client
		/// </summary>
		[Description("Member ID to display on the application, as sent by client")]
		[DisplayName("Member ID")]
		[SampleData("9916897")]
		[NotNull]
		[Required]
		[MaxLength(50)]
		[Column("mbr_id")]
		public string mbr_id { get; set; }

		/// <summary>
		/// Score scope 
		/// </summary>
		[Description("Score scope ")]
		[DisplayName("Score Scope")]
		[SampleData("Group ID, ALL")]
		[MaxLength(50)]
		[Column("score_type")]
		public string score_type { get; set; }

		/// <summary>
		/// Risk calculation start date
		/// </summary>
		[Description("Risk calculation start date")]
		[DisplayName("Score Start Date")]
		[Column("score_start_date")]
		public DateTime? score_start_date { get; set; }

		/// <summary>
		/// Risk calculation end  date
		/// </summary>
		[Description("Risk calculation end  date")]
		[DisplayName("Score End Date")]
		[Column("score_end_date")]
		public DateTime? score_end_date { get; set; }

		[DisplayName("Ip Score")]
		[Column("ip_score")]
		public double? ip_score { get; set; }

		[DisplayName("Op Score")]
		[Column("op_score")]
		public double? op_score { get; set; }

		[DisplayName("Phy Score")]
		[Column("phy_score")]
		public double? phy_score { get; set; }

		[DisplayName("Rx Score")]
		[Column("rx_score")]
		public double? rx_score { get; set; }

		/// <summary>
		/// IP+OP+PHY
		/// </summary>
		[Description("IP+OP+PHY")]
		[DisplayName("IP+OP")]
		[Column("med_score")]
		public double? med_score { get; set; }

		/// <summary>
		/// Med+Rx
		/// </summary>
		[Description("Med+Rx")]
		[DisplayName("Med+Rx")]
		[Column("total_score")]
		public double? total_score { get; set; }

		[DisplayName("Concurrent Total")]
		[Column("concurrent_total")]
		public double? concurrent_total { get; set; }

		[DisplayName("Er Score")]
		[Column("erScore")]
		public double? erScore { get; set; }

		[DisplayName("Other Score")]
		[Column("otherScore")]
		public double? otherScore { get; set; }

		[DisplayName("Concurrent Inpatient")]
		[Column("concurrentInpatient")]
		public double? concurrentInpatient { get; set; }

		[DisplayName("Concurrent Medical")]
		[Column("concurrentMedical")]
		public double? concurrentMedical { get; set; }

		[DisplayName("Concurrent Outpatient")]
		[Column("concurrentOutpatient")]
		public double? concurrentOutpatient { get; set; }

		[DisplayName("Concurrent Pharmacy")]
		[Column("concurrentPharmacy")]
		public double? concurrentPharmacy { get; set; }

		[DisplayName("Concurrent Physician")]
		[Column("concurrentPhysician")]
		public double? concurrentPhysician { get; set; }

		[DisplayName("Concurrent Ip Normalized To Group")]
		[Column("concurrentIpNormalizedToGroup")]
		public double? concurrentIpNormalizedToGroup { get; set; }

		[DisplayName("Concurrent Op Normalized To Group")]
		[Column("concurrentOpNormalizedToGroup")]
		public double? concurrentOpNormalizedToGroup { get; set; }

		[DisplayName("Concurrent Phy Normalized To Group")]
		[Column("concurrentPhyNormalizedToGroup")]
		public double? concurrentPhyNormalizedToGroup { get; set; }

		[DisplayName("Score Start Date Date Dim Id")]
		[Column("ScoreStartDateDateDimId")]
		public int? ScoreStartDateDateDimId { get; set; }

		[ForeignKey("ScoreStartDateDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension ScoreStartDateDateDim { get; set; }

		[DisplayName("Score End Date Date Dim Id")]
		[Column("ScoreEndDateDateDimId")]
		public int? ScoreEndDateDateDimId { get; set; }

		[ForeignKey("ScoreEndDateDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension ScoreEndDateDateDim { get; set; }

		[DisplayName("Date Dimensions Linked")]
		[Column("DateDimensionsLinked")]
		public bool DateDimensionsLinked { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} ScoreId={ScoreId} {extras}";
		}

		partial void OnConstructed();
	
		public Score()
			: this(null)
		{}

		public Score(Score other)
		{
			if (other!=null)
			{
				TenantId = other.TenantId;
				ContactId = other.ContactId;
				dw_record_id = other.dw_record_id;
				dw_account_id = other.dw_account_id;
				dw_client_id = other.dw_client_id;
				dw_member_id = other.dw_member_id;
				mbr_id = other.mbr_id;
				score_type = other.score_type;
				score_start_date = other.score_start_date;
				score_end_date = other.score_end_date;
				ip_score = other.ip_score;
				op_score = other.op_score;
				phy_score = other.phy_score;
				rx_score = other.rx_score;
				med_score = other.med_score;
				total_score = other.total_score;
				concurrent_total = other.concurrent_total;
				erScore = other.erScore;
				otherScore = other.otherScore;
				concurrentInpatient = other.concurrentInpatient;
				concurrentMedical = other.concurrentMedical;
				concurrentOutpatient = other.concurrentOutpatient;
				concurrentPharmacy = other.concurrentPharmacy;
				concurrentPhysician = other.concurrentPhysician;
				concurrentIpNormalizedToGroup = other.concurrentIpNormalizedToGroup;
				concurrentOpNormalizedToGroup = other.concurrentOpNormalizedToGroup;
				concurrentPhyNormalizedToGroup = other.concurrentPhyNormalizedToGroup;
				ScoreStartDateDateDimId = other.ScoreStartDateDateDimId;
				ScoreEndDateDateDimId = other.ScoreEndDateDateDimId;
				DateDimensionsLinked = other.DateDimensionsLinked;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.Text(dw_account_id, nameof(dw_account_id), true, 0, 50);
			Requires.Text(dw_client_id, nameof(dw_client_id), true, 0, 50);
			Requires.Text(dw_member_id, nameof(dw_member_id), true, 0, 50);
			Requires.NonNull(mbr_id, nameof(mbr_id));
			Requires.Text(mbr_id, nameof(mbr_id), true, 0, 50);
			Requires.Text(score_type, nameof(score_type), true, 0, 50);
			PartialValidate();
        }
	}

	[Table("Visits", Schema = "deerwalk")]
	public partial class Visit : IRdbDataEntity, IValidate, IPreSave, ITraffkTenanted, IDontCreate
	{
        public static readonly Visit[] None = new Visit[0];

		[DisplayName("Visit Id")]
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[Column("VisitId")]
		public long VisitId { get; set; }

		[DisplayName("Created At Utc")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		[Column("CreatedAtUtc")]
		public DateTime CreatedAtUtc { get; set; }

		[DisplayName("Created At")]
		[NotMapped]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateTime CreatedAt => CreatedAtUtc.ToLocalTime();

		[DisplayName("Tenant Id")]
		[Column("TenantId")]
		public int TenantId { get; set; }

		[ForeignKey("TenantId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Tenant Tenant { get; set; }

		[DisplayName("Contact Id")]
		[Column("ContactId")]
		public long? ContactId { get; set; }

		[ForeignKey("ContactId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public Contact Contact { get; set; }

		/// <summary>
		/// Auto-increment number-a unique identifier for Makalu engine
		/// </summary>
		[Description("Auto-increment number-a unique identifier for Makalu engine")]
		[DisplayName("Visit RID")]
		[SampleData("1")]
		[Column("dw_record_id")]
		public int? dw_record_id { get; set; }

		/// <summary>
		/// Account id
		/// </summary>
		[Description("Account id")]
		[DisplayName("Account id")]
		[SampleData("1027")]
		[MaxLength(50)]
		[Column("dw_account_id")]
		public string dw_account_id { get; set; }

		/// <summary>
		/// Clientid
		/// </summary>
		[Description("Clientid")]
		[DisplayName("Client ID")]
		[SampleData("1")]
		[MaxLength(50)]
		[Column("dw_client_id")]
		public string dw_client_id { get; set; }

		/// <summary>
		/// Member ID
		/// </summary>
		[Description("Member ID")]
		[DisplayName("Member ID")]
		[SampleData("Hash Encrypted")]
		[MaxLength(50)]
		[Column("dw_member_id")]
		public string dw_member_id { get; set; }

		/// <summary>
		/// Member ID to display on the application, as sent by client
		/// </summary>
		[Description("Member ID to display on the application, as sent by client")]
		[DisplayName("Member ID")]
		[SampleData("9916897")]
		[NotNull]
		[Required]
		[MaxLength(50)]
		[Column("mbr_id")]
		public string mbr_id { get; set; }

		/// <summary>
		/// Where the visit was made
		/// </summary>
		[Description("Where the visit was made")]
		[DisplayName("Where the")]
		[SampleData("ER,office etc.")]
		[MaxLength(50)]
		[Column("mbr_visit_type")]
		public string mbr_visit_type { get; set; }

		/// <summary>
		/// Date when the visit started
		/// </summary>
		[Description("Date when the visit started")]
		[DisplayName("Date when")]
		[Column("mbr_start_date")]
		public DateTime? mbr_start_date { get; set; }

		/// <summary>
		/// Date when the visit ended
		/// </summary>
		[Description("Date when the visit ended")]
		[DisplayName("Date when")]
		[Column("mbr_end_date")]
		public DateTime? mbr_end_date { get; set; }

		/// <summary>
		/// Units of the visit
		/// </summary>
		[Description("Units of the visit")]
		[DisplayName("Units")]
		[SampleData("20")]
		[MaxLength(20)]
		[Column("value")]
		public string value { get; set; }

		/// <summary>
		/// Admission type
		/// </summary>
		[Description("Admission type")]
		[DisplayName("Admission type")]
		[SampleData("Maternity, Medical")]
		[MaxLength(55)]
		[Column("admission_type")]
		public string admission_type { get; set; }

		/// <summary>
		/// Inpatient days
		/// </summary>
		[Description("Inpatient days")]
		[DisplayName("Inpatient Days")]
		[Column("ip_days")]
		public decimal? ip_days { get; set; }

		/// <summary>
		/// Yes or no on admissions from ER (Options : Y/N)
		/// </summary>
		[Description("Yes or no on admissions from ER (Options : Y/N)")]
		[DisplayName("Yes or")]
		[SampleData("Y")]
		[MaxLength(1)]
		[Column("admission_from_er")]
		public string admission_from_er { get; set; }

		[DisplayName("Mbr Start Date Date Dim Id")]
		[Column("MbrStartDateDateDimId")]
		public int? MbrStartDateDateDimId { get; set; }

		[ForeignKey("MbrStartDateDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension MbrStartDateDateDim { get; set; }

		[DisplayName("Mbr End Date Date Dim Id")]
		[Column("MbrEndDateDateDimId")]
		public int? MbrEndDateDateDimId { get; set; }

		[ForeignKey("MbrEndDateDateDimId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public DateDimension MbrEndDateDateDim { get; set; }

		[DisplayName("Date Dimensions Linked")]
		[Column("DateDimensionsLinked")]
		public bool DateDimensionsLinked { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} VisitId={VisitId} {extras}";
		}

		partial void OnConstructed();
	
		public Visit()
			: this(null)
		{}

		public Visit(Visit other)
		{
			if (other!=null)
			{
				TenantId = other.TenantId;
				ContactId = other.ContactId;
				dw_record_id = other.dw_record_id;
				dw_account_id = other.dw_account_id;
				dw_client_id = other.dw_client_id;
				dw_member_id = other.dw_member_id;
				mbr_id = other.mbr_id;
				mbr_visit_type = other.mbr_visit_type;
				mbr_start_date = other.mbr_start_date;
				mbr_end_date = other.mbr_end_date;
				value = other.value;
				admission_type = other.admission_type;
				ip_days = other.ip_days;
				admission_from_er = other.admission_from_er;
				MbrStartDateDateDimId = other.MbrStartDateDateDimId;
				MbrEndDateDateDimId = other.MbrEndDateDateDimId;
				DateDimensionsLinked = other.DateDimensionsLinked;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.Text(dw_account_id, nameof(dw_account_id), true, 0, 50);
			Requires.Text(dw_client_id, nameof(dw_client_id), true, 0, 50);
			Requires.Text(dw_member_id, nameof(dw_member_id), true, 0, 50);
			Requires.NonNull(mbr_id, nameof(mbr_id));
			Requires.Text(mbr_id, nameof(mbr_id), true, 0, 50);
			Requires.Text(mbr_visit_type, nameof(mbr_visit_type), true, 0, 50);
			Requires.Text(value, nameof(value), true, 0, 20);
			Requires.Text(admission_type, nameof(admission_type), true, 0, 55);
			Requires.Text(admission_from_er, nameof(admission_from_er), true, 0, 1);
			PartialValidate();
        }
	}
}
