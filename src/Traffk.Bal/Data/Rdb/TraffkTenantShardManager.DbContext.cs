/*
This was autogenerated
DO NOT MODIFY BY HAND!!!
TT File: Rdb.Schema.tt
XML File: C:\src\traffk\HealthInformationPortal\src\Traffk.Bal\Data\Rdb\TraffkTenantShardManager.SchemaMeta.xml
Generation Time: 08/17/2017 19:36:16
*/
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using RevolutionaryStuff.Core;
using RevolutionaryStuff.Core.ApplicationParts;
using RevolutionaryStuff.Core.Database;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data;
using System.Data.SqlClient;
using System.Threading.Tasks;
using System.Runtime.Serialization;

namespace Traffk.Bal.Data.Rdb.TraffkTenantShardManager
{
    public partial class TraffkTenantShardManagerDbContext
    {
		protected override void OnModelCreating(ModelBuilder modelBuilder)
		{
            base.OnModelCreating(modelBuilder);
			AddFluentRelationships(modelBuilder);
		}

		#region Collections

		
		public DbSet<ShardMapsGlobal> ShardMapsGlobal { get; set; } //__ShardManagement.ShardMapsGlobal

		
		public DbSet<ShardsGlobal> ShardsGlobal { get; set; } //__ShardManagement.ShardsGlobal

		#endregion

		#region Sprocs

		#endregion

	}

	[Table("ShardMapsGlobal", Schema = "__ShardManagement")]
	public partial class ShardMapsGlobal : IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<Guid>
	{
        public static readonly ShardMapsGlobal[] None = new ShardMapsGlobal[0];


		//modelBuilder.Entity<ShardsGlobal>(e=>e.HasOne(r=>r.ShardMap).WithMany(u=>u.ShardMapShardsGlobals).HasForeignKey(r=>r.ShardMapId));
		[InverseProperty("ShardMap")]
		[JsonIgnore]
        [IgnoreDataMember]
        public List<ShardsGlobal> ShardMapShardsGlobals { get; set; } = new List<ShardsGlobal>();

		//skipped: __ShardManagement.ShardMappingsGlobal

		object IPrimaryKey.Key { get { return ShardMapId; }}
	
		Guid IPrimaryKey<Guid>.Key { get { return ShardMapId; }}

		[DisplayName("Shard Map Id")]
		[Display(Name = "Shard Map Id")]
		[Key]
		[Column("ShardMapId")]
		public Guid ShardMapId { get; set; }

		[DisplayName("Name")]
		[Display(Name = "Name")]
		[NotNull]
		[Required]
		[MaxLength(50)]
		[Column("Name")]
		public string Name { get; set; }

		[DisplayName("Shard Map Type")]
		[Display(Name = "Shard Map Type")]
		[Column("ShardMapType")]
		public int ShardMapType { get; set; }

		[DisplayName("Key Type")]
		[Display(Name = "Key Type")]
		[Column("KeyType")]
		public int KeyType { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} ShardMapId={ShardMapId} {extras}";
		}

		partial void OnConstructed();
	
		public ShardMapsGlobal()
			: this(null)
		{}

		public ShardMapsGlobal(ShardMapsGlobal other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					ShardMapId = other.ShardMapId;
				}
				ShardMapShardsGlobals = other.ShardMapShardsGlobals;
				Name = other.Name;
				ShardMapType = other.ShardMapType;
				KeyType = other.KeyType;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(Name, nameof(Name));
			Requires.Text(Name, nameof(Name), true, 0, 50);
			PartialValidate();
        }
	}//end of entity class ShardMapsGlobal

	[Table("ShardsGlobal", Schema = "__ShardManagement")]
	public partial class ShardsGlobal : IRdbDataEntity, IValidate, IPreSave, IPrimaryKey<Guid>
	{
        public static readonly ShardsGlobal[] None = new ShardsGlobal[0];

		//skipped: __ShardManagement.ShardMappingsGlobal

		object IPrimaryKey.Key { get { return ShardId; }}
	
		Guid IPrimaryKey<Guid>.Key { get { return ShardId; }}

		[DisplayName("Shard Id")]
		[Display(Name = "Shard Id")]
		[Key]
		[Column("ShardId")]
		public Guid ShardId { get; set; }

		[DisplayName("Readable")]
		[Display(Name = "Readable")]
		[Column("Readable")]
		public bool Readable { get; set; }

		[DisplayName("Version")]
		[Display(Name = "Version")]
		[Column("Version")]
		public Guid Version { get; set; }

		[DisplayName("Shard Map Id")]
		[Display(Name = "Shard Map Id")]
		[Column("ShardMapId")]
		public Guid ShardMapId { get; set; }

		//LinksTo:__ShardManagement.ShardMapsGlobal
		[ForeignKey("ShardMapId")]
		[JsonIgnore]
        [IgnoreDataMember]
		public ShardMapsGlobal ShardMap { get; set; }

		[DisplayName("Operation Id")]
		[Display(Name = "Operation Id")]
		[Column("OperationId")]
		public Guid OperationId { get; set; }

		[DisplayName("Protocol")]
		[Display(Name = "Protocol")]
		[Column("Protocol")]
		public int Protocol { get; set; }

		[DisplayName("Server Name")]
		[Display(Name = "Server Name")]
		[NotNull]
		[Required]
		[MaxLength(128)]
		[Column("ServerName")]
		public string ServerName { get; set; }

		[DisplayName("Port")]
		[Display(Name = "Port")]
		[Column("Port")]
		public int Port { get; set; }

		[DisplayName("Database Name")]
		[Display(Name = "Database Name")]
		[NotNull]
		[Required]
		[MaxLength(128)]
		[Column("DatabaseName")]
		public string DatabaseName { get; set; }

		[DisplayName("Status")]
		[Display(Name = "Status")]
		[Column("Status")]
		public int Status { get; set; }

		partial void OnToString(ref string extras);

        public override string ToString()
		{
			string extras = null;
			OnToString(ref extras);
			return $"{GetType().Name} ShardId={ShardId} {extras}";
		}

		partial void OnConstructed();
	
		public ShardsGlobal()
			: this(null)
		{}

		public ShardsGlobal(ShardsGlobal other, bool copyKey=false)
		{
			if (other!=null)
			{
				if (copyKey)
				{
					ShardId = other.ShardId;
				}
				Readable = other.Readable;
				Version = other.Version;
				ShardMapId = other.ShardMapId;
				OperationId = other.OperationId;
				Protocol = other.Protocol;
				ServerName = other.ServerName;
				Port = other.Port;
				DatabaseName = other.DatabaseName;
				Status = other.Status;
			}
			OnConstructed();
		}

		partial void PartialPreSave();

		void IPreSave.PreSave()
        {
			OnPreSave();
		}

		protected virtual void OnPreSave()
		{
			PartialPreSave();
        }

		partial void PartialValidate();

		public virtual void Validate()
        {
			Requires.NonNull(ServerName, nameof(ServerName));
			Requires.Text(ServerName, nameof(ServerName), true, 0, 128);
			Requires.NonNull(DatabaseName, nameof(DatabaseName));
			Requires.Text(DatabaseName, nameof(DatabaseName), true, 0, 128);
			PartialValidate();
        }
	}//end of entity class ShardsGlobal


    public partial class TraffkTenantShardManagerDbContext
    {
		private void AddFluentRelationships(ModelBuilder modelBuilder)
		{
			modelBuilder.Entity<ShardsGlobal>(e=>e.HasOne(r=>r.ShardMap).WithMany(u=>u.ShardMapShardsGlobals).HasForeignKey(r=>r.ShardMapId));
		}
    }


}//end of file
