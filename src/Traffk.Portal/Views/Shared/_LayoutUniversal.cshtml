@using static TraffkPortal.AspHelpers
@{
    Layout = "~/Views/Shared/_LayoutEmptyContent.cshtml";
    ViewData["BodyContainerClass"] = "container-full-width no-side-padding";
    ViewData.SetIfMissing("Heading", ViewData["EntityTitle"] as string);
    var isListingPage = ViewData.IsListingPage();
    var isFormPage = ViewData.IsFormPage();
    var isContentPage = ViewData.IsContentPage();
    var showPageActions = ViewData.HasPageActions() && (isFormPage || isContentPage);
    var showListingActions = ViewData.HasPageActions() && isListingPage;
}
<!-- alert-->
<div class="alert alert-info alert-dismissable" id="@AspHelpers.ButtonActionNames.Save.ToLower()-alert" style="display: none">
    <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
    <i class="fa fa-check" aria-hidden="true"></i> Save completed successfully.
</div>
<div class="alert alert-info alert-dismissable" id="@AspHelpers.ButtonActionNames.Delete.ToLower()-alert" style="display: none">
    <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
    <i class="fa fa-check" aria-hidden="true"></i> Items deleted successfully.
</div>
@RenderSection("pageAlerts", false)
<!--end alert-->

@if (ViewData.HasBreadcrumbItems())
{
    <ul class="breadcrumbs">
        @RenderSection("breadcrumbItems", false)
        <li>@ViewData[ViewDataKeys.Heading]</li>
    </ul>
}
else
{
    this.IgnoreSectionIfDefined("breadcrumbItems");
}
@if (ViewBag.Heading != null)
{
    <div class="row">
        <div class="col-xs-12">
            <h1>@ViewBag.Heading</h1>
            @if (@ViewBag.Subheading != null)
            {
                <p class="subheading">@ViewBag.Subheading</p>
            }
        </div>
    </div>
}

@if (isListingPage || isFormPage)
{
    var filters = ViewBag.ListingFilters as ListingFilters;
    var hasFilters = filters != null;
    <div class="panel smallest-padding">
        
        @if (hasFilters || showListingActions || ViewData.HasSelectableItems())
        {
            <div class="row border-bottom">
                <div class="col-sm-2">
                    @if (hasFilters)
                    {
                        @await Html.PartialAsync("_ListingFiltersPartial", filters)
                    }
                </div>
                <div class="col-sm-8" id="filter-tags-container">
                    @if (ViewData.HasSelectableItems())
                    {
                        <p class="primary-color">
                            <span class="item-selected-status" id="noItemsSelected"></span>
                            <span class="item-selected-status hidden" id="oneItemSelected">1 item is selected</span>
                            <span class="item-selected-status hidden" id="multipleItemsSelected"><span id="selectedItemCount"></span> items are selected</span>
                        </p>
                    }
                    @if (hasFilters && false)
                    {
                        <ul class="filter-tags">
                            <li><a href="#">Workers Comp (3) <span><i class="fa fa-times" aria-hidden="true"></i></span></a></li>
                            <li><a href="#">Risk Reports (3) <span><i class="fa fa-times" aria-hidden="true"></i></span></a></li>
                        </ul>
                    }
                </div>
                <div class="col-sm-2 text-right">
                    @if (showListingActions)
                    {
                        <button class="btn btn-large btn-white toggle" data-toggle="actions-container-list" onclick="updateSelectionMessaging()">Actions</button>
                        <ul class="floated-filter list-right actions-container" id="actions-container-list">
                            @RenderSection("pageActionItems", required: false)
                        </ul>
                    }
                </div>
            </div>
        }
        @if (isListingPage)
        {
            <div class="row">
                <div class="col-xs-12">
                    <div class="table-responsive">
                        @RenderSection("listingTable", true)
                        @await Html.PartialAsync("_PaginationPartial")
                    </div>
                </div>
            </div>

            IgnoreBody();

        }
        @if (isFormPage)
        {
            if (ViewData.HasPageMenuItems() || showPageActions)
            {
                <div class="row border-bottom">
                    @if (ViewData.HasPageMenuItems())
                    {
                        <div class="col-sm-10" id="filter-tags-container">
                            <ul id="personal-page-nav">
                                @RenderSection("pageNavItems", false)
                            </ul>
                        </div>
                    }
                    @if (showPageActions)
                    {
                        <div class="col-sm-2 text-right">
                            <button class="btn btn-large btn-white toggle" data-toggle="actions-container-page" onclick="updateSelectionMessaging()">Actions</button>
                            <ul class="floated-filter list-right actions-container" id="actions-container-page">
                                @RenderSection("pageActionItems", false)
                            </ul>
                        </div>
                    }
                </div>
            }
            <div class="row">
                <div class="col-xs-12">
                    @RenderBody()
                </div>
            </div>
            this.IgnoreSectionIfDefined("listingTable");
        }

    </div>
}
else
{
    if (ViewData.HasPageMenuItems() || showPageActions)
    {
        <div class="row border-bottom">
            @if (ViewData.HasPageMenuItems())
                    {
                <div class="col-sm-10" id="filter-tags-container">
                    <ul id="personal-page-nav">
                        @RenderSection("pageNavItems", false)
                    </ul>
                </div>
            }
            @if (showPageActions)
                    {
                <div class="col-sm-2 text-right">
                    <button class="btn btn-large btn-white toggle" data-toggle="actions-container-page" onclick="updateSelectionMessaging()">Actions</button>
                    <ul class="floated-filter list-right actions-container" id="actions-container-page">
                        @RenderSection("pageActionItems", false)
                    </ul>
                </div>
            }
        </div>
    }
    <div class="row">
        <div class="col-xs-12">
            @RenderBody()
        </div>
    </div>
    this.IgnoreSectionIfDefined("listingTable");
}

@{ 
    if (!ViewData.HasPageMenuItems()) { this.IgnoreSectionIfDefined("pageNavItems"); }
    if (!showListingActions && !showPageActions) { this.IgnoreSectionIfDefined("pageActionItems"); }
}
@RenderSection("pageDialogs", false)
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    @RenderSection("scripts", false)
    @if (isListingPage)
    {
        <script>
            function deleteRowsWithContextIds(contextIds, contextIdAttrName)
            {
                if (contextIdAttrName == null) {
                    contextIdAttrName = "contextId";
                }
                for (n in contextIds)
                {
                    var contextId = contextIds[n];
                    $("tr[" + contextIdAttrName + "='" + contextId + "']").remove();
                }
            }
            function getSelectionContextIds(contextIdAttrName)
            {
                if (contextIdAttrName == null) {
                    contextIdAttrName = "contextId";
                }
                var ids = [];
                var boxes = document.querySelectorAll('input[type="checkbox"].item-selector:checked');
                for (var n = 0; n < boxes.length; ++n)
                {
                    var box = boxes[n];
                    ids[ids.length] = $(box).attr(contextIdAttrName);
                }
                return ids;
            }
            var hasSelectableItems = document.querySelectorAll('input[type="checkbox"].item-selector').length > 0;
            $("#all-items-selector").click(function () {
                $('input[type="checkbox"].item-selector').prop('checked', this.checked);
                updateSelectionMessaging();
            });
            $('input[type=checkbox].item-selector').click(function () {
                updateSelectionMessaging();
            });
            function updateSelectionMessaging()
            {
                var numberOfCheckedBoxes = document.querySelectorAll('input[type="checkbox"].item-selector:checked').length;
                $(".item-selected-status").addClass("hidden");
                if (numberOfCheckedBoxes == 0) {
                    $("#noItemsSelected").removeClass("hidden");
                }
                else if (numberOfCheckedBoxes == 1) {
                    $("#oneItemSelected").removeClass("hidden");
                }
                else {
                    $("#selectedItemCount").text(numberOfCheckedBoxes);
                    $("#multipleItemsSelected").removeClass("hidden");
                }
                //alert("updateSelectionMessaging.numberOfCheckedBoxes: " + numberOfCheckedBoxes);
                if (numberOfCheckedBoxes == 0) {
                    $(".actions-container li.multiselect-action").hide();
                }
                else {
                    $(".actions-container li.multiselect-action").show();
                }
                if (numberOfCheckedBoxes > 0) {
                    $(".actions-container li:not(.multiselect-action)").hide();
                }
                else {
                    $(".actions-container li:not(.multiselect-action)").show();
                }
                return true;
            }
            function deleteSelectedItemsMessage(itemType) {
                var ids = getSelectionContextIds();
                var cnt = ids.length;
                if (itemType == null)
                {
                    itemType = "item";
                }
                if (cnt > 1) {
                    itemType = itemType + "s";
                }
                var confirmMessage = "Are you sure you want to delete the " + cnt + " selected " + itemType + "?";

                var popupMessages = { buttonAction: '@AspHelpers.ButtonActionNames.Delete', message: confirmMessage };

                return popupMessages;
            }
        </script>
    }
}
