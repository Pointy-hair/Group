@using static TraffkPortal.Controllers.CommunicationsController

@{
    Layout = "~/Views/Shared/_LayoutUniversal.cshtml";
    ViewData.HasPageMenuItems(true);
    ViewData.HasBreadcrumbItems(true);
    var pageKey = (CommunicationsController.CommunicationPageKeys)ViewData[AspHelpers.ViewDataKeys.PageKey];
    var entityId = (int)ViewData[AspHelpers.ViewDataKeys.EntityId];
    var isNewEntity = entityId < 1;
    if (isNewEntity)
    {
        ViewData.SetTitleAndHeading("Create Blast");
    }
    //var jobStatus = Parse.ParseEnum<JobStatuses>(ViewData["JobStatus"] as string, JobStatuses.NonYetQueued);
    var parentEntityId = (int?)ViewData[AspHelpers.ViewDataKeys.ParentEntityId];
}
@section pageNavItems {
    <li><a asp-action="@CommunicationsController.ActionNames.CommunicationDetails" asp-route-id="@entityId" class="@(pageKey==CommunicationsController.CommunicationPageKeys.Background? "active" : "")">Main</a></li>
    @if (!isNewEntity)
    {
        <li><a asp-action="@CommunicationsController.ActionNames.CommunicationCreative" asp-route-id="@entityId" class="@(pageKey==CommunicationsController.CommunicationPageKeys.Creative?"active":"")">Creative</a></li>
        @*
            <li><a asp-action="@ActionNames.CommunicationQuery" asp-route-id="@entityId" class="@(pageKey == CommunicationPageKeys.Query ? "current-section" : "")">Query</a></li>
        *@
        <li><a asp-action="@CommunicationsController.ActionNames.CommunicationSchedule" asp-route-id="@entityId" class="@(pageKey == CommunicationsController.CommunicationPageKeys.Schedule ? "active" : "")">Schedule</a></li>
        <li><a asp-action="@CommunicationsController.ActionNames.CommunicationBlasts" asp-route-communicationId="@entityId" class="@(pageKey == CommunicationsController.CommunicationPageKeys.Blasts ? "active" : "")">Blasts</a></li>
    }
    @RenderSection("pageNavItems", required: false)
}
@section pageActionItems {
    @RenderSection("pageActionItems", required: false)
}
@section pageAlerts {
    @if (ViewBag.ShowAlertCommunicationSaved == true)
    {
        <div class="alert alert-success" role="alert">This communication has been saved.</div>
    }
    @RenderSection("pageAlerts", required: false)
}
@*
    @section pageAlerts {
        @if (ViewBag.ShowAlertCommunicationSaved == true)
        {
            <div class="alert alert-success" role="alert">This communication has been saved.</div>
        }
        @RenderSection("pageAlerts", required: false)
    }
        @section pageActionButtons {
            @if (!isNewEntity)
            {
                switch (jobStatus)
                {
                    case JobStatuses.NonYetQueued:
                        <button type="button" class="btn caseefault" asp-action="Create">Send Now</button>;
                        break;
                    case JobStatuses.Queued:
                    case JobStatuses.Dequeued:
                    case JobStatuses.Running:
                        <button type="button" class="btn caseefault" asp-action="Create">Cancel In Progress Send</button>;
                        break;
                }
            }
            @RenderSection("pageActionButtons", required: false)
        }
*@
@section pageDialogs {
    @RenderSection("pageDialogs", required: false)
}
@section Scripts {
    @RenderSection("scripts", required: false)
}
@section breadcrumbItems {
    <li><a asp-controller="@CommunicationsController.Name" asp-action="@CommunicationsController.ActionNames.CommunicationsList">Communications</a> <span>></span> </li>
    @if (@ViewData[AspHelpers.ViewDataKeys.EntityTitle] != @ViewData[AspHelpers.ViewDataKeys.Heading])
    {
        <li><a asp-controller="@CommunicationsController.Name" asp-action="@CommunicationsController.ActionNames.CommunicationDetails" asp-route-id="@ViewData[AspHelpers.ViewDataKeys.EntityId]">@ViewData[AspHelpers.ViewDataKeys.EntityTitle]</a> <span>></span> </li>
    }
    @RenderSection("breadcrumbItems", required: false)
}
@section listingTable {
    @RenderSection("listingTable", required: false)
}
@RenderBody()

