@using static TraffkPortal.Controllers.TenantsController
@using Traffk.Bal.Settings;
@model ReusableValue
@{
    Layout = "_LayoutTenant.cshtml";
    if (Model.Key == null)
    {
        ViewData.SetTitleAndHeading($"Create {Model.ResourceType} Resource");
    }
    else
    {
        ViewData.SetTitleAndHeading(Model.Key);
    }
    var isNew = Model.Key == null || Model.Key == NewReusableValueKey;
    ViewData.IsFormPage(true);

}

<form asp-action="@ActionNames.ReusableValueEditSubmission" asp-route-tenantId="@ViewContext.GetRouteValue("tenantId")" asp-route-key="@(Model.Key??NewReusableValueKey)" class="inline-form">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="row">
        <div class="col-sm-12">
            <div class="form-row">
                <label asp-for="Key"></label>
                <div class="col-md-10">
                    @if (isNew)
                    {
                        <input asp-for="Key" class="form-control" />
                    }
                    else
                    {
                        <input asp-for="Key" class="form-control" readonly="readonly" />
                    }
                    <span asp-validation-for="Key" class="text-danger" />
                </div>
            </div>
            <div class="form-row">
                <input type="hidden" asp-for="ResourceType" />
                <label asp-for="Value"></label>
                <div class="col-md-10">
                    @switch (Model.ResourceType)
                    {
                        case ReusableValueTypes.Color:
                            <input asp-for="Value" type="color" class="form-control" />
                            break;
                        case ReusableValueTypes.EmailAddress:
                            <input asp-for="Value" type="email" class="form-control" />
                            break;
                        case ReusableValueTypes.Url:
                            <input asp-for="Value" type="url" class="form-control" />
                            break;
                        case ReusableValueTypes.Text:
                            <textarea asp-for="Value" class="form-control"></textarea>
                            break;
                        case ReusableValueTypes.Html:
                            <textarea asp-for="Value" class="form-control htmleditor"></textarea>
                            break;
                        default:
                            throw new UnexpectedSwitchValueException(Model.ResourceType);
                    }
                    <span asp-validation-for="Value" class="text-danger" />
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-12 text-right">
            <input type="submit" value="Save" class="btn btn-default btn-primary btn-large" />
        </div>
    </div>
</form>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
