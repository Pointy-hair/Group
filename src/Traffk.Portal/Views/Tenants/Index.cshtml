@using static TraffkPortal.Controllers.TenantsController
@using Traffk.Bal.Data.Rdb.TraffkTenantModel
@model IEnumerable<Tenant>
@{
    Layout = "~/Views/Shared/_LayoutUniversal.cshtml";
    ViewData.SetTitleAndHeading("Tenants", "This is the tenant subheading.");
    ViewData.IsListingPage(true);
    ViewData.HasPageMenuItems(true);
}
@section listingFilters
{
    <div class="col-sm-2">
        <button class="btn btn-large btn-white toggle" data-toggle="reports-filter">Filters</button>
        <ul id="reports-filter" class="floated-filter list-left">
            <li>
                <a href="#">PHI</a>
                <ul class="filter-subnav">
                    <li><a href="#">PHI <span>4</span></a></li>
                    <li><a href="#">No Phi <span>3</span></a></li>
                </ul>
            </li>
            <li><a href="#">Budget Vs Actual <span>4</span></a></li>
            <li><a href="#">Risk Report <span>3</span></a></li>
            <li><a href="#">Medical Claims <span>3</span></a></li>
        </ul>
    </div>
}
@section listingActionButtons
{
    <button class="btn btn-large btn-white toggle" data-toggle="actions-filter2">Actions</button>
    <ul id="actions-filter2" class="floated-filter list-right">
        <li><a href="#">Create</a></li>
        <li class="multiselect-action"><a href="#" class="popup-confirm_open">Delete</a></li>
    </ul>
}
@section listingTable
{
    <table class="table table-bordered table-hover table-striped">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.TenantId)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.TenantName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.LoginDomain)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @{
                var parents = new Stack<Tenant>();
            }
            @foreach (var item in Model)
            {
                while (parents.Count > 0 && parents.Peek().TenantId != item.ParentTenantId) { parents.Pop(); }
                int depth = parents.Count;
                parents.Push(item);
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.TenantId)
                    </td>
                    <td>
                        <span style="padding-left:@(.5*depth)cm"></span>
                        <a asp-action="@ActionNames.TenantEdit" asp-route-tenantId="@item.TenantId">@Html.DisplayFor(modelItem => item.TenantName)</a>
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.LoginDomain)
                    </td>
                    <td class="text-center">
                        <i class="fa fa-ellipsis-h toggle" aria-hidden="true" data-toggle="row-action-@item.TenantId"></i>
                        <ul id="row-action-@item.TenantId" class="floated-filter list-right">
                            <!-- displaying by default for demo purpose -->
                            <li><a asp-action="@ActionNames.TenantCreate" asp-route-parentTenantId="@item.TenantId">Create Child</a></li>
                            @if (item.TenantId == this.TenantFinder.TenantId)
                            {
                                <li>
                                <a asp-action="@ActionNames.TenantDelete" asp-route-tenantId="@item.TenantId">Delete</a>
                                </li>
                            }
                        </ul>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}